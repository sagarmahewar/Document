//Copy constructor
#include <iostream>
using namespace std;
class Line
{
   public:
      int getLength( void );
      Line( int len );             // simple constructor
      Line( const Line &obj);  // copy constructor
      ~Line();                     // destructor

   private:
      int *ptr;
};

// Member functions definitions including constructor
Line::Line(int len)
{
    cout << "Normal constructor allocating ptr" << endl;
    // allocate memory for the pointer;
    ptr = new int;
    *ptr = len;
}

Line::Line(const Line &obj)
{
    cout << "Copy constructor allocating ptr." << endl;
    ptr = new int;
   *ptr = *(obj.ptr); // copy the value
}

Line::~Line(void)
{
    cout << "Freeing memory!" << endl;
    delete ptr;
}

int Line::getLength( void )
{
    return *ptr;
}

void display(Line obj)
{
   cout << "Length of line : " << obj.getLength() <<endl;
}

// Main function for the program
int main( )
{
   Line line(10);

   display(line);

   return 0;
}

——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// Assignment operator & Copy constructor

class Cents
{
private:
    int m_nCents;
public:
    Cents(int nCents=0)
    {
        m_nCents = nCents;
    }
 
    // Copy constructor
    Cents(const Cents &cSource)
    {
        m_nCents = cSource.m_nCents;
    }

    // Assignment operator
    Cents& operator= (const Cents &cSource);
};

Cents& Cents::operator= (const Cents &cSource)
{
    // do the copy
    m_nCents = cSource.m_nCents;
 
    return *this;  // VIMP Note the return type here
}

——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// Sigleton

#include "stdio.h"
#include "stdafx.h"
#include <iostream>
#include <string>
using namespace std;

class Singleton
{
    Singleton(){};   // Do not miss {}, will give link error
    ~Singleton(){if(m_pInstance != NULL) delete m_pInstance};
    Singleton(const Singleton&){}; // copy constructor is private
    
    Singleton& operator=(const Singleton&){}; // assignment operator is private
    static Singleton* m_pInstance; // Should be static for one instance across objects

public:
    static Singleton* getInstance(); // SHould be static to access member function without class object
};

Singleton* Singleton::m_pInstance = NULL; // Should initialize // Dont prefix static specifier

Singleton* Singleton::getInstance() // Dont prefix static specifier
{
    if(m_pInstance == NULL)
    {
        m_pInstance = new Singleton;
    }
    return m_pInstance;
}

int _tmain(int argc, _TCHAR* argv[])
{
    cout << "first Instance \n";
    Singleton* obj = Singleton::getInstance();
    cout << "first Instance 1 \n";
    Singleton* obj1 = Singleton::getInstance();

    return 0;
}

——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//If else if

int _tmain(int argc, _TCHAR* argv[])
{
    int testScore;
    cout << "Enter your test score: ";
    cin >> testScore;
    if (testScore >= 90 )
        cout << "Your grade is an A" << endl;
    else if (testScore >= 80 )
        cout << "Your grade is a B" << endl;
    else if (testScore >= 70 )
        cout << "Your grade is a C" << endl;
    else if (testScore >= 60 )
        cout << "Your grade is a D" << endl;
    else 
        cout << "Your grade is an F" << endl;
    cout << "Prees any key";
    cin >> testScore;

    std::string str;
    long long len = str.max_size();
    cout<<len;
    cin>>len;

    return 0;
}

——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// Factorial number

int factorial(int iNum)
{
    int factNum=1;
    if(iNum >0)
        factNum = iNum * factorial(iNum-1);
    return factNum;
}

int _tmain(int argc, _TCHAR* argv[])
{
    int iNum, FactNum;
    cout << " Enter number : ";
    cin >> iNum;
    FactNum = factorial(iNum);
    cout << "Fact is : " << FactNum;
    return 0;
}



——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// Prime number

bool isPrime(int iNum)
{
    for(int i=2;i<iNum;i++)
    {
        if(iNum%i == 0)
        {
            return false;
        }
    }
    return true;
}

int _tmain(int argc, _TCHAR* argv[])
{
    int iNum, FactNum;
    cout << " Enter number : ";
    cin >> iNum;
    if(isPrime(iNum))
       cout << "PRIME";
    else
        cout << "NOT A PRIME";
    return 0;
}

——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// LinkedList

struct node
{
    node():next(NULL){}

    int data;
    node* next;
}*startNode;

void appendNode(int iVal)
{
    if(startNode == NULL)
    {
        startNode = new node;
        startNode->data = iVal;
        return;
    }

    node *tempNode;
    tempNode = startNode;
    while(tempNode->next != NULL)
    {
        tempNode = tempNode->next;
    }

    node *temp = new node;
    temp->data = iVal;    

    tempNode->next = temp;    
}

void showNode()
{
    node *tempNode = startNode;
    while(tempNode != NULL)
    {
        cout << tempNode->data;
        tempNode = tempNode->next;        
    }
    cout<<endl;
}

void deleteNode(int iIndex)
{
    if(iIndex == 0 || startNode == NULL)
    {
        cout<< "Linked list is empty or Index is 0";
        return;
    }

    node *tmp = startNode;
    node *tmpOld = tmp;
    int iNum=0;
    while(tmp != NULL)
    {   
        tmpOld = tmp;
        tmp = tmp->next;

        if(iIndex == iNum++)
        {
            tmpOld->next=tmp->next;
            delete tmp;
            tmp=NULL;
            return;
        }
    }
}

int _tmain(int argc, _TCHAR* argv[])
{
    startNode = NULL;

    appendNode(10);
    appendNode(20);
    appendNode(30);
    appendNode(40);
    appendNode(50);
    showNode();
    deleteNode(3);
    showNode();
    return 0;
}

——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class A
{   
public:
    
virtual void Function1();
virtual void Function2();
};

class B : public A
{
public:
virtual void Function1(){cout<<"B::Function1";}
virtual void Function2(){cout<<"B::Function2";}
};

class C : public B
{
public:
virtual void Function1(){cout<<"C::Function1";}
virtual void Funtion2(){cout<<"C::Function2";}
};

int _tmain(int argc, _TCHAR* argv[])
{
   B *Obj = new B;
   Obj->Function1();
    return 0;
}

——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// OperatorOverloading

class SeeMyCode
{
public:
    SeeMyCode(){}
    SeeMyCode(int tOne, int tTwo):mOne(tOne),mTwo(tTwo){}


    SeeMyCode operator+(SeeMyCode tSeeMyCode);

    int mOne, mTwo;
};

SeeMyCode SeeMyCode::operator+(SeeMyCode tSeeMyCode)
{
    SeeMyCode temp;
    temp.mOne = mOne + tSeeMyCode.mOne;
    temp.mTwo = mTwo + tSeeMyCode.mTwo;
    return (temp);
}

int _tmain(int argc, _TCHAR* argv[])
{
    SeeMyCode objOne(10,20);
    SeeMyCode objTwo(30, 40);
    SeeMyCode objThree;

    objThree = objOne + objTwo;

    cout<<objThree.mOne << "  " << objThree.mTwo ;
    return 0;
}

——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// templateFunction

template <class MyTemplate>
MyTemplate GetGreater(MyTemplate mT1, MyTemplate mT2)
{
    return mT1 > mT2 ? mT1 : mT2;
}

int _tmain(int argc, _TCHAR* argv[])
{
    int i1=10, i2=20;
    float f1=140.10, f2=40.04;

    cout << "int   = " << GetGreater(i1,i2);
    cout << "\nfloat = " << GetGreater(f1,f2);
    return 0;
}

——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TemplateClass

template <class tMyClass>       // Template declaration
class SeeMyClass
{
    tMyClass mObjOne, mObjTwo;

public:
    SeeMyClass(){}
    SeeMyClass(tMyClass t1, tMyClass t2):mObjOne(t1),mObjTwo(t2){}    
    tMyClass GetMax();
};

template <class tMyClass>       // Template declaration again required, otherwise it gives compilation error
tMyClass SeeMyClass<tMyClass>::GetMax()
{
    return mObjOne > mObjTwo ?  mObjOne : mObjTwo;
}

int _tmain(int argc, _TCHAR* argv[])
{
    SeeMyClass<int> tt;        // Even for default CONSTRUCTOR, <int> should be mentioned, otherwise it gives compilation error
    SeeMyClass<int> obj(30,20);
    cout << obj.GetMax();
    return 0;
}

——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PureVirtualFunction

class Metro
{
public:
    virtual void Train(bool)=0;
};

void Metro::Train (bool bAvailable)
{
   
    if(bAvailable)
        cout<<"Metro Train Available";
    else
        cout<<"Metro Train Not Available";
}

class Pune:public Metro
{
public :
    virtual void Train(bool bAvailable);
};

void Pune::Train(bool bAvailable) 
{
    if(bAvailable)
        cout<<"Train Available";
    else
        cout<<"Train Not Available";
}

int _tmain(int argc, _TCHAR* argv[])
{
    Metro* PuneObj = new Metro;
    PuneObj->Train(true);
    return 0;
}


class BaseType
 {
 public:
     BaseType()
     {
         cout<<"Call base ctor.";
         DoSomething();
     }

     virtual void DoSomething()
     {
         cout << "Base DoSomething";
     }
 };

 class DerivedType : public BaseType
 {
     public:
     DerivedType()
     {
         cout << "Call derived ctor.";
     }

     virtual void DoSomething()
     {
         cout << "Derived DoSomething";
     }
 };

int _tmain(int argc, _TCHAR* argv[])
{
    DerivedType* derived = new DerivedType;
    return 0;
}

——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// Simple c++ code to find number is palindrome or not:


#include<iostream>
using namespace std;
int main()
{
    int palindrome, reverse=0;
    cout<<"Enter number:  ";
    cin>>palindrome;
    int num=0,key=palindrome;
for(int i=1;palindrome!=0;i++){

    num=palindrome%10;
    palindrome=palindrome/10;
    reverse=num+(reverse*10);
              }

   if(reverse==key){
   cout<<key<<" is a Palindrome Number";
            }
            else{
   cout<<key<<"is NOT a Palindrome Number";
            }
return 0;
}

——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// Internal Implementation of STL Vector

Vector is implemented as a dynamically allocated array. The memory for this array is allocated in the constructor. As more elements are inserted the array is dynamically increased in size. A constructor without parameter creates an array with a default size. Another constructor with integer parameter creates an array of the specified size. The destructor deletes the memory allocated for the array.

	
	const int _DEFAULT_VECTOR_SIZE = 4;
 
	template <typename T>
	class vector
	{
	    public :
 
			// constructors
			vector()
				: array_( new T[_DEFAULT_VECTOR_SIZE] ),
				  reserved_size_( _DEFAULT_VECTOR_SIZE ),
				  size_( 0 )
			{ }
 
			vector(int n) // create vector with n default elements
				: array_( new T[n] ),
				  reserved_size_( n ),
				  size_( 0 )
    		{ }
 
			// destructor
			~vector()
			{ delete[] array_; }
 
	    private :
 
		    T *array_;
			int size_;
			int reserved_size_;
	};



Adding elements

The most frequently used function to add elements to vector is push_back. The function adds the element at the end of the vector ie. after the current last element. This is accomplished by putting the element at the size_th position. However that is not sufficient because vector is a dynamically increasing container hence if the currently allocated memory is not sufficient to hold the element then more memory should be allocated. So, see that there is sufficient memory to hold the element, if not allocate more memory and then insert the element.

    template <typename T>
    void vector<T>::push_back(const T &t)
    {
        // if we've run out of space, allocate more memory
        if(size_ == reserved_size_)
            resize(reserved_size_ + _DEFAULT_VECTOR_SIZE);
 
        // size_ when used as an index, points to the next position after
        // the last element in the vector
        array_[size_] = t;
 
        // now there is one more element in the vector, so increase the size
        size_++;
    }



The resize function is used to set the size of the reserved memory. Although this function is public and can be called by client code to change the actual size of the memory held by the vector it is used internally for the same purpose. Here is the implementation of the function.

    template <typename T>
    void vector<T>::resize(int n) // make the size of the internal array exactly n
    {
        if(n > reserved_size_) // if requested size is more than the current size
        {
            // allocate a new array of larger capacity
            // copy the old array to new array
            // destroy old array
            auto_array<T> new_array( new T[n] );
            for(int i=0; i<size_; i++)
            {
                new_array[i] = array_[i];
            }
 
            delete[] array_;
            array_ = new_array.release();
            reserved_size_ = n;
        }
    }

——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
