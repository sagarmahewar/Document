{\rtf1\adeflang1025\ansi\ansicpg1252\uc1\adeff0\deff0\stshfdbch31505\stshfloch31506\stshfhich31506\stshfbi0\deflang16393\deflangfe16393\themelang16393\themelangfe0\themelangcs0{\fonttbl{\f0\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f4\fbidi \fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Helvetica;}
{\f15\fbidi \fmodern\fcharset128\fprq1{\*\panose 020b0609070205080204}MS Gothic{\*\falt ?l?r ?S?V?b?N};}{\f34\fbidi \froman\fcharset0\fprq2{\*\panose 02040503050406030204}Cambria Math;}
{\f39\fbidi \fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Verdana;}{\f40\fbidi \fmodern\fcharset128\fprq1{\*\panose 020b0609070205080204}@MS Gothic;}{\flomajor\f31500\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fdbmajor\f31501\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fhimajor\f31502\fbidi \froman\fcharset0\fprq2{\*\panose 02040503050406030204}Cambria;}
{\fbimajor\f31503\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\flominor\f31504\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fdbminor\f31505\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fhiminor\f31506\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0502020204030204}Calibri;}
{\fbiminor\f31507\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f313\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\f314\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\f316\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\f317\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\f318\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f319\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\f320\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\f321\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\f465\fbidi \fmodern\fcharset0\fprq1 MS Gothic Western{\*\falt ?l?r ?S?V?b?N};}
{\f463\fbidi \fmodern\fcharset238\fprq1 MS Gothic CE{\*\falt ?l?r ?S?V?b?N};}{\f464\fbidi \fmodern\fcharset204\fprq1 MS Gothic Cyr{\*\falt ?l?r ?S?V?b?N};}{\f466\fbidi \fmodern\fcharset161\fprq1 MS Gothic Greek{\*\falt ?l?r ?S?V?b?N};}
{\f467\fbidi \fmodern\fcharset162\fprq1 MS Gothic Tur{\*\falt ?l?r ?S?V?b?N};}{\f470\fbidi \fmodern\fcharset186\fprq1 MS Gothic Baltic{\*\falt ?l?r ?S?V?b?N};}{\f653\fbidi \froman\fcharset238\fprq2 Cambria Math CE;}
{\f654\fbidi \froman\fcharset204\fprq2 Cambria Math Cyr;}{\f656\fbidi \froman\fcharset161\fprq2 Cambria Math Greek;}{\f657\fbidi \froman\fcharset162\fprq2 Cambria Math Tur;}{\f660\fbidi \froman\fcharset186\fprq2 Cambria Math Baltic;}
{\f661\fbidi \froman\fcharset163\fprq2 Cambria Math (Vietnamese);}{\f703\fbidi \fswiss\fcharset238\fprq2 Verdana CE;}{\f704\fbidi \fswiss\fcharset204\fprq2 Verdana Cyr;}{\f706\fbidi \fswiss\fcharset161\fprq2 Verdana Greek;}
{\f707\fbidi \fswiss\fcharset162\fprq2 Verdana Tur;}{\f710\fbidi \fswiss\fcharset186\fprq2 Verdana Baltic;}{\f711\fbidi \fswiss\fcharset163\fprq2 Verdana (Vietnamese);}{\f715\fbidi \fmodern\fcharset0\fprq1 @MS Gothic Western;}
{\f713\fbidi \fmodern\fcharset238\fprq1 @MS Gothic CE;}{\f714\fbidi \fmodern\fcharset204\fprq1 @MS Gothic Cyr;}{\f716\fbidi \fmodern\fcharset161\fprq1 @MS Gothic Greek;}{\f717\fbidi \fmodern\fcharset162\fprq1 @MS Gothic Tur;}
{\f720\fbidi \fmodern\fcharset186\fprq1 @MS Gothic Baltic;}{\flomajor\f31508\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\flomajor\f31509\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\flomajor\f31511\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\flomajor\f31512\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\flomajor\f31513\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\flomajor\f31514\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\flomajor\f31515\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\flomajor\f31516\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\fdbmajor\f31518\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fdbmajor\f31519\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fdbmajor\f31521\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}
{\fdbmajor\f31522\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fdbmajor\f31523\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fdbmajor\f31524\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\fdbmajor\f31525\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fdbmajor\f31526\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fhimajor\f31528\fbidi \froman\fcharset238\fprq2 Cambria CE;}
{\fhimajor\f31529\fbidi \froman\fcharset204\fprq2 Cambria Cyr;}{\fhimajor\f31531\fbidi \froman\fcharset161\fprq2 Cambria Greek;}{\fhimajor\f31532\fbidi \froman\fcharset162\fprq2 Cambria Tur;}
{\fhimajor\f31535\fbidi \froman\fcharset186\fprq2 Cambria Baltic;}{\fhimajor\f31536\fbidi \froman\fcharset163\fprq2 Cambria (Vietnamese);}{\fbimajor\f31538\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\fbimajor\f31539\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fbimajor\f31541\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbimajor\f31542\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\fbimajor\f31543\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fbimajor\f31544\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbimajor\f31545\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\fbimajor\f31546\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\flominor\f31548\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\flominor\f31549\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\flominor\f31551\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\flominor\f31552\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\flominor\f31553\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\flominor\f31554\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\flominor\f31555\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\flominor\f31556\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\fdbminor\f31558\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fdbminor\f31559\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fdbminor\f31561\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}
{\fdbminor\f31562\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fdbminor\f31563\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fdbminor\f31564\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\fdbminor\f31565\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fdbminor\f31566\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fhiminor\f31568\fbidi \fswiss\fcharset238\fprq2 Calibri CE;}
{\fhiminor\f31569\fbidi \fswiss\fcharset204\fprq2 Calibri Cyr;}{\fhiminor\f31571\fbidi \fswiss\fcharset161\fprq2 Calibri Greek;}{\fhiminor\f31572\fbidi \fswiss\fcharset162\fprq2 Calibri Tur;}
{\fhiminor\f31575\fbidi \fswiss\fcharset186\fprq2 Calibri Baltic;}{\fhiminor\f31576\fbidi \fswiss\fcharset163\fprq2 Calibri (Vietnamese);}{\fbiminor\f31578\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\fbiminor\f31579\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fbiminor\f31581\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbiminor\f31582\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\fbiminor\f31583\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fbiminor\f31584\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbiminor\f31585\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\fbiminor\f31586\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;
\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red191\green191\blue191;\red31\green31\blue31;
\red28\green28\blue28;\red9\green47\blue157;}{\*\defchp \fs22\loch\af31506\hich\af31506\dbch\af31505 }{\*\defpap \ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 }\noqfpromote {\stylesheet{
\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs22\alang1025 \ltrch\fcs0 \fs22\lang16393\langfe16393\loch\f31506\hich\af31506\dbch\af31505\cgrid\langnp16393\langfenp16393 
\snext0 \sqformat \spriority0 Normal;}{\*\cs10 \additive \ssemihidden \sunhideused \spriority1 Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\tblind0\tblindtype3\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv \ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs22\alang1025 \ltrch\fcs0 \fs22\lang16393\langfe16393\loch\f31506\hich\af31506\dbch\af31505\cgrid\langnp16393\langfenp16393 \snext11 \ssemihidden \sunhideused 
Normal Table;}}{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\rtlch\fcs1 \af0 \ltrch\fcs0 
\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}\rtlch\fcs1 \af0 \ltrch\fcs0 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0
\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}\rtlch\fcs1 \af0 \ltrch\fcs0 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}\rtlch\fcs1 \af0 
\ltrch\fcs0 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}\rtlch\fcs1 \af0 \ltrch\fcs0 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0
\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}\rtlch\fcs1 \af0 \ltrch\fcs0 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}\rtlch\fcs1 \af0 
\ltrch\fcs0 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}\rtlch\fcs1 \af0 \ltrch\fcs0 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0
\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}\rtlch\fcs1 \af0 \ltrch\fcs0 }{\listname ;}\listid1}{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360
\levelindent0{\leveltext\leveltemplateid101\'01\'95;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}\rtlch\fcs1 \af0 
\ltrch\fcs0 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}\rtlch\fcs1 \af0 \ltrch\fcs0 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0
\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}\rtlch\fcs1 \af0 \ltrch\fcs0 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}\rtlch\fcs1 \af0 
\ltrch\fcs0 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}\rtlch\fcs1 \af0 \ltrch\fcs0 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0
\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}\rtlch\fcs1 \af0 \ltrch\fcs0 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}\rtlch\fcs1 \af0 
\ltrch\fcs0 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}\rtlch\fcs1 \af0 \ltrch\fcs0 }{\listname ;}\listid2}}{\*\listoverridetable{\listoverride\listid1
\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}{\*\revtbl {Unknown;}}{\*\rsidtbl \rsid593569\rsid683151\rsid3355693\rsid4412535\rsid5453207\rsid11223516\rsid11607506\rsid11956281\rsid13917015}{\mmathPr\mmathFont34\mbrkBin0\mbrkBinSub0\msmallFrac0
\mdispDef1\mlMargin0\mrMargin0\mdefJc1\mwrapIndent1440\mintLim0\mnaryLim1}{\info{\keywords cursorLocation=50663, fitsPagesWidth=1}{\operator Mahewar, Sagar S}{\creatim\yr2014\mo6\dy19\hr14\min40}{\revtim\yr2014\mo6\dy20\hr15\min27}{\version8}{\edmins1452}
{\nofpages73}{\nofwords29401}{\nofchars167592}{\nofcharsws196600}{\vern49273}}{\*\xmlnstbl {\xmlns1 http://schemas.microsoft.com/office/word/2003/wordml}}\paperw12240\paperh15840\margl1440\margr1440\margt1440\margb1440\gutter0\ltrsect 
\widowctrl\ftnbj\aenddoc\trackmoves0\trackformatting1\donotembedsysfont0\relyonvml0\donotembedlingdata1\grfdocevents0\validatexml0\showplaceholdtext0\ignoremixedcontent0\saveinvalidxml0\showxmlerrors0\horzdoc\dghspace120\dgvspace120\dghorigin1701
\dgvorigin1984\dghshow0\dgvshow3\jcompress\viewkind1\viewscale148\rsidroot11607506 \fet0{\*\wgrffmtfilter 2450}\ilfomacatclnup0\ltrpar \sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2
\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6
\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang 
{\pntxtb (}{\pntxta )}}\pard\plain \ltrpar\ql \li0\ri0\nowidctlpar\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs22\alang1025 \ltrch\fcs0 
\fs22\lang16393\langfe16393\loch\af31506\hich\af31506\dbch\af31505\cgrid\langnp16393\langfenp16393 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 STL \hich\f4 \endash \loch\f4 
 Array, Vector, Map, List differences
\par 
\par \hich\af4\dbch\af31505\loch\f4 The C++ Interview 
\par 
\par \hich\af4\dbch\af31505\loch\f4 These 40 questions and answers will help you land the assignment
\par 
\par \hich\af4\dbch\af31505\loch\f4 by Alex Bykov
\par 
\par \hich\af4\dbch\af31505\loch\f4 How do you rank your C++ skills on a scale of 1 to 10? 
\par 
\par \hich\af4\dbch\af31505\loch\f4 This is often the first question you will hear on an i\hich\af4\dbch\af31505\loch\f4 
nterview for a C++ contract. You will be tempted to rate yourself high, and you should. This is your chance to convince the client that you are just what he is looking for -- an assertive and knowledgeable professional who will be productive either workin
\hich\af4\dbch\af31505\loch\f4 g\hich\af4\dbch\af31505\loch\f4 
 on a team or on your own. Naturally, though, you should be able to support the ranking you gave yourself by doing well on the interview. This article will help you prepare for your C++ interview. 
\par 
\par \hich\af4\dbch\af31505\loch\f4 I put together a list of 40 questions that I have had to \hich\af4\dbch\af31505\loch\f4 
answer during numerous technical interviews in the past few years. You, too, will have to answer at least some of them during an interview. Even if you use C++ on a daily basis, it pays to go through the questions. Most of us, no matter how experienced, u
\hich\af4\dbch\af31505\loch\f4 s\hich\af4\dbch\af31505\loch\f4 e only a segment of the language that we are most comfortable with. Brief answers are included, but you can find more information in the references listed. 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q1. Is there anything you can do in C++ that you cannot do in C? 
\par 
\par \hich\af4\dbch\af31505\loch\f4 A1. No. There is nothing you ca\hich\af4\dbch\af31505\loch\f4 n do in C++ that you cannot do in C. After all you can write a C++ compiler in C. 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q2. What is the difference between C++ structure and C++ class? 
\par 
\par \hich\af4\dbch\af31505\loch\f4 A2. The default access level assigned to members of struct is public while the default access level assign\hich\af4\dbch\af31505\loch\f4 ed to a class is private. 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q3. What is encapsulation? 
\par 
\par \hich\af4\dbch\af31505\loch\f4 A3. Encapsulation is welding of code and data together into objects.
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q4. What is inheritance? 
\par 
\par \hich\af4\dbch\af31505\loch\f4 A4. Inheritance is a mechanism through which a subclass inherits the properties and behavior of its su\hich\af4\dbch\af31505\loch\f4 perclass. 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q5. What is polymorphism? 
\par 
\par \hich\af4\dbch\af31505\loch\f4 A5. In Greek this means "many shapes." As a consequence of inheritance and virtual functions, a single task (for example, drawing a geometrical shape) can be implemented using the same name (like draw()) and implemen
\hich\af4\dbch\af31505\loch\f4 
ted differently (via virtual functions) as each type in object hierarchy requires(circle.draw() or rectangle.draw()). Later, when a polymorphic object (whose type is not known at compile time) executes the draw() virtual function, the correct implementati
\hich\af4\dbch\af31505\loch\f4 o\hich\af4\dbch\af31505\loch\f4 n is chosen and executed at run time. 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Using the same thing in different way is know as Polymorphism.
\par 
\par \hich\af4\dbch\af31505\loch\f4 Types of Polymorphism : 
\par \hich\af4\dbch\af31505\loch\f4 1] Static Polymorphism \hich\f4 \endash \loch\f4  Template, Function Overloading & Operator Overloading.
\par \hich\af4\dbch\af31505\loch\f4 2] Dynamic Polymorphism \hich\f4 \endash \loch\f4  Inheritance & Virtual\hich\af4\dbch\af31505\loch\f4  Functions
\par 
\par \hich\af4\dbch\af31505\loch\f4 run-time: 
\par \hich\af4\dbch\af31505\loch\f4 The run-time polymorphism is implemented with inheritance and virtual functions. 
\par \hich\af4\dbch\af31505\loch\f4 compile-time: 
\par \hich\af4\dbch\af31505\loch\f4 The compile-time polymorphism is implemented with templates. 
\par \hich\af4\dbch\af31505\loch\f4 ad-hoc polymorphism: 
\par \hich\af4\dbch\af31505\loch\f4 If the range of actual types that can be used is fin\hich\af4\dbch\af31505\loch\f4 ite and the combinations must be individually specified prior to use, this is called ad-hoc polymorphism. 
\par \hich\af4\dbch\af31505\loch\f4 parametric polymorphism: 
\par \hich\af4\dbch\af31505\loch\f4 If all code is written without mention of any specific type and thus can be used transparently with any number of new types\hich\af4\dbch\af31505\loch\f4  it is called parametric polymorphism. 
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q6. What would you say if you saw "delete this" while reviewing your peer's code? 
\par \hich\af4\dbch\af31505\loch\f4 A6. You should never do this. Since compiler does not know whether the object was allocated on the stack or on the heap, "delete th\hich\af4\dbch\af31505\loch\f4 is" could cause a disaster. 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q7. What is the difference between public, protected, and private members of a class? 
\par \hich\af4\dbch\af31505\loch\f4 A7. Private members are accessible only by members and friends of the class. Protected members are accessible by members and friends of the\hich\af4\dbch\af31505\loch\f4 
 class and by members and friends of derived classes. Public members are accessible by everyone. 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q8. What is the difference between non-virtual and virtual functions? 
\par \hich\af4\dbch\af31505\loch\f4 A8. The behavior of a non-virtual function is known at compile time while the behavior\hich\af4\dbch\af31505\loch\f4  of a virtual function is not known until the run time. 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q9. What is a pure virtual function? 
\par \hich\af4\dbch\af31505\loch\f4 A9. It is a member function without implementation. }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid11607506 \hich\af4\dbch\af31505\loch\f4 It can have definition to use by derived class}{\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4  overridden}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid11607506 \hich\af4\dbch\af31505\loch\f4  inherited functions}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 

\par 
\par \hich\af4\dbch\af31505\loch\f4 Q10. What is an abstract base\hich\af4\dbch\af31505\loch\f4  class? 
\par \hich\af4\dbch\af31505\loch\f4 A10. It is a class that has one or more pure virtual functions. 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q11. What is the difference between MyClass p; and MyClass p();? 
\par \hich\af4\dbch\af31505\loch\f4 A11. MyClass p; creates an instance of class MyClass by calling a constructor for MyClass. MyClass p(); declares fu\hich\af4\dbch\af31505\loch\f4 
nction p which takes no parameters and returns an object of class MyClass by value. 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q12. How do you know that your class needs a virtual destructor? 
\par \hich\af4\dbch\af31505\loch\f4 A12. If your class has at least one virtual function, you should make a destructor for this class virtua\hich\af4\dbch\af31505\loch\f4 
l. This will allow you to delete a dynamic object through a pointer to a base class object. If the destructor is non-virtual, then wrong destructor will be invoked during deletion of the dynamic object. 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q13. Why were the templates introduced? 
\par \hich\af4\dbch\af31505\loch\f4 A13. Many \hich\af4\dbch\af31505\loch\f4 
data structures and algorithms can be defined independently of the type of data they work with. You can increase the amount of shared code by separating data-dependent portions from data-independent portions, and templates were introduced to help you do t
\hich\af4\dbch\af31505\loch\f4 h\hich\af4\dbch\af31505\loch\f4 at. 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q14. What is a static member of a class? 
\par \hich\af4\dbch\af31505\loch\f4 A14. Static data members exist once for the entire class, as opposed to non-static data members, which exist individually in each instance of a class. 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q15. What feature of C++ would you use if you wanted to\hich\af4\dbch\af31505\loch\f4 \hich\f4  design a member function that guarantees to leave "this\'d3\loch\f4  object unchanged? 
\par \hich\af4\dbch\af31505\loch\f4 A15. It is "const" as in: "int MyFunc (int test) const;" 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q16. Can you overload a function based only on whether a parameter is a value or a reference? 
\par \hich\af4\dbch\af31505\loch\f4 A16. No. Passing by value\hich\af4\dbch\af31505\loch\f4  and by reference looks identical to the caller. 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q17. What is the difference between function overloading and function overriding? 
\par \hich\af4\dbch\af31505\loch\f4 A17. Overloading is a method that allows defining multiple member functions with the same name but different signatures. T\hich\af4\dbch\af31505\loch\f4 
he compiler will pick the correct function based on the signature. Overriding is a method that allows the derived class to redefine the behavior of member functions which the derived class inherits from a base class. The signatures of both base class memb
\hich\af4\dbch\af31505\loch\f4 e\hich\af4\dbch\af31505\loch\f4 r function and derived class member function are the same; however, the implementation and, therefore, the behavior will differ. 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q18. Can derived class override some but not all of a set of overloaded virtual member functions inherited from the base clas\hich\af4\dbch\af31505\loch\f4 s? 
\par \hich\af4\dbch\af31505\loch\f4 A18. Compiler will allow this, but it is a bad practice since overridden member functions will hide all of the inherited overloads from the base class. You should really override all of them. 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q19. What is the difference between assignment and initial\hich\af4\dbch\af31505\loch\f4 ization in C++? 
\par \hich\af4\dbch\af31505\loch\f4 A19. Assignment changes the value of the object that has already been constructed. Initialization constructs a new object and gives it a value at the same time. 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q20. When is  copy constructors called? 
\par \hich\af4\dbch\af31505\loch\f4 A20. Copy constructors are called i\hich\af4\dbch\af31505\loch\f4 
n three cases: when a function returns an object of that class by value, when the object of that class is passed by value as an argument to a function, and, finally, when you construct an object based on another object of the same class (Circle c1=c2;). 

\par 
\par \hich\af4\dbch\af31505\loch\f4 Q21. Why do you have to provide your own copy constructor and assignment operator for classes with dynamically allocated memory? 
\par \hich\af4\dbch\af31505\loch\f4 A21. If you don't, the compiler will supply and execute the default constructor and the assignment operator, but they will not\hich\af4\dbch\af31505\loch\f4 
 do the job correctly. The default assignment operator does member wise assignment and the default copy constructor does member wise copy. In both cases you will only assign and manipulate pointers to dynamic memory, which will lead to memory leaks and ot
\hich\af4\dbch\af31505\loch\f4 h\hich\af4\dbch\af31505\loch\f4 er abnormalities. You should write your own assignment operator and copy constructor, which would copy the pointer to memory so that each object has its own copy. 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q22. Does compiler guarantee that initializers will be executed in the same order as they a\hich\af4\dbch\af31505\loch\f4 ppear on the initialization list? 
\par \hich\af4\dbch\af31505\loch\f4 A22. No. C++ guarantees that base class sub objects and member objects will be destroyed in the opposite order from which they were constructed. This means that initializers are executed in the order, which supports the a
\hich\af4\dbch\af31505\loch\f4 bove-mentioned guarantee. 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q23. What is function's signature? 
\par \hich\af4\dbch\af31505\loch\f4 A23. Function's signature is its name plus the number and types of the parameters it accepts.
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q24. What does extern "C" int func(int *, Foo) accomplish? 
\par \hich\af4\dbch\af31505\loch\f4 A24. It will turn off "name mangling"\hich\af4\dbch\af31505\loch\f4  for this function so that one can link to code compiled by C compiler. 
\par \hich\af4\dbch\af31505\loch\f4 [Whenever you compile code on C++ compiler which was already compiled on C compiler then it raises error of Name Mangling, above style is solution for that error.]
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q25. Why do C++ co\hich\af4\dbch\af31505\loch\f4 mpilers need name mangling? 
\par \hich\af4\dbch\af31505\loch\f4 
A25. Name mangling is the rule according to which C++ changes function's name into function signature before passing that function to a linker. This is how the linker differentiates between different functions with the same nam
\hich\af4\dbch\af31505\loch\f4 e. 
\par 
\par \hich\af4\dbch\af31505\loch\f4 \hich\f4 ** Then how it clears the name mangling problem with extern \'93\loch\f4 \hich\f4 C\'94
\par \hich\af4\dbch\af31505\loch\f4 \hich\f4 --It just turn off  \'93\loch\f4 \hich\f4 Name mangling\'94\loch\f4  for this function.
\par 
\par \hich\af4\dbch\af31505\loch\f4 ? Then how it differentiate between different function with same name.
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q26. What is the difference between a pointer and a referen\hich\af4\dbch\af31505\loch\f4 ce? 
\par \hich\af4\dbch\af31505\loch\f4 
A26. A reference must always refer to some object and, therefore, must always be initialized; pointers do not have such restrictions. A pointer can be reassigned to point to different objects while a reference always refers to an object with which it 
\hich\af4\dbch\af31505\loch\f4 was initialized.
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q27. How can you access the static member of a class? 
\par \hich\af4\dbch\af31505\loch\f4 A27. <ClassName>::<StaticMemberName>. 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q28. How are prefix and postfix versions of operator++() differentiated? 
\par \hich\af4\dbch\af31505\loch\f4 A28. The postfix version of operator++() has a dummy parameter of typ\hich\af4\dbch\af31505\loch\f4 e int. The prefix version does not have dummy parameter. 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q29. What functions does C++ silently write and call? 
\par \hich\af4\dbch\af31505\loch\f4 A29. Constructors, destructors, copy constructors, assignment operators, and address-of operators. 
\par }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid593569 
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0\itap0\pararsid593569 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid593569 
\hich\af4\dbch\af31505\loch\f4 When assignment operators, and address-of\hich\af4\dbch\af31505\loch\f4  operators get invoked ? 
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid593569 
\par }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\par \hich\af4\dbch\af31505\loch\f4 Q30. What is the difference between new/delete and malloc/free?
\par \hich\af4\dbch\af31505\loch\f4 A30. Malloc/free do not know about constructors and destructors. New and delete create and destroy objects, while malloc and free allocate and deallocate memory. 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q31. What is the difference between delete and delete[ ]? 
\par \hich\af4\dbch\af31505\loch\f4 A31. Delete deletes one object; delete[ ] deletes an array of objects. 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q32. Name two cases where you MUST use initialization list as opposed to assignment in constructors. 
\par \hich\af4\dbch\af31505\loch\f4 A32. Both non-static c\hich\af4\dbch\af31505\loch\f4 onst data members and reference data members cannot be assigned values; instead, you should use initialization list to initialize them. 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q33. What is the difference between const char *myPointer and char *const myPointer? 
\par \hich\af4\dbch\af31505\loch\f4 A33. Const char *myPointer is a \hich\af4\dbch\af31505\loch\f4 non constant pointer to constant data; while char *const myPointer is a constant pointer to non constant data. 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q34. Suppose that objects A, B, and C are instances of class MyClass (MyClass A, B, C;). How should you design an assignment operator so that t\hich\af4\dbch\af31505\loch\f4 
he "A=B=C;" statement would be allowed by a compiler but "(A=B)=C;" would not be allowed by a compiler? 
\par \hich\af4\dbch\af31505\loch\f4 A34. Make operator=return a reference to a const object. 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q35. Is there any problem with the following: char *a=NULL; char& p = *a;? 
\par \hich\af4\dbch\af31505\loch\f4 A35. The result \hich\af4\dbch\af31505\loch\f4 is undefined. You should never do this. A reference must always refer to some object. 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q36. Class B is derived from class A. Function f is A's friend. Is f B's friend as well? 
\par \hich\af4\dbch\af31505\loch\f4 A36. No. Friendship cannot be inherited.
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q37. What issue do auto_ptr objects \hich\af4\dbch\af31505\loch\f4 address? 
\par \hich\af4\dbch\af31505\loch\f4 A37. If you use auto_ptr objects you would not have to be concerned with heap objects not being deleted even if the exception is thrown. auto_ptr is a smart pointer class template.
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q38. What happens when a function throws an exception that was n\hich\af4\dbch\af31505\loch\f4 ot specified by an exception specification for this function? 
\par \hich\af4\dbch\af31505\loch\f4 A38. Unexpected() is called, which, by default, will eventually trigger abort(). 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q39. Why should you prefer throw/catch mechanism to setjmp/longjmp? 
\par \hich\af4\dbch\af31505\loch\f4 A39. The main problem with longjmp() is t\hich\af4\dbch\af31505\loch\f4 hat it does not destroy local objects properly. 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q40. Can you think of a situation where your program would crash without reaching the breakpoint which you set at the beginning of main()?
\par \hich\af4\dbch\af31505\loch\f4 A40. C++ allows for dynamic initialization of global variables befo\hich\af4\dbch\af31505\loch\f4 
re main() is invoked. It is possible that initialization of global will invoke some function. If this function crashes the crash will occur before main() is entered. 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q41. cout/cin are object which class ?
\par \hich\af4\dbch\af31505\loch\f4 A41. cout is object of ostream_withassign and cin\hich\af4\dbch\af31505\loch\f4  is object of istream_withassign.
\par \hich\af4\dbch\af31505\loch\f4 [ios -> istream/ostream -> ostream_withassign/ istream_withassign]
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q42. What is void *
\par \hich\af4\dbch\af31505\loch\f4 A42.  In C and C++, any time you need a void pointer, you can use another pointer type. For example, if you have 
\par \hich\af4\dbch\af31505\loch\f4 a char*, you can pas\hich\af4\dbch\af31505\loch\f4 s it to a function that expects a void*. You don\hich\f4 \rquote \loch\f4 t even need to cast it. In C (but not 
\par \hich\af4\dbch\af31505\loch\f4 in C++), you can use a void* any time you need any kind of pointer, without casting. (In C++, you need to 
\par \hich\af4\dbch\af31505\loch\f4 cast it). 
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q43. What is callback function
\par \hich\af4\dbch\af31505\loch\f4 A43. The simple a\hich\af4\dbch\af31505\loch\f4 
nswer to this first question is that a callback function is a function that is called through a function pointer. If you pass the pointer (address) of a function as an argument to another, when that pointer is used to call the function it points to it is 
\hich\af4\dbch\af31505\loch\f4 s\hich\af4\dbch\af31505\loch\f4 aid that a call back is made.
\par 
\par \hich\af4\dbch\af31505\loch\f4 \hich\f4 
Q44.This one could be easily become one of the  HYPERLINK "http://www.dev102.com/tag/job-interview/" Job Interview Questions we publish here at  HYPERLINK "http://www.dev102.com/" Dev102.com, but I decided to write a \'93\loch\f4 regular
\loch\af4\dbch\af31505\hich\f4 \'94\loch\f4  post about this issue because it is an important concept and not a just a puzzle or a brain teaser. Take a look at the following code, can you tell what will the output be?
\par \hich\af4\dbch\af31505\loch\f4 public class BaseType
\par \hich\af4\dbch\af31505\loch\f4  \{
\par \hich\af4\dbch\af31505\loch\f4      public BaseType()
\par \hich\af4\dbch\af31505\loch\f4      \{
\par \hich\af4\dbch\af31505\loch\f4          Console.WriteLine\hich\af4\dbch\af31505\loch\f4 ("Call base ctor.");
\par \hich\af4\dbch\af31505\loch\f4          DoSomething();
\par \hich\af4\dbch\af31505\loch\f4      \}
\par 
\par \hich\af4\dbch\af31505\loch\f4      public virtual void DoSomething()
\par \hich\af4\dbch\af31505\loch\f4      \{
\par \hich\af4\dbch\af31505\loch\f4          Console.WriteLine("Base DoSomething");
\par \hich\af4\dbch\af31505\loch\f4      \}
\par \hich\af4\dbch\af31505\loch\f4  \}
\par 
\par \hich\af4\dbch\af31505\loch\f4  public class DerivedType : BaseType
\par \hich\af4\dbch\af31505\loch\f4  \{
\par \hich\af4\dbch\af31505\loch\f4      public DerivedType()
\par \hich\af4\dbch\af31505\loch\f4      \{
\par \hich\af4\dbch\af31505\loch\f4          Console.WriteLin\hich\af4\dbch\af31505\loch\f4 e("Call derived ctor.");
\par \hich\af4\dbch\af31505\loch\f4      \}
\par 
\par \hich\af4\dbch\af31505\loch\f4      public override void DoSomething()
\par \hich\af4\dbch\af31505\loch\f4      \{
\par \hich\af4\dbch\af31505\loch\f4          Console.WriteLine("Derived DoSomething");
\par \hich\af4\dbch\af31505\loch\f4      \}
\par \hich\af4\dbch\af31505\loch\f4  \}
\par 
\par \hich\af4\dbch\af31505\loch\f4  public class MainClass
\par \hich\af4\dbch\af31505\loch\f4  \{
\par \hich\af4\dbch\af31505\loch\f4      public static void Main()
\par \hich\af4\dbch\af31505\loch\f4      \{
\par \hich\af4\dbch\af31505\loch\f4          DerivedType derived = new DerivedType();
\par \hich\af4\dbch\af31505\loch\f4          Console.ReadLine();
\par \hich\af4\dbch\af31505\loch\f4      \}
\par \hich\af4\dbch\af31505\loch\f4  \}
\par \hich\af4\dbch\af31505\loch\f4 The output of this program is:
\par \hich\af4\dbch\af31505\loch\f4 Call base ctor.
\par \hich\af4\dbch\af31505\loch\f4 Derived DoSomething
\par \hich\af4\dbch\af31505\loch\f4 Call derived ctor.
\par \hich\af4\dbch\af31505\loch\f4 \hich\f4 Can you see the problem here? There is something very wrong and dangerous in this code\'85\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 Explanation: When constructing the derive\hich\af4\dbch\af31505\loch\f4 
d class, the base class is constructed first. If you call a virtual method from the base class constructor, the overridden method is called. But notice that when that overridden method is called, the derived class is not initialized because its constructo
\hich\af4\dbch\af31505\loch\f4 r\hich\af4\dbch\af31505\loch\f4 \hich\f4  code was not executed yet. So, we are calling a method of an un-initialized instance\'85\loch\f4 \hich\f4  This is the explanation from MSDN: \'93\loch\f4 
When a virtual method is called, the actual type that executes the method is not selected until run time. When a constructor calls a\hich\af4\dbch\af31505\loch\f4  \hich\af4\dbch\af31505\loch\f4 \hich\f4 
virtual method, it is possible that the constructor for the instance that invokes the method has not executed\'93.
\par \hich\af4\dbch\af31505\loch\f4 Be aware of this matter because it is not a trivial issue and apparently, there are no errors or warnings generated by the compiler. So, the rul\hich\af4\dbch\af31505\loch\f4 
e to remember is to never call virtual methods from constructors. Now, go and check your code, is there a possibility that you violated this rule?
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q45. Consider the Differences Between the 32-bit and 64-bit Data Models
\par \hich\af4\dbch\af31505\loch\f4 The biggest difference between the 3\hich\af4\dbch\af31505\loch\f4 
2-bit and the 64-bit compilation environments is the change in data-type models. The C data-type model for 32-bit applications is the ILP32 model, so named because the int and long types, and pointers, are 32-bit data types. The data-type model for 64-bit
\hich\af4\dbch\af31505\loch\f4  \hich\af4\dbch\af31505\loch\f4 applications is the LP64 data model, so named because long and pointer types grow to 64 bits. The remaining C integer types and the floating-point types are the same in both data-type models. 

\par \hich\af4\dbch\af31505\loch\f4 It is not unusual for current 32-bit applications to assume tha\hich\af4\dbch\af31505\loch\f4 
t the int type, long type, and pointers are the same size. Because the size of long and pointer change in the LP64 data model, this change alone is the principal cause of ILP32-to-LP64 conversion problems. 
\par \hich\af4\dbch\af31505\loch\f4 ? What problem 32 bit to 64 bit porting can cause\hich\af4\dbch\af31505\loch\f4  
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q46.  HYPERLINK "http://stackoverflow.com/questions/399003/is-the-sizeofsome-pointer-always-equal-to-four" Is the sizeof(some pointer) always equal to four?
\par \hich\af4\dbch\af31505\loch\f4 In practice, pointers will be size 2 on a 16-bit system (if you can find one), 4 on a 32-bit sys\hich\af4\dbch\af31505\loch\f4 tem, and 8 on a 64-bit system, but there's nothing to be gained in relying on a given size.

\par 
\par \hich\af4\dbch\af31505\loch\f4 Q47. Given only a pointer to a node to be deleted in a singly linked list, how do you delete it?
\par \hich\af4\dbch\af31505\loch\f4 The solution to this is to copy the data from the next node into t\hich\af4\dbch\af31505\loch\f4 
his node and delete the next node!. Ofcourse this wont work if the node to be deleted is the last node. Mark it as dummy in that case.
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q.48 Difference between Dynamic Array & Linked List
\par \hich\af4\dbch\af31505\loch\f4 Ans : - 
\par \hich\af4\dbch\af31505\loch\f4 [Insertion & Deletion] At Linked list insertion of an eleme\hich\af4\dbch\af31505\loch\f4 
nt at a specific point of a list is a constant-time operation, whereas insertion in a dynamic array at random locations will require moving half of the elements on average, and all the elements in the worst case. While one can "delete" an element from an 
\hich\af4\dbch\af31505\loch\f4 a\hich\af4\dbch\af31505\loch\f4 rray in constant time by somehow marking its slot as "vacant", this causes fragmentation that impedes the performance of iteration.
\par \hich\af4\dbch\af31505\loch\f4 [Access] On the other hand, dynamic arrays "Array data structure" allow constant-time "Random access", while linked lists al\hich\af4\dbch\af31505\loch\f4 low only "Sequential access" to elements.
\par \hich\af4\dbch\af31505\loch\f4 [Extra storage for references] Another disadvantage of linked lists is the extra storage needed for references, which often makes them impractical for lists of small data items such as characters or boolean values,
\hich\af4\dbch\af31505\loch\f4  because the storage overhead for the links may exceed by a factor of two or more the size of the data. In contrast, a dynamic array requires only the space for the data itself
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q.49 Types of linked list: 
\par \hich\af4\dbch\af31505\loch\f4 There are different kinds of linked lists they are\hich\af4\dbch\af31505\loch\f4  
\par 
\par \hich\af4\dbch\af31505\loch\f4 Linear singly linked list 
\par \hich\af4\dbch\af31505\loch\f4 Singly linked lists contain nodes which have a data field as well as a next field, which points to the next node in line.
\par 
\par \hich\af4\dbch\af31505\loch\f4 Circular singly linked list 
\par \hich\af4\dbch\af31505\loch\f4 In the last node of a list, the link field often contains a null reference\hich\af4\dbch\af31505\loch\f4 
, a special value used to indicate the lack of further nodes. A less common convention is to make it point to the first node of the list; in that case the list is said to be circular or circularly linked; otherwise it is said to be open or linear.
\par 
\par \hich\af4\dbch\af31505\loch\f4 Two way\hich\af4\dbch\af31505\loch\f4  or doubly linked list 
\par \hich\af4\dbch\af31505\loch\f4 In a doubly linked list, each node contains, besides the next-node link, a second link field pointing to the previous node in the sequence. The two links may be called forward(s) and backwards, or next and prev(ious).
\par 
\par \hich\af4\dbch\af31505\loch\f4 Circular doub\hich\af4\dbch\af31505\loch\f4 ly linked list. 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Sentinel nodes
\par \hich\af4\dbch\af31505\loch\f4 In some implementations, an extra sentinel or dummy node may be added before the first data record and/or after the last one. This convention simplifies and accelerates some list-handling algorithms, by ensuring that all li
\hich\af4\dbch\af31505\loch\f4 nks can be safely dereferenced and that every list (even one that contains no data elements) always has a "first" and "last" node.
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q.50 Applications of linked lists: 
\par \hich\af4\dbch\af31505\loch\f4 Linked lists concepts are useful to model many different abstract data types such as que\hich\af4\dbch\af31505\loch\f4 
ues stacks and trees. If we restrict the process of insertions to one end of the list and deletions to the other mode of a queue that is we can insert an item at the rear end and remove an item at the front end obeying the discipline first in first out. I
\hich\af4\dbch\af31505\loch\f4 f\hich\af4\dbch\af31505\loch\f4 
 we restrict the insertions and deletions to occur only at one end of list the beginning then the model is called stacks. Stacks are all inherently one-dimensional. A tree represents a two dimension linked list. Trees are frequently encounters in every da
\hich\af4\dbch\af31505\loch\f4 y\hich\af4\dbch\af31505\loch\f4  life one example are organization chart and the other is sports tournament chart.
\par 
\par \hich\af4\dbch\af31505\loch\f4 ? Example program of Two Dimensional Linked List
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q.51Declare constant member of a class
\par 
\par }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid11223516 
\par }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Class MyClass 
\par \{}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \~\hich\af4\dbch\af31505\loch\f4  \~ \~ \~ }{\rtlch\fcs1 
\af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid11223516 
\par \tab }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 private :}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 
\af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \~\hich\af4\dbch\af31505\loch\f4  \~ \~ \~ \~ \~ }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid11223516 
\par \tab \tab }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 const int m_nMaxWheels;}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}
{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \~\hich\af4\dbch\af31505\loch\f4  \~ \~\hich\af4\dbch\af31505\loch\f4  \~ }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid11223516 
\par \tab }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 public :}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 
\af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \~\hich\af4\dbch\af31505\loch\f4  \~ \~ \~ \~ \~ }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid11223516 
\par \tab \tab }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 MyClass(int maxWheels) : m_nMaxWheels(maxWheels) \{\}}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 
\loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid11223516 
\par }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \}\hich\af4\dbch\af31505\loch\f4 ;
\par }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid11223516 
\par }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 MyClass myClass(4);
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q.52 What is an abstract class, and when should it be used?
\par \hich\af4\dbch\af31505\loch\f4 Abstract classes are classes that contain one or more abstract methods. An abstract metho\hich\af4\dbch\af31505\loch\f4 
d is a method that is declared, but contains no implementation. Abstract classes may not be instantiated, and require subclasses to provide implementations for the abstract methods. Let's look at an example of an abstract class, and an abstract method.

\par \hich\af4\dbch\af31505\loch\f4 Sup\hich\af4\dbch\af31505\loch\f4 
pose we were modeling the behavior of animals, by creating a class hierachy that started with a base class called Animal. Animals are capable of doing different things like flying, digging and walking, but there are some common operations as well like eat
\hich\af4\dbch\af31505\loch\f4 i\hich\af4\dbch\af31505\loch\f4 
ng and sleeping. Some common operations are performed by all animals, but in a different way as well. When an operation is performed in a different way, it is a good candidate for an abstract method (forcing subclasses to provide a custom implementation).
\hich\af4\dbch\af31505\loch\f4  \hich\af4\dbch\af31505\loch\f4 Let's look at a very primitive Animal base class, which defines an abstract method for making a sound (such as a dog barking, a cow mooing, or a pig oinking).\~
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q.53 Inlining Virtual Member Functions
\par \hich\af4\dbch\af31505\loch\f4 Generally, compilers can't inline a virtual function cal\hich\af4\dbch\af31505\loch\f4 
l if the it's resolved dynamically. Therefore, declaring a virtual member function inline might seem pointless. However, not every call of a virtual function is resolved dynamically; in some cases, the compiler can resolve the call statically, as if the f
\hich\af4\dbch\af31505\loch\f4 u\hich\af4\dbch\af31505\loch\f4 nction weren't virtual. In situations like these, the compiler can also inline the call. For example: 
\par \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4   class Base
\par \hich\af4\dbch\af31505\loch\f4   \{
\par \hich\af4\dbch\af31505\loch\f4   public:
\par \hich\af4\dbch\af31505\loch\f4     inline virtual int f() \{ return 0; \}
\par \hich\af4\dbch\af31505\loch\f4   \};
\par 
\par \hich\af4\dbch\af31505\loch\f4   int main()
\par \hich\af4\dbch\af31505\loch\f4   \{
\par \hich\af4\dbch\af31505\loch\f4     Base b;
\par \hich\af4\dbch\af31505\loch\f4     b.f(); // resolved statically; call can be i\hich\af4\dbch\af31505\loch\f4 nlined
\par \hich\af4\dbch\af31505\loch\f4   \}
\par \hich\af4\dbch\af31505\loch\f4 The invocation of f() is resolved statically because b is not a pointer or a reference. The compiler can also expand the call inline, thereby optimizing the code even further. 
\par \hich\af4\dbch\af31505\loch\f4 Inline functions expands at compile time and virtual functions works\hich\af4\dbch\af31505\loch\f4 
 at run time, so even if a virtual function declared inline, then compiler may expand it but actual call to that function is not confirm until it goes to linker i.e. at runtime.
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q.54 Pointer Arithmetic
\par \hich\af4\dbch\af31505\loch\f4 You can perform a limited number of arithmetic operat\hich\af4\dbch\af31505\loch\f4 ions on pointers. These operations are: 
\par \hich\af4\dbch\af31505\loch\f4 Increment and decrement 
\par \hich\af4\dbch\af31505\loch\f4 Addition and subtraction 
\par \hich\af4\dbch\af31505\loch\f4 Comparison 
\par \hich\af4\dbch\af31505\loch\f4 Assignment 
\par \hich\af4\dbch\af31505\loch\f4 The increment (++) operator increases the value of a pointer by the size of the data object the pointer refers to. For example, if the point\hich\af4\dbch\af31505\loch\f4 
er refers to the second element in an array, the ++ makes the pointer refer to the third element in the array. 
\par \hich\af4\dbch\af31505\loch\f4 The decrement (--) operator decreases the value of a pointer by the size of the data object the pointer refers to. For example, if the pointer r\hich\af4\dbch\af31505\loch\f4 
efers to the second element in an array, the -- makes the pointer refer to the first element in the array. 
\par \hich\af4\dbch\af31505\loch\f4 You can add an integer to a pointer but you cannot add a pointer to a pointer. 
\par \hich\af4\dbch\af31505\loch\f4 If the pointer p points to the first element in an array, the follow\hich\af4\dbch\af31505\loch\f4 ing expression causes the pointer to point to the third element in the same array: 
\par \hich\af4\dbch\af31505\loch\f4 p = p + 2;
\par \hich\af4\dbch\af31505\loch\f4 If you have two pointers that point to the same array, you can subtract one pointer from the other. This operation yields the number of elements in the array tha\hich\af4\dbch\af31505\loch\f4 
t separate the two addresses that the pointers refer to. 
\par \hich\af4\dbch\af31505\loch\f4 You can compare two pointers with the following operators: ==, !=, <, >, <=, and\~>=. 
\par \hich\af4\dbch\af31505\loch\f4 Pointer comparisons are defined only when the pointers point to elements of the same array. Pointer comparisons \hich\af4\dbch\af31505\loch\f4 
using the == and != operators can be performed even when the pointers point to elements of different arrays. 
\par \hich\af4\dbch\af31505\loch\f4 You can assign to a pointer the address of a data object, the value of another compatible pointer or the NULL pointer. 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q.55 The previous answer \hich\af4\dbch\af31505\loch\f4 gives the Binary output backwards.\~\~Here is a function for converting to Binary properly: }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 void convertToBinary() }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid13917015 
\par }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \{\hich\af4\dbch\af31505\loch\f4  }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \~\~\~}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid13917015 
\par \tab }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 int num; }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 
\af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \~\~\~}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid13917015 
\par \tab }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 int binary = 0; }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{
\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \~\~\~}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid13917015 
\par \tab }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 int place = 0; }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 
\af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \~\~\~}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid13917015 
\par \tab }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 printf("Converting to Binary\\n"); }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 
\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \~\~}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid13917015 
\par \tab }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 printf("Enter an integer: "); }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232
\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \~\~\~}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid13917015 
\par \tab }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 scanf("%d", &num); }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{
\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \~\~\~}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid13917015 
\par \tab }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 while (num != 0) }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{
\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \~\~\~}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid13917015 
\par \tab }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \{\hich\af4\dbch\af31505\loch\f4  }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \~\~\~\~\~\~}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid13917015 
\par \tab \tab }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 binary = binary + (num%2 * pow(10, place++)); 
\par \~\~\~\~\~\~}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid13917015 \tab \tab }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 num = num /2; }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \~\~\~}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid13917015 
\par \tab }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \}\hich\af4\dbch\af31505\loch\f4  }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \~\~\~}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid13917015 
\par \tab }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 printf("The equivalent binary is %d\\n", binary); }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 
\loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid13917015 
\par }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \}
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q.56 Multiple Inheritance 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Deriving directly from more th\hich\af4\dbch\af31505\loch\f4 
an one class is usually called multiple inheritance. Since it's widely believed that this concept complicates the design and debuggers can have a hard time with it, multiple inheritance can be a controversial topic. However, multiple inheritance is an imp
\hich\af4\dbch\af31505\loch\f4 o\hich\af4\dbch\af31505\loch\f4 rtant feature in C++ and C++ programmers think of it as a very good structuring tool.
\par 
\par \hich\af4\dbch\af31505\loch\f4 Pitfalls
\par 
\par \hich\af4\dbch\af31505\loch\f4 The most difficult to avoid complication that arises when using multiple inheritance is that sometimes the programmers interested in using this technique to ex\hich\af4\dbch\af31505\loch\f4 
tend the existing code are forced to learn some of the implementation's details. The second trivial problem that might appear when using this technique is the creation of ambiguities:
\par 
\par \hich\af4\dbch\af31505\loch\f4 class A \{ virtual void f(); \};
\par \hich\af4\dbch\af31505\loch\f4 class B \{ virtual void f(); \};
\par \hich\af4\dbch\af31505\loch\f4 class C :\hich\af4\dbch\af31505\loch\f4  public A ,public B \{ void f(); \};
\par 
\par \hich\af4\dbch\af31505\loch\f4 This issue can be solved by using explicit qualification. We explicitly say to the compiler where to get the function that we need to call:
\par \hich\af4\dbch\af31505\loch\f4 C* pc = new C;
\par \hich\af4\dbch\af31505\loch\f4 pc->f();
\par \hich\af4\dbch\af31505\loch\f4 pc->A::f(); //this calls f() from class A
\par \hich\af4\dbch\af31505\loch\f4 pc->B::f(); //\hich\af4\dbch\af31505\loch\f4 this calls f() from class B
\par 
\par \hich\af4\dbch\af31505\loch\f4 Each base class can be uniquely identified by using the scope resolution operator :: .
\par 
\par \hich\af4\dbch\af31505\loch\f4 If the C class didn't have the method f() the problem couldn't have been solved with explicit qualification. Instead we would have used imp\hich\af4\dbch\af31505\loch\f4 licit conversion :
\par 
\par \hich\af4\dbch\af31505\loch\f4 A* pa = pc;
\par \hich\af4\dbch\af31505\loch\f4 pa->f();
\par 
\par \hich\af4\dbch\af31505\loch\f4 or we would have to make a cast in order to call the method from the parent class A.
\par 
\par \hich\af4\dbch\af31505\loch\f4 57. What is Use cases
\par \hich\af4\dbch\af31505\loch\f4 In software and systems engineering, a use case is a list of steps, typically defining interactions betwee\hich\af4\dbch\af31505\loch\f4 n a role and a system, to achieve a goal.
\par 
\par \hich\af4\dbch\af31505\loch\f4 UML Building Blocks :
\par \ltrrow}\trowd \irow0\irowband0\lastrow \ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalt\clbrdrt\brdrs\brdrw20\brdrcf17 \clbrdrl\brdrs\brdrw20\brdrcf17 \clbrdrb\brdrs\brdrw20\brdrcf17 
\clbrdrr\brdrs\brdrw20\brdrcf17 \cltxlrtb\clftsWidth3\clwWidth8748\clshdrawnil \cellx8640\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {
\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 This chapter describes all the UML building blocks. The building blocks of UML can be defined as:
\par \hich\af4\dbch\af31505\loch\f4 Things
\par \hich\af4\dbch\af31505\loch\f4 Relationships
\par \hich\af4\dbch\af31505\loch\f4 Diagrams
\par \hich\af4\dbch\af31505\loch\f4 (1) Things:
\par \hich\af4\dbch\af31505\loch\f4 Things are the most important building blocks of UM\hich\af4\dbch\af31505\loch\f4 L. Things can be:
\par \hich\af4\dbch\af31505\loch\f4 Structural
\par \hich\af4\dbch\af31505\loch\f4 Behavioral
\par \hich\af4\dbch\af31505\loch\f4 Grouping
\par \hich\af4\dbch\af31505\loch\f4 Annotational
\par \hich\af4\dbch\af31505\loch\f4 Structural things:
\par \hich\af4\dbch\af31505\loch\f4 The Structural things define the static part of the model. They represent physical and conceptual elements. Following are the brief descriptions of the structural things.
\par \hich\af4\dbch\af31505\loch\f4 Clas\hich\af4\dbch\af31505\loch\f4 s:
\par \hich\af4\dbch\af31505\loch\f4 Class represents set of objects having similar responsibilities.
\par 
\par \hich\af4\dbch\af31505\loch\f4 Interface:
\par \hich\af4\dbch\af31505\loch\f4 Interface defines a set of operations which specify the responsibility of a class.
\par 
\par \hich\af4\dbch\af31505\loch\f4 Collaboration:
\par \hich\af4\dbch\af31505\loch\f4 Collaboration defines interaction between elements.
\par 
\par \hich\af4\dbch\af31505\loch\f4 Use case:
\par \hich\af4\dbch\af31505\loch\f4 Use case repre\hich\af4\dbch\af31505\loch\f4 sents a set of actions performed by a system for a specific goal.
\par 
\par \hich\af4\dbch\af31505\loch\f4 Component:
\par \hich\af4\dbch\af31505\loch\f4 Component describes physical part of a system.
\par 
\par \hich\af4\dbch\af31505\loch\f4 Node:
\par \hich\af4\dbch\af31505\loch\f4 A node can be defined as a physical element that exists at run time.
\par 
\par \hich\af4\dbch\af31505\loch\f4 Behavioral things:
\par \hich\af4\dbch\af31505\loch\f4 A behavioral thing consists of the \hich\af4\dbch\af31505\loch\f4 dynamic parts of UML models. Following are the behavioral things:
\par \hich\af4\dbch\af31505\loch\f4 Interaction:
\par \hich\af4\dbch\af31505\loch\f4 Interaction is defined as a behavior that consists of a group of messages exchanged among elements to accomplish a specific task.
\par 
\par \hich\af4\dbch\af31505\loch\f4 State machine:
\par \hich\af4\dbch\af31505\loch\f4 State machine is useful when th\hich\af4\dbch\af31505\loch\f4 
e state of an object in its life cycle is important. It defines the sequence of states an object goes through in response to events. Events are external factors responsible for state change.
\par 
\par \hich\af4\dbch\af31505\loch\f4 Grouping things:
\par \hich\af4\dbch\af31505\loch\f4 Grouping things can be defined as a mechanism t\hich\af4\dbch\af31505\loch\f4 o group elements of a UML model together. There is only one grouping thing available:
\par \hich\af4\dbch\af31505\loch\f4 Package:
\par \hich\af4\dbch\af31505\loch\f4 Package is the only one grouping thing available for gathering structural and behavioral things.
\par 
\par \hich\af4\dbch\af31505\loch\f4 Annotational things:
\par \hich\af4\dbch\af31505\loch\f4 Annotational things can be defined as a me\hich\af4\dbch\af31505\loch\f4 chanism to capture remarks, descriptions, and comments of UML model elements. Note is the only one Annotational thing available.
\par \hich\af4\dbch\af31505\loch\f4 Note:
\par \hich\af4\dbch\af31505\loch\f4 A note is used to render comments, constraints etc of an UML element.
\par 
\par \hich\af4\dbch\af31505\loch\f4 (2) Relationship :
\par \hich\af4\dbch\af31505\loch\f4 Relationship is another most im\hich\af4\dbch\af31505\loch\f4 portant building block of UML. It shows how elements are associated with each other and this association describes the functionality of an application.
\par \hich\af4\dbch\af31505\loch\f4 There are four kinds of relationships available.
\par \hich\af4\dbch\af31505\loch\f4 Dependency:
\par \hich\af4\dbch\af31505\loch\f4 Dependency is a relationship between two th\hich\af4\dbch\af31505\loch\f4 ings in which change in one element also affects the other one.
\par 
\par \hich\af4\dbch\af31505\loch\f4 Association:
\par \hich\af4\dbch\af31505\loch\f4 Association is basically a set of links that connects elements of an UML model. It also describes how many objects are taking part in that relationship.
\par 
\par \hich\af4\dbch\af31505\loch\f4 Generalization:
\par \hich\af4\dbch\af31505\loch\f4 Generali\hich\af4\dbch\af31505\loch\f4 zation can be defined as a relationship which connects a specialized element with a generalized element. It basically describes inheritance relationship in the world of objects.
\par 
\par \hich\af4\dbch\af31505\loch\f4 Realization:
\par \hich\af4\dbch\af31505\loch\f4 Realization can be defined as a relationship in which two elemen\hich\af4\dbch\af31505\loch\f4 
ts are connected. One element describes some responsibility which is not implemented and the other one implements them. This relationship exists in case of interfaces.
\par 
\par \hich\af4\dbch\af31505\loch\f4 (3) UML Diagrams:
\par \hich\af4\dbch\af31505\loch\f4 UML diagrams are the ultimate output of the entire discussion. All th\hich\af4\dbch\af31505\loch\f4 e elements, relationships are used to make a complete UML diagram and the diagram represents a system.
\par \hich\af4\dbch\af31505\loch\f4 The visual effect of the UML diagram is the most important part of the entire process. All the other elements are used to make it a complete one.
\par \hich\af4\dbch\af31505\loch\f4 UML inc\hich\af4\dbch\af31505\loch\f4 ludes the following nine diagrams and the details are described in the following chapters.
\par \hich\af4\dbch\af31505\loch\f4 Class diagram
\par \hich\af4\dbch\af31505\loch\f4 Object diagram
\par \hich\af4\dbch\af31505\loch\f4 Use case diagram
\par \hich\af4\dbch\af31505\loch\f4 Sequence diagram
\par \hich\af4\dbch\af31505\loch\f4 Collaboration diagram
\par \hich\af4\dbch\af31505\loch\f4 Activity diagram
\par \hich\af4\dbch\af31505\loch\f4 Statechart diagram
\par \hich\af4\dbch\af31505\loch\f4 Deployment diagram
\par \hich\af4\dbch\af31505\loch\f4 Component diagram
\par \hich\af4\dbch\af31505\loch\f4 We woul\hich\af4\dbch\af31505\loch\f4 d discuss all these diagrams in subsequent chapters of this tutorial.\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow0\irowband0\lastrow \ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalt\clbrdrt\brdrs\brdrw20\brdrcf17 \clbrdrl\brdrs\brdrw20\brdrcf17 \clbrdrb\brdrs\brdrw20\brdrcf17 \clbrdrr\brdrs\brdrw20\brdrcf17 
\cltxlrtb\clftsWidth3\clwWidth8748\clshdrawnil \cellx8640\row }\pard \ltrpar\ql \li0\ri0\nowidctlpar\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 58. Friend function
\par \hich\af4\dbch\af31505\loch\f4 In object-oriented programming, a friend function that is a "friend" of a given class is allowed access to private and protected data in that class that it would not\hich\af4\dbch\af31505\loch\f4 
 normally be able to as if the data was public. [1] Normally, a function that is defined outside of a class cannot access such information.
\par \hich\af4\dbch\af31505\loch\f4 Friends should be used with caution. Too many functions or external classes declared as friends of a class with prot\hich\af4\dbch\af31505\loch\f4 
ected or private data may lessen the value of encapsulation of separate classes in object-oriented programming and may indicate a problem in the overall architecture design. Generally though, friend functions are a good thing for encapsulation, as you can
\hich\af4\dbch\af31505\loch\f4  \hich\af4\dbch\af31505\loch\f4 keep data of a class private from all except those who you explicitly state need it, but this does mean your classes will become tightly coupled.
\par 
\par \hich\af4\dbch\af31505\loch\f4 This approach may be used when a function needs to access private data in objects from two different classes.\hich\af4\dbch\af31505\loch\f4  This may be accomplished in two similar ways
\par \tab \bullet \tab \hich\af4\dbch\af31505\loch\f4 a function of global or namespace scope may be declared as friend of both classes
\par \tab \bullet \tab \hich\af4\dbch\af31505\loch\f4 a member function of one class may be declared as friend of another one.
\par 
\par \hich\af4\dbch\af31505\loch\f4 #include <iostream>
\par \hich\af4\dbch\af31505\loch\f4 using namespace std;
\par \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 class\hich\af4\dbch\af31505\loch\f4  Foo; // Forward declaration of class Foo in order for example to compile.
\par \hich\af4\dbch\af31505\loch\f4 class Bar \{
\par \hich\af4\dbch\af31505\loch\f4   private:
\par \hich\af4\dbch\af31505\loch\f4       int a;
\par \hich\af4\dbch\af31505\loch\f4   public:
\par \hich\af4\dbch\af31505\loch\f4       Bar(): a(0) \{\}
\par \hich\af4\dbch\af31505\loch\f4       void show(Bar& x, Foo& y);
\par \hich\af4\dbch\af31505\loch\f4       friend void ::show(Bar& x, Foo& y); // declaration of global friend
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 cl\hich\af4\dbch\af31505\loch\f4 ass Foo \{
\par \hich\af4\dbch\af31505\loch\f4   private:
\par \hich\af4\dbch\af31505\loch\f4       int b;
\par \hich\af4\dbch\af31505\loch\f4   public: 
\par \hich\af4\dbch\af31505\loch\f4       Foo(): b(6) \{\}
\par \hich\af4\dbch\af31505\loch\f4       friend void  ::show(Bar& x, Foo& y); // declaration of global friend
\par \hich\af4\dbch\af31505\loch\f4       friend void Bar::show(Bar& x, Foo& y); // declaration of friend from other class 
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 // Definition of a mem\hich\af4\dbch\af31505\loch\f4 ber function of Bar; this member is a friend of Foo
\par \hich\af4\dbch\af31505\loch\f4 void Bar::show(Bar& x, Foo& y) \{
\par \hich\af4\dbch\af31505\loch\f4   cout << "Show via function member of Bar" << endl;
\par \hich\af4\dbch\af31505\loch\f4   cout << "Bar::a = " << x.a << endl;
\par \hich\af4\dbch\af31505\loch\f4   cout << "Foo::b = " << y.b << endl;
\par \}
\par \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 // Friend for Bar and Foo, definition \hich\af4\dbch\af31505\loch\f4 of global function
\par \hich\af4\dbch\af31505\loch\f4 void show(Bar& x, Foo& y) \{
\par \hich\af4\dbch\af31505\loch\f4   cout << "Show via global function" << endl;
\par \hich\af4\dbch\af31505\loch\f4   cout << "Bar::a = " << x.a << endl;
\par \hich\af4\dbch\af31505\loch\f4   cout << "Foo::b = " << y.b << endl;
\par \}
\par \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 int main() \{
\par \hich\af4\dbch\af31505\loch\f4    Bar a;
\par \hich\af4\dbch\af31505\loch\f4    Foo b;
\par \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4    show(a,b);
\par \hich\af4\dbch\af31505\loch\f4    a.show(a,b);
\par \}
\par 
\par \hich\af4\dbch\af31505\loch\f4 59. Friend Clas\hich\af4\dbch\af31505\loch\f4 s
\par \hich\af4\dbch\af31505\loch\f4 
A friend class in C++, can access the "private" and "protected" members of the class in which it is declared as a friend. On declaration of friend class all member functions of the friend class become friends of the class in which the friend class was de
\hich\af4\dbch\af31505\loch\f4 clared. Friend status is not inherited; every friendship has to be explicitly declared. Friend classes can help in improving Encapsulation if used wisely.
\par \hich\af4\dbch\af31505\loch\f4 Classes are declared as friends within the definition of the class who is giving access to others; th\hich\af4\dbch\af31505\loch\f4 
is prevents a class from giving itself access to another's protected members, which enforces encapsulation. The friend class has the same level of access irrespective of whether the friend declaration appears in either the public, protected or private sec
\hich\af4\dbch\af31505\loch\f4 t\hich\af4\dbch\af31505\loch\f4 ions of the class definition. Friend status is granted by using the friend keyword:
\par 
\par \hich\af4\dbch\af31505\loch\f4 #include <iostream>
\par \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 class B
\par \{
\par \hich\af4\dbch\af31505\loch\f4     // B declares A as a friend...
\par \hich\af4\dbch\af31505\loch\f4     friend class A;
\par \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 private:
\par \hich\af4\dbch\af31505\loch\f4     void privatePrint()
\par \hich\af4\dbch\af31505\loch\f4     \{
\par \hich\af4\dbch\af31505\loch\f4         std::cout << "hello, world" << std:\hich\af4\dbch\af31505\loch\f4 :endl;
\par \hich\af4\dbch\af31505\loch\f4     \}
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 class A
\par \{
\par \hich\af4\dbch\af31505\loch\f4 public:
\par \hich\af4\dbch\af31505\loch\f4     A()
\par \hich\af4\dbch\af31505\loch\f4     \{
\par \hich\af4\dbch\af31505\loch\f4         B b;
\par \hich\af4\dbch\af31505\loch\f4         // ... and A now has access to B's private members
\par \hich\af4\dbch\af31505\loch\f4         b.privatePrint();
\par \hich\af4\dbch\af31505\loch\f4     \}
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 int main()
\par \{
\par \hich\af4\dbch\af31505\loch\f4     A a;
\par \hich\af4\dbch\af31505\loch\f4     return 0;
\par \}
\par 
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 60. Inter Process Communication
\par \hich\af4\dbch\af31505\loch\f4 In numerous applications\hich\af4\dbch\af31505\loch\f4 
 there is clearly a need for these processes to communicate with each exchanging data or control information. There are a few methods which can accomplish this task. We will consider:
\par \tab \bullet \tab \hich\af4\dbch\af31505\loch\f4 Pipes
\par \tab \bullet \tab \hich\af4\dbch\af31505\loch\f4 Signals
\par \tab \bullet \tab \hich\af4\dbch\af31505\loch\f4 Message Queues
\par \tab \bullet \tab \hich\af4\dbch\af31505\loch\f4 Semaphores
\par \tab \bullet \tab \hich\af4\dbch\af31505\loch\f4 Shared Memory
\par \tab \bullet \tab \hich\af4\dbch\af31505\loch\f4 Sockets
\par \tab \bullet \tab \hich\af4\dbch\af31505\loch\f4 COM
\par 
\par \hich\af4\dbch\af31505\loch\f4 Boost.Interprocess simplifies the use of common interprocess communication and synchronization mechanisms and offers a wide range of them:
\par \tab \bullet \tab \hich\af4\dbch\af31505\loch\f4 Shared memory.
\par \tab \bullet \tab \hich\af4\dbch\af31505\loch\f4 Memory-mapped files.
\par \tab \bullet \tab \hich\af4\dbch\af31505\loch\f4 Semaphores, mutexes, condition variables and upgradable \hich\af4\dbch\af31505\loch\f4 mutex types to place them in shared memory and memory mapped files.
\par \tab \bullet \tab \hich\af4\dbch\af31505\loch\f4 Named versions of those synchronization objects, similar to UNIX/Windows sem_open/CreateSemaphore API.
\par \tab \bullet \tab \hich\af4\dbch\af31505\loch\f4 File locking.
\par \tab \bullet \tab \hich\af4\dbch\af31505\loch\f4 Relative pointers.
\par \tab \bullet \tab \hich\af4\dbch\af31505\loch\f4 Message queues.
\par 
\par \hich\af4\dbch\af31505\loch\f4 61.How can we access PR\hich\af4\dbch\af31505\loch\f4 IVATE members outside class
\par \hich\af4\dbch\af31505\loch\f4 It's possible to access the private data of class directly in main and other's function...
\par \hich\af4\dbch\af31505\loch\f4 here is a small code...
\par \hich\af4\dbch\af31505\loch\f4 class GIFT
\par \{
\par \hich\af4\dbch\af31505\loch\f4     int i,j,k;
\par 
\par \hich\af4\dbch\af31505\loch\f4 public:
\par \hich\af4\dbch\af31505\loch\f4     void Fun() 
\par \hich\af4\dbch\af31505\loch\f4     \{
\par \hich\af4\dbch\af31505\loch\f4         cout<< i<<" "<< j<<" "<< k;
\par \hich\af4\dbch\af31505\loch\f4     \}
\par 
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par 
\par \hich\af4\dbch\af31505\loch\f4 int mai\hich\af4\dbch\af31505\loch\f4 n()
\par \{
\par \hich\af4\dbch\af31505\loch\f4      GIFT *obj=new GIFT(); // the value of i,j,k is 0
\par \hich\af4\dbch\af31505\loch\f4      int *ptr=(int *)obj;
\par \hich\af4\dbch\af31505\loch\f4      *ptr=10;
\par \hich\af4\dbch\af31505\loch\f4      cout<<*ptr;      // you also print value of I
\par \hich\af4\dbch\af31505\loch\f4      ptr++;
\par \hich\af4\dbch\af31505\loch\f4      *ptr=15;
\par \hich\af4\dbch\af31505\loch\f4      cout<<*ptr;      // you also print value of J
\par \hich\af4\dbch\af31505\loch\f4      ptr++;
\par \hich\af4\dbch\af31505\loch\f4      *ptr=20; 
\par \hich\af4\dbch\af31505\loch\f4  \hich\af4\dbch\af31505\loch\f4     cout<<*ptr;      // you also print value of K
\par \hich\af4\dbch\af31505\loch\f4      obj->Fun();
\par \}
\par \hich\af4\dbch\af31505\loch\f4 The idea of\~Encapsulation\~is to bundle data and methods (that work on the data) together and restrict access of private data members outside the class.\~In C++, a friend function or friend\hich\af4\dbch\af31505\loch\f4 
 class can also access private data members.
\par \hich\af4\dbch\af31505\loch\f4 Is it possible to access private members outside a class without friend?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 
\af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Yes, it is possible using pointers. See the following program as an example.
\par \ltrrow}\trowd \irow0\irowband0\lastrow \ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrtbl \clbrdrl\brdrtbl \clbrdrb\brdrtbl \clbrdrr\brdrtbl 
\cltxlrtb\clftsWidth3\clwWidth4900\clshdrawnil \cellx4792\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 #include<iostream>
\par \hich\af4\dbch\af31505\loch\f4 using namespace std;
\par \~
\par \hich\af4\dbch\af31505\loch\f4 class Test
\par \{
\par \hich\af4\dbch\af31505\loch\f4 privat\hich\af4\dbch\af31505\loch\f4 e:
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 int data;
\par \hich\af4\dbch\af31505\loch\f4 public:
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 Test() \{ data = 0; \}
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 int getData() \{ return data; \}
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par \~
\par \hich\af4\dbch\af31505\loch\f4 int main()
\par \{
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 Test t;
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 int* ptr = (int*)&t;
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 *ptr = 10;
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 cout << t.getData();
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 return 0;
\par \}\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow0\irowband0\lastrow \ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrtbl \clbrdrl\brdrtbl \clbrdrb\brdrtbl \clbrdrr\brdrtbl \cltxlrtb\clftsWidth3\clwWidth4900\clshdrawnil \cellx4792\row }\pard \ltrpar
\ql \li0\ri0\nowidctlpar\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Output:
\par \hich\af4\dbch\af31505\loch\f4 10
\par \hich\af4\dbch\af31505\loch\f4 Note that the above way of accessing private dat\hich\af4\dbch\af31505\loch\f4 a members is not at all a recommended way of accessing members and should never be used. Also, it doesn\hich\f4 \rquote \loch\f4 
t mean that the encapsulation doesn\hich\f4 \rquote \loch\f4 t work in C++. The idea of making private members is to avoid accidental changes. The above change to data is not a\hich\af4\dbch\af31505\loch\f4 c\hich\af4\dbch\af31505\loch\f4 cidental. It
\hich\f4 \rquote \loch\f4 s an intentionally written code to fool the compiler.
\par 
\par \hich\af4\dbch\af31505\loch\f4 62. Testing Types
\par \hich\af4\dbch\af31505\loch\f4 Unit \hich\f4 \emdash \loch\f4 > Integration \hich\f4 \emdash \loch\f4 > System \hich\f4 \emdash \loch\f4 > User Acceptance \hich\f4 \emdash \loch\f4 > Regression
\par \hich\af4\dbch\af31505\loch\f4 [White & Black Box Testing, as well Automation Testing]
\par 
\par \hich\af4\dbch\af31505\loch\f4 63. How is global static different from global var,
\par \hich\af4\dbch\af31505\loch\f4 
They are both in memory for the entire lifetime of the program. The variable that is declared static only has scope in the file in which it is declared where as the variable declared without static can be accessed from other files using an extern declara
\hich\af4\dbch\af31505\loch\f4 tion.
\par 
\par \hich\af4\dbch\af31505\loch\f4 64. How is static used in class, how it is initialised,
\par \hich\af4\dbch\af31505\loch\f4 // inside the class
\par \hich\af4\dbch\af31505\loch\f4 class Thing \{
\par \hich\af4\dbch\af31505\loch\f4     static string RE_ANY;
\par \hich\af4\dbch\af31505\loch\f4     static string RE_ANY_RELUCTANT;
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par 
\par \hich\af4\dbch\af31505\loch\f4 // in the source file
\par \hich\af4\dbch\af31505\loch\f4 string Thing::RE_ANY = "([^\\\\n]*)";
\par \hich\af4\dbch\af31505\loch\f4 string Thing::RE_ANY_RELUCTANT = "(\hich\af4\dbch\af31505\loch\f4 [^\\\\n]*?)";
\par 
\par \hich\af4\dbch\af31505\loch\f4 how is const var initialised in a class,
\par \hich\af4\dbch\af31505\loch\f4 class C
\par \{
\par \hich\af4\dbch\af31505\loch\f4      const int x;
\par 
\par \hich\af4\dbch\af31505\loch\f4 public:
\par \hich\af4\dbch\af31505\loch\f4       C() : x (5) \{ \}
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par \hich\af4\dbch\af31505\loch\f4 static const ?
\par \hich\af4\dbch\af31505\loch\f4 class X
\par \{
\par \hich\af4\dbch\af31505\loch\f4 public:
\par \hich\af4\dbch\af31505\loch\f4     static const int i = 1;
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par 
\par \hich\af4\dbch\af31505\loch\f4 65. Difference between C & C++
\par \hich\af4\dbch\af31505\loch\f4 1. C follows the procedural programming para\hich\af4\dbch\af31505\loch\f4 digm while C++ is a\~multi-paradigm\~language (procedural as well as object oriented)
\par \hich\af4\dbch\af31505\loch\f4 2.\~C is regarded as a low-level language(difficult interpretation & less user friendly) while C++ has features of both low-level(concentration on whats going on in the mach\hich\af4\dbch\af31505\loch\f4 
ine hardware) & high-level languages(concentration on the program itself) & hence is regarded as a middle-level language.
\par \hich\af4\dbch\af31505\loch\f4 3.\~C uses the top-down approach while C++ uses the bottom-up approach\~In case of C, the program is formulated step by step, each step \hich\af4\dbch\af31505\loch\f4 
is processed into detail while in C++, the base elements are first formulated which then are linked together to give rise to larger systems.
\par \hich\af4\dbch\af31505\loch\f4 4.\~C is function-driven while C++ is object-driven.\~
\par \hich\af4\dbch\af31505\loch\f4 5.\~We can use functions inside structures in C++ but not in C.
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 66. DBMS vs RDBMS
\par 
\par \hich\af4\dbch\af31505\loch\f4 
The software application that enables the users to store the data is known as a database. In database architecture, there are different implementations and theories in order to store physical data. The database which stores data in th
\hich\af4\dbch\af31505\loch\f4 e tables that have relationships with other tables in the database is called RDBMS or Relational Database Management System. However, in DBMS or Database Management System, there are no relationships among tables
\par 
\par \hich\af4\dbch\af31505\loch\f4 67. Why Try Catch is not used everywhere i\hich\af4\dbch\af31505\loch\f4 n C++ library
\par 
\par \hich\af4\dbch\af31505\loch\f4 In c++, the cost depends on the implementation. In general, there are two ways to implement exceptions:
\par \hich\af4\dbch\af31505\loch\f4 The first is the "table" approach. The compiler builds a set of tables to look up, at the point where the exception is thrown, where to g\hich\af4\dbch\af31505\loch\f4 
o. When the exception is thrown, it has to search through each table up the call stack until it finds something that will catch this exception. Since this is all runtime based, entering or exiting a try catch produces no penalty (good) but throwing an exc
\hich\af4\dbch\af31505\loch\f4 e\hich\af4\dbch\af31505\loch\f4 
ption involves potentially many lookups, producing a much slower throw. I personally prefer the not-having-to-pay for try catch blocks, because exceptions should be a very rare circumstance. This also would make executables larger, if they have to store t
\hich\af4\dbch\af31505\loch\f4 h\hich\af4\dbch\af31505\loch\f4 e tables.
\par \hich\af4\dbch\af31505\loch\f4 
The seconds is the "code" approach. Each time the code enters a try catch block, conceptually, the location of the block is pushed onto a stack. This produces a cost during entering and exiting a try-catch block, however, when an exception is thr
\hich\af4\dbch\af31505\loch\f4 
own, the runtime mechanism can quickly pop off the stack to find where to go. So, throwing exceptions is (much?) faster, but entering a block now has a cost. Putting a try catch block in a tight low level loop could produce significant overhead.
\par \hich\af4\dbch\af31505\loch\f4 You would \hich\af4\dbch\af31505\loch\f4 have to check your specific compiler to see which one they use.
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 68. What is re throw
\par \hich\af4\dbch\af31505\loch\f4 Rethrowing an expression from within an exception handler can be done by calling throw, by itself, with no exception. This causes current exception to be passed on to an\hich\af4\dbch\af31505\loch\f4 
 outer try/catch sequence. An exception can only be rethrown from within a catch block. When an exception is rethrown, it is propagated outward to the next catch block.
\par 
\par \hich\af4\dbch\af31505\loch\f4 Consider following code:
\par \hich\af4\dbch\af31505\loch\f4 #include <iostream>}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid683151 
\par }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 using namespace std;}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 
\af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid683151 
\par }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 void MyHandler()}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 
\af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid683151 
\par }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \{}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \~
\~\~\~\~\~\~\hich\af4\dbch\af31505\loch\f4  }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid683151 
\par \tab }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 try}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \~\~\~\~\~\~\~\hich\af4\dbch\af31505\loch\f4  }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid683151 
\par \tab }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \{}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\hich\af4\dbch\af31505\loch\f4  }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid683151 
\par \tab \tab }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 \hich\f4 throw \'93\loch\f4 \hich\f4 hello\'94\loch\f4 ;}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 
\loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \~\~\~\~\~\~\~\hich\af4\dbch\af31505\loch\f4  }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid683151 
\par \tab }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \}}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \~\~\~\~\~\~\~\hich\af4\dbch\af31505\loch\f4  }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid683151 
\par \tab }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 catch (const char*)}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{
\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \~\~\~\~\~\~\~\~}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid683151 
\par \tab }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \{}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \~\~\~\~\~\~\~\~\~\~\~\~\~\~\hich\af4\dbch\af31505\loch\f4  }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid683151 
\par \tab \tab }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 \hich\f4 cout <<\'94\loch\f4 Caught exception inside MyHandler\\\hich\f4 n\'94\loch\f4 ;}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \~\~\~\~\~\~\~\~\~\~\~\~\~\~\hich\af4\dbch\af31505\loch\f4  }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid683151 
\par \tab \tab }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 throw; //rethro\hich\af4\dbch\af31505\loch\f4 w char* out of function}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \~\~\~\~\~\~\~\hich\af4\dbch\af31505\loch\f4  }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid683151 
\par \tab }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \}}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid683151 
\par }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \}
\par \hich\af4\dbch\af31505\loch\f4 int main()}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid683151 
\par }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \{}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \~
\~\~\~\~\~\~\~\~\~\~\hich\af4\dbch\af31505\loch\f4  }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid683151 
\par \tab }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 \hich\f4 cout<< \'93\loch\f4 \hich\f4 Main start\'94\loch\f4 ;}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 
\loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \~\~\~\~\~\~\~\~\~\~\~\hich\af4\dbch\af31505\loch\f4  }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid683151 
\par \tab }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 try}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \~\~\~\~\~\~\~\~\~\~\~\hich\af4\dbch\af31505\loch\f4  }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid683151 
\par \tab }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \{}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\hich\af4\dbch\af31505\loch\f4  }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid683151 
\par \tab \tab }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 MyHandler();}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{
\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \~\~\~\~\~\~\~\~\~\~\~\hich\af4\dbch\af31505\loch\f4  }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid683151 
\par \tab }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \}}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \~\~\~\~\~\~\~\~\~\~\~\~}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid683151 
\par \tab }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 catch(const char*)}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{
\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \~\~\~\~\~\~\~\~\~\~\~\hich\af4\dbch\af31505\loch\f4  }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid683151 
\par \tab }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \{}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\hich\af4\dbch\af31505\loch\f4  }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid683151 
\par \tab \tab }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 \hich\f4 cout <<\'94\loch\f4 Caugh\hich\af4\dbch\af31505\loch\f4 t exception inside Main\\\hich\f4 n\'94\loch\f4 ;}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \~\~\~\~\~\~\~\~\~\~\~\hich\af4\dbch\af31505\loch\f4  }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid683151 
\par \tab }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \}}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\hich\af4\dbch\af31505\loch\f4  }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid683151 
\par \tab }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 \hich\f4 cout << \'93\loch\f4 \hich\f4 Main end\'94\loch\f4 ;}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 
\loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \~\~\~\~\~\~\~\~\~\~\~\~}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid683151 
\par \tab }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 return 0;}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 
\af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid683151 
\par }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \}
\par }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid683151 
\par }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 O/p:}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Main start}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Caught exception inside MyHandler}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Caught exception inside Main}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Main end}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 Thus, exception rethrown by the catch block inside MyHan\hich\af4\dbch\af31505\loch\f4 dler() is caught inside main();
\par 
\par \hich\af4\dbch\af31505\loch\f4 69. Can we access non static data in static class ?
\par \tab \hich\af4\dbch\af31505\loch\f4 1.\tab Static functions can only access(write/read) static member variables
\par \tab \hich\af4\dbch\af31505\loch\f4 2.\tab Non-Static functions can access(write/read) static member variables}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 
\af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 You cannot access a non st\hich\af4\dbch\af31505\loch\f4 atic member inside a\~static\~
method unless you explicitly make available the object instance inside the member function.(Pass object instance explicitly as argument or use a global instance which can be accessed inside the function)}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 For a non static member \hich\af4\dbch\af31505\loch\f4 
function an implicit\~this\~pointer is passed as the first argument to the function. The\~this\~pointer is dereferenced inside the member function to access the members.\~static members are not passed with the implicit\~this\~
pointer so you cannot access non sta\hich\af4\dbch\af31505\loch\f4 t\hich\af4\dbch\af31505\loch\f4 ic members inside the function unless you explicitly get the object inside the member function.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \~\hich\af4\dbch\af31505\loch\f4 
have one question about static and non-static function and variable.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid11956281 
\par 
\par }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 1) non-static function access static variable.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 
\loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 It's OK!}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 
\loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\par \hich\af4\dbch\af31505\loch\f4 class Bar
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\tx560\tx1134\tx1701\tx2268\tx2835\tx3402\tx3969\tx4536\tx5103\tx5670\tx6237\tx6804\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \{
\par \hich\af4\dbch\af31505\loch\f4 public:
\par 
\par \hich\af4\dbch\af31505\loch\f4      static int i;
\par 
\par \hich\af4\dbch\af31505\loch\f4      void nonStaticFunction() \{
\par 
\par \hich\af4\dbch\af31505\loch\f4          Bar::i = 10;
\par 
\par \hich\af4\dbch\af31505\loch\f4      \}
\par 
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par 
\par \hich\af4\dbch\af31505\loch\f4 int Bar::i=0;}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\par \hich\af4\dbch\af31505\loch\f4 2) non-static function access non-static variable}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Definitely OK!
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
3) static function access static variable&funciton}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 Definitely OK!}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\par \hich\af4\dbch\af31505\loch\f4 4) static function access non-static function}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 It's OK}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid3355693 
\par 
\par }{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 class Bar
\par \{
\par \hich\af4\dbch\af31505\loch\f4 public:
\par \hich\af4\dbch\af31505\loch\f4      static void staticFunction( const Bar & ba\hich\af4\dbch\af31505\loch\f4 r)
\par \hich\af4\dbch\af31505\loch\f4      \{
\par \hich\af4\dbch\af31505\loch\f4          bar.memberFunction();
\par 
\par \hich\af4\dbch\af31505\loch\f4      \}
\par 
\par \hich\af4\dbch\af31505\loch\f4      void memberFunction() const
\par \hich\af4\dbch\af31505\loch\f4      \{
\par 
\par \hich\af4\dbch\af31505\loch\f4      \}
\par 
\par \}
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
5) static function access non-static variable}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 It's OK or not OK? I am puzzled about this!}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 How about this example}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 class Bar
\par \{
\par \hich\af4\dbch\af31505\loch\f4 public:
\par \hich\af4\dbch\af31505\loch\f4      static void stat\hich\af4\dbch\af31505\loch\f4 icFunction( Bar & bar)
\par \hich\af4\dbch\af31505\loch\f4      \{
\par \hich\af4\dbch\af31505\loch\f4          bar.memberFunction();
\par 
\par \hich\af4\dbch\af31505\loch\f4      \}
\par 
\par \hich\af4\dbch\af31505\loch\f4      void memberFunction()
\par \hich\af4\dbch\af31505\loch\f4      \{
\par 
\par \hich\af4\dbch\af31505\loch\f4          i = 0;
\par \hich\af4\dbch\af31505\loch\f4      \}
\par 
\par \hich\af4\dbch\af31505\loch\f4      int i;
\par 
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
When called, a static function isn't bound to an instance of the class. Class instances (objects) are going to\hich\af4\dbch\af31505\loch\f4 
 be the entities that hold the "non-static" variables. Therefore, from the static function, you won't be able to access them without actually being passed or storing elsewhere a specific instance to operate on.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 So yes, the code in your last example is vali
\hich\af4\dbch\af31505\loch\f4 d, because you are passed in an instance. However, you could not do:}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 static void staticFunction()
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\tx560\tx720\tx1134\tx1701\tx2268\tx2835\tx3402\tx3969\tx4536\tx5103\tx5670\tx6237\tx6804\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \{
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\tx560\tx1134\tx1701\tx2268\tx2835\tx3402\tx3969\tx4536\tx5103\tx5670\tx6237\tx6804\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
    // error, this function is static, and is therefore
\par \hich\af4\dbch\af31505\loch\f4     // not bound to a specific instance when called
\par \hich\af4\dbch\af31505\loch\f4     i = 5;
\par 
\par 
\par \}}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\par 
\par \hich\af4\dbch\af31505\loch\f4 70. Can we return value from D\hich\af4\dbch\af31505\loch\f4 LL ?
\par \hich\af4\dbch\af31505\loch\f4 Send a Pointer or Pointer-to-pointer, please check google for more details
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 71. Exceptions and Stack Unwinding in C++
\par \hich\af4\dbch\af31505\loch\f4 In the C++ exception mechanism, control moves from the throw statement to the first catch statement that can handle the thrown type.\hich\af4\dbch\af31505\loch\f4 
 When the catch statement is reached, all of the automatic variables that are in scope between the throw and catch statements are destroyed in a process that is known as\~stack unwinding. In stack unwinding, execution proceeds as follows:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 1.Control reache\hich\af4\dbch\af31505\loch\f4 s the\~try\~statement by normal sequential execution. The guarded section in the\~try\~block is executed.
\par \hich\af4\dbch\af31505\loch\f4 2.If no exception is thrown during execution of the guarded section, the\~catch\~clauses that follow the\~try\~block are not executed. Execution continues at \hich\af4\dbch\af31505\loch\f4 the statement after the last\~catch
\~clause that follows the associated\~try\~block.
\par \hich\af4\dbch\af31505\loch\f4 3.If an exception is thrown during execution of the guarded section or in any routine that the guarded section calls either directly or indirectly, an exception object is crea\hich\af4\dbch\af31505\loch\f4 
ted from the object that is created by the\~throw\~operand. (This implies that a copy constructor may be involved.) At this point, the compiler looks for a\~catch\~
clause in a higher execution context that can handle an exception of the type that is thrown, o\hich\af4\dbch\af31505\loch\f4 r\hich\af4\dbch\af31505\loch\f4  for a\~catch handler that can handle any type of exception. The\~catch\~
handlers are examined in order of their appearance after the\~try\~block. If no appropriate handler is found, the next dynamically enclosing\~try\~block is examined. This process continues \hich\af4\dbch\af31505\loch\f4 u\hich\af4\dbch\af31505\loch\f4 
ntil the outermost enclosing\~tryblock is examined.
\par \hich\af4\dbch\af31505\loch\f4 4.If a matching handler is still not found, or if an exception occurs during the unwinding process but before the handler gets control, the predefined run-time function\~terminate\~is called. If an exception
\hich\af4\dbch\af31505\loch\f4  occurs after the exception is thrown but before the unwind begins,\~terminateis called.
\par \hich\af4\dbch\af31505\loch\f4 5.If a matching\~catch\~handler is found, and it catches by value, its formal parameter is initialized by copying the exception object. If it catches by reference, the pa\hich\af4\dbch\af31505\loch\f4 
rameter is initialized to refer to the exception object. After the formal parameter is initialized, the process of unwinding the stack begins. This involves the destruction of all automatic objects that were fully constructed\hich\f4 \emdash \loch\f4 
but not yet destructed\hich\f4 \emdash \loch\f4 betwee\hich\af4\dbch\af31505\loch\f4 n\hich\af4\dbch\af31505\loch\f4  the beginning of the\~try\~block that is associated with the\~catch\~
handler and the throw site of the exception. Destruction occurs in reverse order of construction. The\~catch\~handler is executed and the program resumes execution after the last handler\hich\f4 \emdash \loch\f4 that\hich\af4\dbch\af31505\loch\f4  
\hich\af4\dbch\af31505\loch\f4 is, at the first statement or construct that is not a\~catch\~handler. Control can only enter a\~catch\~handler through a thrown exception, never through a\~goto\~statement or acase\~label in a\~switch\~statement.}{
\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
The following example demonstrates how the stack i\hich\af4\dbch\af31505\loch\f4 s unwound when an exception is thrown. Execution on the thread jumps from the throw statement in\~C\~to the catch statement in\~
main, and unwinds each function along the way. Notice the order in which the\~Dummy\~objects are created and then destroyed as they \hich\af4\dbch\af31505\loch\f4 g\hich\af4\dbch\af31505\loch\f4 
o out of scope. Also notice that no function completes except\~main, which contains the catch statement. Function\~Anever returns from its call to\~B(), and\~B\~never returns from its call to\~C(). If you uncomment the definition of the\~Dummy\~
pointer and the co\hich\af4\dbch\af31505\loch\f4 r\hich\af4\dbch\af31505\loch\f4 
responding delete statement, and then run the program, notice that the pointer is never deleted. This shows what can happen when functions do not provide an exception guarantee. For more information, see How to: Design for Exceptions. If you comment out t
\hich\af4\dbch\af31505\loch\f4 h\hich\af4\dbch\af31505\loch\f4 e catch statement, you can observe what happens when a program terminates because of an unhandled exception.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f\u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 #include\~<string>
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\tx560\tx720\tx1134\tx1701\tx2268\tx2835\tx3402\tx3969\tx4536\tx5103\tx5670\tx6237\tx6804\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
#include\~<iostream>
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\tx560\tx1134\tx1701\tx2268\tx2835\tx3402\tx3969\tx4536\tx5103\tx5670\tx6237\tx6804\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 using\~
namespace\~std;
\par \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 class\~MyException\{\};
\par \hich\af4\dbch\af31505\loch\f4 class\~Dummy
\par \{
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 public:
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 Dummy(string\~s)\~:\~MyName(s)\~\{\~PrintMsg("Created\~Dummy:");\~\}
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 Dummy(const\~Dummy&\~other)\~:\~MyName(other.MyName)\{\~PrintMsg("Copy\~created\~Dum\hich\af4\dbch\af31505\loch\f4 my:");\~\}
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 ~Dummy()\{\~PrintMsg("Destroyed\~Dummy:");\~\}
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 void\~PrintMsg(string\~s)\~\{\~cout\~<<\~s\~\~<<\~MyName\~<<\~\~endl;\~\}
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 string\~MyName;\~
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 int\~level;
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 void\~C(Dummy\~d,\~int\~i)
\par \{\~
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 cout\~<<\~"Entering\~FunctionC"\~<<\~endl;
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 d.MyName\~=\~"\~C";
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 thr\hich\af4\dbch\af31505\loch\f4 ow\~MyException();\~\~\~
\par \hich\af4\dbch\af31505\loch\f4  
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 cout\~<<\~"Exiting\~FunctionC"\~<<\~endl;
\par \}
\par \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 void\~B(Dummy\~d,\~int\~i)
\par \{
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 cout\~<<\~"Entering\~FunctionB"\~<<\~endl;
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 d.MyName\~=\~"B";
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 C(d,\~i\~+\~1);\~\~\~
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 cout\~<<\~"Exiting\~FunctionB"\~<<\~endl;\~
\par \}
\par \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 void\~A(Dummy\~d,\~int\~i)
\par \{\~
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 cout\~\hich\af4\dbch\af31505\loch\f4 <<\~"Entering\~FunctionA"\~<<\~endl;
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 d.MyName\~=\~"\~A"\~;
\par \~\~\hich\af4\dbch\af31505\loch\f4 //\~\~Dummy*\~pd\~=\~new\~Dummy("new\~Dummy");\~//Not\~exception\~safe!!!
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 B(d,\~i\~+\~1);
\par \~\hich\af4\dbch\af31505\loch\f4 //\~\~\~delete\~pd;\~
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 cout\~<<\~"Exiting\~FunctionA"\~<<\~endl;\~\~\~
\par \}
\par \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 int\~main()
\par \{
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 cout\~<<\~"Entering\~main"\~<<\~endl;
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 try
\par \~\~\~\~\{
\par \~\~\~\~\~\~\~\~\hich\af4\dbch\af31505\loch\f4 Dummy\~d("\~M");
\par \~\~\~\~\~\~\~\~\hich\af4\dbch\af31505\loch\f4 A(d,1);
\par \~\~\~\~\}
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 catch\~(MyException&\~e)
\par \~\~\~\~\{
\par \~\~\~\~\~\~\~\~\hich\af4\dbch\af31505\loch\f4 cout\~<<\~"Caught\~an\~exception\~of\~type:\~"\~<<\~typeid(e).name()\~<<\~endl;
\par \~\~\~\~\}
\par \hich\af4\dbch\af31505\loch\f4  
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 cout\~<<\~"Exiting\~main."\~<<\~endl;
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 char\~c;
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 cin\~>>\~c;
\par \}
\par \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 /*\~Output:
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 Entering\~main
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 Created\~Dummy:\~M
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 Copy\~created\~Dummy:\~M
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 Entering\~FunctionA
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 Copy\~created\~Dummy:\~A
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 Entering\~FunctionB
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 Copy\~created\~Dummy: B
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 Entering\~FunctionC
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 Destroyed\~Dummy:\~C
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 Destroyed\~Dummy: B
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 Destroyed\~Dummy:\~A
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 Destroyed\~Dummy:\~M
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 Caught\~an\~exception\~of\~type:\~class\~MyException
\par \~\~\~\~\hich\af4\dbch\af31505\loch\f4 Exiting\~main.
\par \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 */}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af39\afs18 \ltrch\fcs0 \f39\fs18\insrsid5453207 
\par }{\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 72. What is Volatile
\par }{\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\cf18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 A type qualifier that you can use to declare that an object can be modified in the program by the hardware.}{\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 
\f4\fs20\insrsid5453207 
\par 
\par \hich\af4\dbch\af31505\loch\f4 73. One Defination Rule}{\rtlch\fcs1 \af15\afs20 \ltrch\fcs0 \fs20\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\cf19\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 - In any }{\field{\*\fldinst {\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\cf19\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 HYPERLINK "http://en.wikipedia.org/wiki/Translation_unit_(programming)"}{\rtlch\fcs1 \af4\afs20 
\ltrch\fcs0 \f4\fs20\cf19\insrsid11607506 {\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b9000000068007400740070003a002f002f0065006e002e00770069006b006900700065006400690061002e006f00720067002f00770069006b0069002f005400720061006e0073006c006100740069006f006e005f00
75006e00690074005f002800700072006f006700720061006d006d0069006e00670029000000795881f43b1d7f48af2c825dc485276300000000a5ab0000f9}}}{\fldrslt {\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\cf20\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 translation unit}}}
\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\cf19\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 , a }{\field{\*\fldinst {\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\cf19\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 HYPERLINK "http://en.wikipedia.org/wiki/Generic_programming"}{\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\cf19\insrsid11607506 {\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7a00000068007400740070003a002f002f0065006e002e00770069006b006900700065006400690061002e006f00720067002f00770069006b0069002f00470065006e0065007200690063005f00700072006f006700
720061006d006d0069006e0067000000795881f43b1d7f48af2c825dc485276300000000a5ab000002}}}{\fldrslt {\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\cf20\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 template}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {
\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\cf19\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 , }{\field{\*\fldinst {\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\cf19\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
HYPERLINK "http://en.wikipedia.org/wiki/Datatype"}{\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\cf19\insrsid11607506 {\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b6400000068007400740070003a002f002f0065006e002e00770069006b006900700065006400690061002e006f00720067002f00770069006b0069002f00440061007400610074007900700065000000795881f43b1d
7f48af2c825dc485276300000000a5ab000000}}}{\fldrslt {\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\cf20\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 type}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 
\f4\fs20\cf19\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 , }{\field{\*\fldinst {\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\cf19\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 HYPERLINK "http://en.wikipedia.org/wiki/Function_(programming)"}{\rtlch\fcs1 
\af4\afs20 \ltrch\fcs0 \f4\fs20\cf19\insrsid11607506 {\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b8000000068007400740070003a002f002f0065006e002e00770069006b006900700065006400690061002e006f00720067002f00770069006b0069002f00460075006e006300740069006f006e005f00280070007200
6f006700720061006d006d0069006e00670029000000795881f43b1d7f48af2c825dc485276300000000a5ab000002}}}{\fldrslt {\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\cf20\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 function}}}\sectd \ltrsect
\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\cf19\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 , or }{\field{\*\fldinst {\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\cf19\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
HYPERLINK "http://en.wikipedia.org/wik\hich\af4\dbch\af31505\loch\f4 i/Object_(computer_science)"}{\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\cf19\insrsid11607506 {\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b8600000068007400740070003a002f002f0065006e002e00770069006b006900700065006400690061002e006f00720067002f00770069006b0069002f004f0062006a006500630074005f00280063006f006d007000
75007400650072005f0073006300690065006e006300650029000000795881f43b1d7f48af2c825dc485276300000000a5ab000000}}}{\fldrslt {\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\cf20\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 object}}}\sectd \ltrsect
\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\cf19\insrsid5453207 \hich\af4\dbch\af31505\loch\f4  can have no more than one definition. Some of these can have any number of declarations. A definition provides an instance.

\par }{\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 - In the entire program, an object or non-inline function cannot have more than one definition\hich\af4\dbch\af31505\loch\f4 
; if an object or function is used, it must have exactly one definition. You can declare an object or function that is never used, in which case you don't have to provide a definition. In no event can there be more than one definition.
\par \hich\af4\dbch\af31505\loch\f4 Some things, like ty\hich\af4\dbch\af31505\loch\f4 
pes, templates, and extern inline functions, can be defined in more than one translation unit. For a given entity, each definition must be the same. Non-extern objects and functions in different translation units are different entities, even if their name
\hich\af4\dbch\af31505\loch\f4 s\hich\af4\dbch\af31505\loch\f4  and types are the same.
\par }\pard \ltrpar\ql \li0\ri0\sa28\nowidctlpar\tx560\tx1134\tx1701\tx2268\tx2835\tx3402\tx3969\tx4536\tx5103\tx5670\tx6237\tx6804\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\insrsid5453207 
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\tx560\tx1134\tx1701\tx2268\tx2835\tx3402\tx3969\tx4536\tx5103\tx5670\tx6237\tx6804\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
In general, a translation unit shall contain no more than one definition of any class type. In this example, two definitions of the class type C occur in the same translation unit. This typically occurs if a header file is include
\hich\af4\dbch\af31505\loch\f4 d twice by the same source file without appropriate header guards.
\par \hich\af4\dbch\af31505\loch\f4 class C \{\}; // first definition of C
\par \hich\af4\dbch\af31505\loch\f4 class C \{\}; // error, second definition of C
\par \hich\af4\dbch\af31505\loch\f4 In the following, forming a pointer to S or defining a function taking a reference to S are examples of leg\hich\af4\dbch\af31505\loch\f4 
al constructs, because they do not require the type of S to be complete. Therefore, a definition is not required.[2]
\par \hich\af4\dbch\af31505\loch\f4 Defining an object of type S, a function taking an argument of type S, or using S in a sizeof expression are examples of contexts where S m\hich\af4\dbch\af31505\loch\f4 
ust be complete, and therefore require a definition.[2]
\par \hich\af4\dbch\af31505\loch\f4 struct S;     // declaration of S
\par \hich\af4\dbch\af31505\loch\f4 S * p;        // ok, no definition required
\par \hich\af4\dbch\af31505\loch\f4 void f(S&);   // ok, no definition required
\par \hich\af4\dbch\af31505\loch\f4 void f(S*);   // ok, no definition required
\par \hich\af4\dbch\af31505\loch\f4 S f();        // ok, no definition\hich\af4\dbch\af31505\loch\f4  required  
\par 
\par \hich\af4\dbch\af31505\loch\f4 S s;          // error, definition required
\par \hich\af4\dbch\af31505\loch\f4 sizeof(S);    // error, definition required
\par }{\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\insrsid4412535 
\par \hich\af4\dbch\af31505\loch\f4 What is use of one \hich\af4\dbch\af31505\loch\f4 definition\hich\af4\dbch\af31505\loch\f4  rule ?\hich\af4\dbch\af31505\loch\f4  
\par }\pard \ltrpar\ql \li0\ri0\sa28\nowidctlpar\tx560\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\insrsid5453207 
\par \hich\af4\dbch\af31505\loch\f4 74. RAII -
\par {\listtext\pard\plain\ltrpar \rtlch\fcs1 \af0\afs20 \ltrch\fcs0 \f4\fs20\cf19\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 1.\tab}}\pard \ltrpar\ql \li0\ri0\sa140\nowidctlpar\wrapdefault\faauto\ls1\rin0\lin0\itap0 {\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 
\f4\fs20\cf19\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 In RAII, holding a resource is tied to }{\field{\*\fldinst {\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\cf19\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
HYPERLINK "http://en.wikipedia.org/wiki/Object_lifetime"}{\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\cf19\insrsid11607506 {\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7200000068007400740070003a002f002f0065006e002e00770069006b006900700065006400690061002e006f00720067002f00770069006b0069002f004f0062006a006500630074005f006c006900660065007400
69006d0065000000795881f43b1d7f48af2c825dc485276300000000a5ab000000}}}{\fldrslt {\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\cf20\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 object lifetime}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 
\af4\afs20 \ltrch\fcs0 \f4\fs20\cf19\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 : }{\field{\*\fldinst {\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\cf19\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 HYPERLINK "http://en.wikip
\hich\af4\dbch\af31505\loch\f4 edia.org/wiki/Resource_allocation_(computer)"}{\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\cf19\insrsid11607506 {\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b9000000068007400740070003a002f002f0065006e002e00770069006b006900700065006400690061002e006f00720067002f00770069006b0069002f005200650073006f0075007200630065005f0061006c006c00
6f0063006100740069006f006e005f00280063006f006d007000750074006500720029000000795881f43b1d7f48af2c825dc485276300000000a5ab000000}}}{\fldrslt {\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\cf20\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 resource allocation}
}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\cf19\insrsid5453207 \hich\af4\dbch\af31505\loch\f4  (acquisition) is done during object creation (specifically initialization), by the }{\field{\*\fldinst {
\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\cf19\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 HYPERLINK "http://en.wikipedia.org/wiki/Constructor_(object-oriented_programming)"}{\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\cf19\insrsid11607506 
{\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90ba600000068007400740070003a002f002f0065006e002e00770069006b006900700065006400690061002e006f00720067002f00770069006b0069002f0043006f006e007300740072007500630074006f0072005f00
28006f0062006a006500630074002d006f007200690065006e007400650064005f00700072006f006700720061006d006d0069006e00670029000000795881f43b1d7f48af2c825dc485276300000000a5ab0000ff}}}{\fldrslt {\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\cf20\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 constructor}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\cf19\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 , while \hich\af4\dbch\af31505\loch\f4 
resource deallocation (release) is done during object destruction, by the }{\field{\*\fldinst {\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\cf19\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
HYPERLINK "http://en.wikipedia.org/wiki/Destructor_(computer_programming)"}{\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\cf19\insrsid11607506 {\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b9600000068007400740070003a002f002f0065006e002e00770069006b006900700065006400690061002e006f00720067002f00770069006b0069002f00440065007300740072007500630074006f0072005f002800
63006f006d00700075007400650072005f00700072006f006700720061006d006d0069006e00670029000000795881f43b1d7f48af2c825dc485276300000000a5ab000000}}}{\fldrslt {\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\cf20\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
destructor}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\cf19\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 . If objects are destructed properly, }{\field{\*\fldinst {\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 
\f4\fs20\cf19\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 HYPERLINK "http://en.wikipedia.org/wiki/Resource_leak"}{\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\cf19\insrsid11607506 {\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b6e00000068007400740070003a002f002f0065006e002e00770069006b006900700065006400690061002e006f00720067002f00770069006b0069002f005200650073006f0075007200630065005f006c0065006100
6b000000795881f43b1d7f48af2c825dc485276300000000a5ab000000}}}{\fldrslt {\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\cf20\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 resource leaks}}}\sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\rtlch\fcs1 \af4\afs20 
\ltrch\fcs0 \f4\fs20\cf19\insrsid5453207 \hich\af4\dbch\af31505\loch\f4  do not occur.}{\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\insrsid5453207 
\par }\pard \ltrpar\ql \li0\ri0\sa273\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 This is a programming idiom which briefly means that you
\par {\listtext\pard\plain\ltrpar \rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\insrsid5453207 \loch\af4\dbch\af31505\hich\f4 \'95\tab}}\pard \ltrpar\ql \fi-720\li720\ri0\nowidctlpar\tx220\tx720\wrapdefault\faauto\ls2\rin0\lin720\itap0 {\rtlch\fcs1 \af4\afs20 
\ltrch\fcs0 \f4\fs20\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 encapsulate a resource into a class (whose constructor usually - but not necessarily** - acquires the resource, and its destructor always releases it)
\par {\listtext\pard\plain\ltrpar \rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\insrsid5453207 \loch\af4\dbch\af31505\hich\f4 \'95\tab}\hich\af4\dbch\af31505\loch\f4 use the resource \hich\af4\dbch\af31505\loch\f4 via a local instance of the class*
\par {\listtext\pard\plain\ltrpar \rtlch\fcs1 \af4\afs20 \ltrch\fcs0 \f4\fs20\insrsid5453207 \loch\af4\dbch\af31505\hich\f4 \'95\tab}\hich\af4\dbch\af31505\loch\f4 the resource is automatically freed when the object gets out of scope
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\tx560\tx720\tx1134\tx1701\tx2268\tx2835\tx3402\tx3969\tx4536\tx5103\tx5670\tx6237\tx6804\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\par 
\par \hich\af4\dbch\af31505\loch\f4 75. Class Variant
\par \hich\af4\dbch\af31505\loch\f4 ?
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\par \hich\af4\dbch\af31505\loch\f4 Function pointers :
\par \hich\af4\dbch\af31505\loch\f4 * Functions and function pointers with different calling convention are incompatible with each other.
\par \hich\af4\dbch\af31505\loch\f4 http:/\hich\af4\dbch\af31505\loch\f4 /www.codeguru.com/cpp/cpp/cpp_mfc/callbacks/article.php/c10557
\par \hich\af4\dbch\af31505\loch\f4 // 2.1 define a function pointer and initialize to NULL
\par \hich\af4\dbch\af31505\loch\f4 int (*pt2Function)(float, char, char) = NULL;                        // C
\par \hich\af4\dbch\af31505\loch\f4 int (TMyClass::*pt2Member)(float, char, char) = NULL;          \hich\af4\dbch\af31505\loch\f4       // C++
\par \hich\af4\dbch\af31505\loch\f4 int (TMyClass::*pt2ConstMember)(float, char, char) const = NULL;     // C++
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 // C
\par \hich\af4\dbch\af31505\loch\f4 int DoIt  (float a, char b, char c)\{ printf("DoIt\\n");   return a+b+c; \}
\par \hich\af4\dbch\af31505\loch\f4 int DoMore(float a, char b, char c)const\{ printf("DoMore\\n"); return a-b+c; \}
\par 
\par \hich\af4\dbch\af31505\loch\f4 pt2Funct\hich\af4\dbch\af31505\loch\f4 ion = DoIt;      // short form
\par \hich\af4\dbch\af31505\loch\f4 pt2Function = &DoMore;   // correct assignment using address operator
\par 
\par \hich\af4\dbch\af31505\loch\f4 // C++
\par \hich\af4\dbch\af31505\loch\f4 class TMyClass
\par \{
\par \hich\af4\dbch\af31505\loch\f4 public:
\par \hich\af4\dbch\af31505\loch\f4    int DoIt(float a, char b, char c)\{ cout << "TMyClass::DoIt"<< endl; return a+b+c;\};
\par \hich\af4\dbch\af31505\loch\f4    int DoMore(float a, char b, char\hich\af4\dbch\af31505\loch\f4  c) const\{ cout << "TMyClass::DoMore" << endl; return a-b+c; \};
\par 
\par \hich\af4\dbch\af31505\loch\f4    /* more of TMyClass */
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par 
\par \hich\af4\dbch\af31505\loch\f4 pt2ConstMember = &TMyClass::DoMore; // correct assignment using address operator
\par \hich\af4\dbch\af31505\loch\f4 pt2Member = &TMyClass::DoIt; // note: <pt2Member> may also legally point to &DoM\hich\af4\dbch\af31505\loch\f4 ore
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 // 2.5 calling a function using a function pointer
\par \hich\af4\dbch\af31505\loch\f4 int result1 = pt2Function    (12, 'a', 'b');          // C short way
\par \hich\af4\dbch\af31505\loch\f4 int result2 = (*pt2Function) (12, 'a', 'b');          // C
\par 
\par \hich\af4\dbch\af31505\loch\f4 TMyClass instance1;
\par \hich\af4\dbch\af31505\loch\f4 int result3 = (instance1.*pt2Member)(12, 'a', 'b')\hich\af4\dbch\af31505\loch\f4 ;   // C++
\par \hich\af4\dbch\af31505\loch\f4 int result4 = (*this.*pt2Member)(12, 'a', 'b');       // C++ if this-pointer can be used
\par 
\par \hich\af4\dbch\af31505\loch\f4 TMyClass* instance2 = new TMyClass;
\par \hich\af4\dbch\af31505\loch\f4 int result4 = (instance2->*pt2Member)(12, 'a', 'b');  // C++, instance2 is a pointer
\par \hich\af4\dbch\af31505\loch\f4 delete instance2;
\par 
\par 
\par 
\par 
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 //------------------------------------------------------------------------------------
\par \hich\af4\dbch\af31505\loch\f4 // 2.6 How to Pass a Function Pointer
\par 
\par \hich\af4\dbch\af31505\loch\f4 // <pt2Func> is a pointer to a function which returns an int and takes a float and two char
\par \hich\af4\dbch\af31505\loch\f4 void PassPtr(int (*pt2Func)(float, char, char))
\par \{
\par \hich\af4\dbch\af31505\loch\f4    int result = (*pt2Func)(12, 'a', 'b');     // call using function pointer
\par \hich\af4\dbch\af31505\loch\f4    cout << result << endl;
\par \}
\par 
\par \hich\af4\dbch\af31505\loch\f4 // execute example code - 'DoIt' is a suitable function like defined above in 2.1-4
\par \hich\af4\dbch\af31505\loch\f4 void Pass_A_Function_Pointer()
\par \{
\par \hich\af4\dbch\af31505\loch\f4    cout << endl << "Executing \hich\af4\dbch\af31505\loch\f4 'Pass_A_Function_Pointer'" << endl;
\par \hich\af4\dbch\af31505\loch\f4    PassPtr(&DoIt);
\par \}
\par 
\par \hich\af4\dbch\af31505\loch\f4 //------------------------------------------------------------------------------------
\par \hich\af4\dbch\af31505\loch\f4 // 2.8 How to Use Arrays of Function Pointers
\par 
\par \hich\af4\dbch\af31505\loch\f4 // C ---------------------------------------------------------------------------------
\par 
\par \hich\af4\dbch\af31505\loch\f4 // type-definition: 'pt2Function' now can be used as type
\par \hich\af4\dbch\af31505\loch\f4 typedef int (*pt2Function)(float, char, char);
\par 
\par \hich\af4\dbch\af31505\loch\f4 // define arrays and ini each element to NULL, <funcArr1> and <funcArr2> are arrays
\par \hich\af4\dbch\af31505\loch\f4 // with 10 pointers to functions which ret\hich\af4\dbch\af31505\loch\f4 urn an int and take a float and two char
\par 
\par \hich\af4\dbch\af31505\loch\f4 // first way using the typedef
\par \hich\af4\dbch\af31505\loch\f4 pt2Function funcArr1[10] = \{NULL\};
\par 
\par \hich\af4\dbch\af31505\loch\f4 // 2nd way directly defining the array
\par \hich\af4\dbch\af31505\loch\f4 int (*funcArr2[10])(float, char, char) = \{NULL\};
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 // assign the function's address - 'DoIt' and 'DoMore' ar\hich\af4\dbch\af31505\loch\f4 e suitable functions
\par \hich\af4\dbch\af31505\loch\f4 // like defined above in 2.1-4
\par \hich\af4\dbch\af31505\loch\f4 funcArr1[0] = funcArr2[1] = &DoIt;
\par \hich\af4\dbch\af31505\loch\f4 funcArr1[1] = funcArr2[0] = &DoMore;
\par 
\par \hich\af4\dbch\af31505\loch\f4 /* more assignments */
\par 
\par \hich\af4\dbch\af31505\loch\f4 // calling a function using an index to address the function pointer
\par \hich\af4\dbch\af31505\loch\f4 printf("%d\\n", funcArr1[1](12, 'a', 'b\hich\af4\dbch\af31505\loch\f4 '));         //  short form
\par \hich\af4\dbch\af31505\loch\f4 printf("%d\\n", (*funcArr1[0])(12, 'a', 'b'));      // "correct" way of calling
\par \hich\af4\dbch\af31505\loch\f4 printf("%d\\n", (*funcArr2[1])(56, 'a', 'b'));
\par \hich\af4\dbch\af31505\loch\f4 printf("%d\\n", (*funcArr2[0])(34, 'a', 'b'));
\par 
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Why Should You Use Callback Functions?
\par \hich\af4\dbch\af31505\loch\f4 Because they uncouple the caller from the callee. The caller doesn't care who the callee is; all it knows is that there is a callee with a certain prototype and probably some restriction (for instance, the returned
\hich\af4\dbch\af31505\loch\f4  value can be int, but certain values have certain meanings).
\par \hich\af4\dbch\af31505\loch\f4 If you are wondering how is that useful in practice, imagine that you want to write a library that provides implementation for sorting algorithms (yes, that is pretty classic), such as bubble so
\hich\af4\dbch\af31505\loch\f4 
rt, shell short, shake sort, quick sort, and others. The catch is that you don't want to embed the sorting logic (which of two elements goes first in an array) into your functions, making your library more general to use. You want the client to be respons
\hich\af4\dbch\af31505\loch\f4 i\hich\af4\dbch\af31505\loch\f4 ble to that kind of logic. Or, you want it to be used for various data types (ints, floats, strings, and so on). So, how do you do it? You use function pointers and make callbacks.
\par \hich\af4\dbch\af31505\loch\f4 A callback can be used for notifications. For instance, you need to set a t\hich\af4\dbch\af31505\loch\f4 
imer in your application. Each time the timer expires, your application must be notified. But, the implementer of the time'rs mechanism doesn't know anything about your application. It only wants a pointer to a function with a given prototype, and in usin
\hich\af4\dbch\af31505\loch\f4 g\hich\af4\dbch\af31505\loch\f4 
 that pointer it makes a callback, notifying your application about the event that has occurred. Indeed, the SetTimer() WinAPI uses a callback function to notify that the timer has expired (and, in case there is no callback function provided, it posts a m
\hich\af4\dbch\af31505\loch\f4 e\hich\af4\dbch\af31505\loch\f4 ssage to the application's queue).
\par \hich\af4\dbch\af31505\loch\f4 Another example from WinAPI functions that use callback mechanism is EnumWindow(), which enumerates all the top-level windows on the screen. EnumWindow() iterates over the top-level windows, calling an application-provide
\hich\af4\dbch\af31505\loch\f4 
d function for each window, passing the handler of the window. If the callee returns a value, the iteration continues; otherwise, it stops. EnumWindows() just doesn't care where the callee is and what it does with the handler it passes over. It is only in
\hich\af4\dbch\af31505\loch\f4 t\hich\af4\dbch\af31505\loch\f4 erested in the return value, because based on that it continues its execution or not.
\par \hich\af4\dbch\af31505\loch\f4 However, callback functions are inherited from C. Thus, in C++, they should be only used for interfacing C code and existing callback interfaces. Except for these situati\hich\af4\dbch\af31505\loch\f4 
ons, you should use virtual methods or functions, not callback functions.
\par \hich\af4\dbch\af31505\loch\f4 INTERFACE
\par \hich\af4\dbch\af31505\loch\f4 In C++, an interface is written as an abstract base class that has only pure virtual functions.
\par \hich\af4\dbch\af31505\loch\f4 Interfaces may inherit from other interfaces. Inheritance works just like si\hich\af4\dbch\af31505\loch\f4 ngle inheritance in C++. Multiple inheritance is not allowed with interfaces. 
\par 
\par \hich\af4\dbch\af31505\loch\f4 C doesn't have interfaces like Java does. In fact, it doesn't even have classes. The closes thing it has to interfaces might be a pointer to a function, which could point to on\hich\af4\dbch\af31505\loch\f4 
e of several different functions without the caller having to know which one exactly. 
\par \hich\af4\dbch\af31505\loch\f4 Answer 
\par \hich\af4\dbch\af31505\loch\f4 C does not have interfaces or classes. However it's quite easy to simulate interfaces and classes in C. Before I get into doing that, let me explain what interfa\hich\af4\dbch\af31505\loch\f4 
ces are and how it's done in C++, which supports multiple inheritance which is much more powerful then interface inheritance. }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f
\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
Interface inheritance is basically the same thing as multiple inheritance. In interface inheritance, the interfaces are classes that cannot have method implementations and variables. They may only have function prototypes. You are only allowed to inherit
\hich\af4\dbch\af31505\loch\f4  from one full blown class as a child in the interface inheritance model. }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{
\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
However, in multiple inheritance (which C++ supports), you're allowed to inherit from as many full classes as you want. This allows you to make those full blown classes as slim as \hich\af4\dbch\af31505\loch\f4 
a bunch of pure virtual functions (interface) or as full classes with method implementations and variables. For example, to implement something similar to a comparable interface in C++: }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 class Comparable }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \{\hich\af4\dbch\af31505\loch\f4  }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 public: 
\par \hich\af4\dbch\af31505\loch\f4 virtual int compareTo(void* x) = 0; 
\par \}\hich\af4\dbch\af31505\loch\f4 ; }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 class Foobar: public Comparable }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \{
\hich\af4\dbch\af31505\loch\f4  }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
public: 
\par \hich\af4\dbch\af31505\loch\f4 virtual int compareTo(void* x) \{ /*compare implementation here */ \} }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 //rest of class 
\par \}\hich\af4\dbch\af31505\loch\f4 ; }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 That would be pretty much the same thing as interface inheritance in Java. Any function that takes a Comparable po\hich\af4\dbch\af31505\loch\f4 
inter or reference will also be able to take Foobar. In C, you'd have to use function pointers to achieve the same effect. Basically in your structure, you'd have to have a pseudo v-table... a bunch of function pointers: }{\rtlch\fcs1 \af15\afs18 
\ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 struct Comparable }{\rtlch\fcs1 \af15\afs18 
\ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \{\hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 int (*compa\hich\af4\dbch\af31505\loch\f4 reTo)(void* x) = 0;
\par \}\hich\af4\dbch\af31505\loch\f4 ; }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 struct Foobar }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \{
\hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 int (*compareTo)(void* x); }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 //rest of structure }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 int i; }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 int j; }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 int k; 
\par \}\hich\af4\dbch\af31505\loch\f4 ; }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 void InitFoobar(struct Foobar* this) }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \{\hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 this->compareTo = /*compare to function*/; }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 //rest of the initialization }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 this->i = 0; }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 this->\hich\af4\dbch\af31505\loch\f4 j = 1; }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 this->k = 2; 
\par \}\hich\af4\dbch\af31505\loch\f4  }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 
If you want to pass Foobar into a function that takes a Comparable pointer, just cast the Foobar pointer to a Comparable pointer. The C standard guarantees structures Comparable and Foobar will be laid out exactly the same as long
\hich\af4\dbch\af31505\loch\f4 
 as the variables are declared in the same order. So the first 4 bytes, the function pointer, will be at the exact same offsets in both Comparable and Foobar. However, after the first 4 bytes, Foobar will have extra 12 bytes of stuff where Comparable will
\hich\af4\dbch\af31505\loch\f4  \hich\af4\dbch\af31505\loch\f4 not. This memory arrangement lets you treat Foobar exactly like a Comparable. This is also how single inheritance is normally implemented in most languages. 
\par 
\par 
\par 
\par \ltrrow}\trowd \irow0\irowband0\ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblrsid11607506\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb
\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth8748\clshdrawnil \cellx8640\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl
\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 All inheritance\cell }\pard \ltrpar
\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid11607506 \trowd \irow0\irowband0\ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblrsid11607506\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth8748\clshdrawnil \cellx8640\row \ltrrow}\trowd \irow1\irowband1\ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl
\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2268\clshdrawnil \cellx2160\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 
\clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2160\clshdrawnil \cellx4320\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth2160\clshdrawnil \cellx6480\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2160\clshdrawnil \cellx8640
\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
Base access specifier\cell \hich\af4\dbch\af31505\loch\f4 Public\cell \hich\af4\dbch\af31505\loch\f4 Private\cell \hich\af4\dbch\af31505\loch\f4 Protected\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow1\irowband1\ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth2268\clshdrawnil \cellx2160\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2160\clshdrawnil \cellx4320
\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2160\clshdrawnil \cellx6480\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl
\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2160\clshdrawnil \cellx8640\row \ltrrow}\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl
\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Public\cell \hich\af4\dbch\af31505\loch\f4 Public
\cell \hich\af4\dbch\af31505\loch\f4 Private\cell \hich\af4\dbch\af31505\loch\f4 Protecte\hich\af4\dbch\af31505\loch\f4 d\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {
\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow2\irowband2\ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl
\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2268\clshdrawnil \cellx2160\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 
\clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2160\clshdrawnil \cellx4320\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth2160\clshdrawnil \cellx6480\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2160\clshdrawnil \cellx8640
\row \ltrrow}\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 Private\cell \hich\af4\dbch\af31505\loch\f4 Not Inherited\cell \hich\af4\dbch\af31505\loch\f4 Not Inherited\cell \hich\af4\dbch\af31505\loch\f4 Not Inherited\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow3\irowband3\ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth2268\clshdrawnil \cellx2160\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2160\clshdrawnil \cellx4320
\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2160\clshdrawnil \cellx6480\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl
\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2160\clshdrawnil \cellx8640\row \ltrrow}\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl
\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Protected\cell \hich\af4\dbch\af31505\loch\f4 
Protected\cell \hich\af4\dbch\af31505\loch\f4 Private\cell \hich\af4\dbch\af31505\loch\f4 Protected\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow4\irowband4\lastrow \ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 
\clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2268\clshdrawnil \cellx2160\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr
\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2160\clshdrawnil \cellx4320\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth2160\clshdrawnil \cellx6480\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2160\clshdrawnil \cellx8640
\row }\pard \ltrpar\ql \li0\ri0\nowidctlpar\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
Private inheritance
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Some of the exceptions to be noted in C++ inheritance are as follows.
\par \hich\af4\dbch\af31505\loch\f4 The constructor and destructor of a base class are not inherited 
\par \hich\af4\dbch\af31505\loch\f4 The a\hich\af4\dbch\af31505\loch\f4 ssignment operator is not inherited 
\par \hich\af4\dbch\af31505\loch\f4 The  HYPERLINK "http://www.codersource.net/cpp_tutorial_friend.html" friend functions and friend classes of the base class are also not inherited. 
\par 
\par \hich\af4\dbch\af31505\loch\f4 If you feel comfortable answering these questions, then rest assured t\hich\af4\dbch\af31505\loch\f4 
hat your chances of impressing any interviewer are very high. Be prepared to know basic computer science concepts such as data structures, search and sort algorithms, basic database concepts, etc. The client's needs will determine what particular branch o
\hich\af4\dbch\af31505\loch\f4 f\hich\af4\dbch\af31505\loch\f4 
 computer science you have to be familiar with, but you should always be ready to implement the stack, the queue, and the linked list data structures with either C or C++ programming languages. And know how to write your own version of strcpy (string copy
\hich\af4\dbch\af31505\loch\f4 )\hich\af4\dbch\af31505\loch\f4  in C programming language since very often they ask you to do that. 
\par -------------------------------------------------------------------------------------------------------------
\par \hich\af4\dbch\af31505\loch\f4 1. Does a class that contains objects of another class gain special access t\hich\af4\dbch\af31505\loch\f4 o the member variables of those objects?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
A) No, a class that aggregates other objects does not have special access to those object\hich\f4 \rquote \loch\f4 s member data and functions.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 
\loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 2. Does an object which is a member of a parent class have access to the parent\hich\f4 \rquote \loch\f4 
s variables or methods?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
A) No, aggregated members don\hich\f4 \rquote \loch\f4 t\hich\af4\dbch\af31505\loch\f4 \hich\f4 
 have any special access to the members of the class which they are aggregated. The only ability they have to access the instance that aggregates them is to have a copy of the owner class \'93\loch\f4 \hich\f4 this\'94\loch\f4 
 pointer passed to them at creation or at some point thereaft\hich\af4\dbch\af31505\loch\f4 e\hich\af4\dbch\af31505\loch\f4 r. If this is done, they have the same normal access to that object as they would to any other.}{\rtlch\fcs1 \af15\afs18 
\ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 3. What is aggregation?}{\rtlch\fcs1 \af15\afs18 
\ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
A) Aggregation is declaring an object as a member of another class contained by that class, this is also referred to as has-a.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f
\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 4. What is delegation?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{
\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 A) Delegation is using the members of an aggregated class to perform functions \hich\af4\dbch\af31505\loch\f4 for the containing class.}{\rtlch\fcs1 \af15\afs18 
\ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
5. What happens to the public functions and members of a base class when inherited into a derived class using private inheritance?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232
\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 A) All the functions and members are then treated as if they were declared to be private, regardle\hich\af4\dbch\af31505\loch\f4 
ss of their actual access level in the base.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 \hich\f4 6. Is private inheritance \'93\loch\f4 \hich\f4 Interface Inheritance\'94\loch\f4 \hich\f4  or \'93\loch\f4 \hich\f4 Implementation Inheritance\'94\loch\f4 ? Why?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
A) Implementation Inheritance, reason for this is that the class is invisible and therefore that class can\hich\f4 \rquote \loch\f4 t be accessed d\hich\af4\dbch\af31505\loch\f4 irectly, only by the derived class.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 7. What\hich\f4 \rquote \loch\f4 
s one method of making private members and functions available to specific classes, without exposing them to all clients?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{
\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 A) One way is to declare that certain class to be a friend. This extends the interface of\hich\af4\dbch\af31505\loch\f4  your class to include the friend class.}{
\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
8. Is friendship inherited?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
A) No, friendship is not inheritable.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 9. Is friendship commutative? That is, does making class A a friend of class B automatically make the opposite true?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 
\loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 A) No, not automatically, thou\hich\af4\dbch\af31505\loch\f4 
gh you can make Class A a friend of class B and class B a friend of class A by explicitly writing it in each class it\hich\f4 \rquote \loch\f4 s declaration.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 
\loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 \hich\f4 10. Does \'93\loch\f4 \hich\f4 friendship\'94\loch\f4  reduce encapsulation? Why or why not?}{
\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
A) No, because the friend declaration makes the declared frien\hich\af4\dbch\af31505\loch\f4 d a part of the class interface and does not have to undermine encapsulation.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 \hich\f4 11. Does \'93\loch\f4 \hich\f4 friendship\'94
\loch\f4  reduce modality? Why or why not?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 A) Yes, reason is that using friend implies a commitment to parallel maintenance of both classes, which could reduce modul\hich\af4\dbch\af31505\loch\f4 arity.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
12. Do you have to declare an entire class a friend? What other options are there?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 A) No, you can declare any function, regardless of whether it is a member function of another class, to be a friend.
\par 
\par \hich\af4\dbch\af31505\loch\f4 13. VTABLE is static or dynamic?
\par \hich\af4\dbch\af31505\loch\f4 A) It\hich\f4 \rquote \loch\f4 s static\hich\af4\dbch\af31505\loch\f4 , as each class has its separate VATBLE.
\par 
\par \hich\af4\dbch\af31505\loch\f4 14. What is conversion constructor ?
\par \hich\af4\dbch\af31505\loch\f4 A) A constructor that can be called with a single argument is used for conversions from the type of the argument to the class type. Such a constructor is called a conversion con\hich\af4\dbch\af31505\loch\f4 structor.
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 14) What is problem with Shared Memory?
\par 
\par \hich\af4\dbch\af31505\loch\f4 5) WAP for  Factorial number, Prime number, Fibonacci number, Linked List
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 COM Introduction 
\par \hich\af4\dbch\af31505\loch\f4 [Ref - http://www.codeproject.com/KB/COM/COM_InterviewQuestions.aspx]
\par \hich\af4\dbch\af31505\loch\f4 What is IUnknown? What methods \hich\af4\dbch\af31505\loch\f4 
are provided by IUnknown? It is a generally good idea to have an answer for this question if you claim you know COM in your resume. Otherwise, you may consider your interview failed at this point. IUnknown is the base interface of COM. All other interface
\hich\af4\dbch\af31505\loch\f4 s\hich\af4\dbch\af31505\loch\f4  must derive directly or indirectly from IUnknown. There are three methods in that interface: AddRef, Release and QueryInterface. 
\par \hich\af4\dbch\af31505\loch\f4 What are the purposes of AddRef, Release and QueryInterface functions? AddRef increments reference count of the object, Relea\hich\af4\dbch\af31505\loch\f4 
se decrements reference counter of the object and QueryInterface obtains a pointer to the requested interface. 
\par \hich\af4\dbch\af31505\loch\f4 What should QueryInterface functions do if requested object was not found? Return E_NOINTERFACE and nullify its out parameter. 
\par \hich\af4\dbch\af31505\loch\f4 How can would yo\hich\af4\dbch\af31505\loch\f4 
u create an instance of the object in COM? Well, it all depends on your project. Start your answer from CoCreateInstance or CoCreateInstanceEx, explain the difference between them. If interviewer is still not satisfied, youll have to explain the whole kit
\hich\af4\dbch\af31505\loch\f4 c\hich\af4\dbch\af31505\loch\f4 
hen behind the scenes, including a difference between local server and inproc server, meaning and mechanism of class factory, etc. You may also mention other methods of object creation like CoGetInstanceFromFile, but discussion will likely turn to discuss
\hich\af4\dbch\af31505\loch\f4 i\hich\af4\dbch\af31505\loch\f4 on of monikers then. 
\par \hich\af4\dbch\af31505\loch\f4 
What happens when client calls CoCreateInstance? Again, all depends on the level of detail and expertise of interviewer. Start with simple explanation of class object and class factory mechanism. Further details would depend on a spec
\hich\af4\dbch\af31505\loch\f4 ific situation. 
\par \hich\af4\dbch\af31505\loch\f4 
What the limitations of CoCreateInstance? Well, the major problems with CoCreateInstance is that it is only able to create one object and only on local system. To create a remote object or to get several objects, based on single CLSID, at 
\hich\af4\dbch\af31505\loch\f4 the same time, one should use CoCreateInstanceEx. 
\par \hich\af4\dbch\af31505\loch\f4 What is aggregation? How can we get an interface of the aggregated object? Aggregation is the reuse mechanism, in which the outer object exposes interfaces from the inner object as if they were implemented
\hich\af4\dbch\af31505\loch\f4 
 on the outer object itself. This is useful when the outer object would always delegate every call to one of its interfaces to the same interface in the inner object. Aggregation is actually a specialized case of containment/delegation, and is available a
\hich\af4\dbch\af31505\loch\f4 s\hich\af4\dbch\af31505\loch\f4 
 a convenience to avoid extra implementation overhead in the outer object in these cases. We can get a pointer to the inner interface, calling QueryInterface of the outer object with IID of the inner interface. 
\par \hich\af4\dbch\af31505\loch\f4 C is aggregated by B, which in turn aggregat\hich\af4\dbch\af31505\loch\f4 
ed by A. Our client requested C. What will happen? QueryInterface to A will delegate request to B which, in turn, will delegate request for the interface to C. This pointer will be returned to the client. 
\par \hich\af4\dbch\af31505\loch\f4 What is a moniker ? An object that implements the \hich\af4\dbch\af31505\loch\f4 
IMoniker interface. A moniker acts as a name that uniquely identifies a COM object. In the same way that a path identifies a file in the file system, a moniker identifies a COM object in the directory namespace. 
\par \hich\af4\dbch\af31505\loch\f4 Whats the difference, if any, between OLE a\hich\af4\dbch\af31505\loch\f4 
nd COM? OLE is build on top of COM. The question is not strict, because OLE was built over COM for years, while COM as a technology was presented by Microsoft a few years ago. You may mention also that COM is a specification, while OLE is a particular imp
\hich\af4\dbch\af31505\loch\f4 l\hich\af4\dbch\af31505\loch\f4 ementation of this specification, which in todays world is not exactly true as well, because what people call COM today is likely implementation of COM spec by Microsoft. 
\par \hich\af4\dbch\af31505\loch\f4 Whats the difference between COM and DCOM? Again, the question does not require stri\hich\af4\dbch\af31505\loch\f4 
ct answer. Any DCOM object is yet a COM object (DCOM extends COM) and any COM object may participate in DCOM transactions. DCOM introduced several improvements/optimizations for distributed environment, such as MULTI_QI (multiple QueryInterface()), securi
\hich\af4\dbch\af31505\loch\f4 t\hich\af4\dbch\af31505\loch\f4 
y contexts etc. DCOM demonstrated importance of surrogate process (you cannot run in-proc server on a remote machine. You need a surrogate process to do that.) DCOM introduced a load balancing. 
\par \hich\af4\dbch\af31505\loch\f4 What is a dual interface? Dual interface is one that supports\hich\af4\dbch\af31505\loch\f4 
 both - IDispatch interface and vtbl-based interface. Therefore, it might be used in scripting environment like VBScript and yet to use power and speed of vtbl-based interface for non-scripting environment. Discussion then may easily transform into analyz
\hich\af4\dbch\af31505\loch\f4 i\hich\af4\dbch\af31505\loch\f4 ng of dual interface problems - be prepared to this twist. 
\par \hich\af4\dbch\af31505\loch\f4 Can you have two dual interfaces in one class? Yes. You may have two dual interfaces in one class, but only one of them may be default. The bottom line is that you cannot work with two dual interf
\hich\af4\dbch\af31505\loch\f4 aces at the same time due to nature of dual interface! To support two dual interfaces in VB you would write something like:
\par \hich\af4\dbch\af31505\loch\f4  INCLUDEPICTURE "http://www.codeproject.com/images/minus.gif" \\* MERGEFORMATINET Collapse INCLUDEPICTURE "http://www.codeproject.com\hich\af4\dbch\af31505\loch\f4 /images/copy_16.png" \\
* MERGEFORMATINET  HYPERLINK "http://www.codeproject.com/KB/COM/COM_InterviewQuestions.aspx"  Copy Code
\par \hich\af4\dbch\af31505\loch\f4     dim d1 as IDualInterface1
\par \hich\af4\dbch\af31505\loch\f4     dim d2 as IDualInterface2
\par \hich\af4\dbch\af31505\loch\f4     set d1 = new MyClassWithTwoDuals
\par \hich\af4\dbch\af31505\loch\f4     set d2 = d1
\par \hich\af4\dbch\af31505\loch\f4     
\par \hich\af4\dbch\af31505\loch\f4 In ATLs clas\hich\af4\dbch\af31505\loch\f4 s you would have to use macro COM_INTERFACE_ENTRY2(IDispatch,}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 
\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 IDualInterface1), to distinguish between different dual interfaces. 
\par \hich\af4\dbch\af31505\loch\f4 What is marshalling by value? Some objects can essentially be considered static: regardless of which methods are called, the \hich\af4\dbch\af31505\loch\f4 
state of the object does not change. Instead of accessing such an object remotely, it is possible to copy the static state of the object and create a new object with the same state information on the caller side. The caller wont be able to notice the diff
\hich\af4\dbch\af31505\loch\f4 e\hich\af4\dbch\af31505\loch\f4 rence, but calls will be more efficient because they do not involve network round trips. This is called marshaling by value. 
\par \hich\af4\dbch\af31505\loch\f4 What is a multi-threaded apartment (MTA)? Single-threaded apartment (STA)? This is pretty difficult question to describe shortly. \hich\af4\dbch\af31505\loch\f4 
Anyway, apartments were introduced by Microsoft in NT 3.51 and late Windows 95 to isolate the so called single-threaded apartment. The reason to create an object in apartment is thread-safety. COM is responsible synchronize access to the object even if th
\hich\af4\dbch\af31505\loch\f4 e\hich\af4\dbch\af31505\loch\f4 
 object inside of the apartment is not thread-safe. Multithreaded apartments (MTA, or free threading apartment) were introduced in NT 4.0. Idea behind MTA is that COM is not responsible to synchronize object calls between threads. In MTA the developer is 
\hich\af4\dbch\af31505\loch\f4 r\hich\af4\dbch\af31505\loch\f4 esponsible for that. See Professional DCOM Programming of Dr. Grimes et al. or Essential COM of Don Box for the further discussion on this topic. 
\par \hich\af4\dbch\af31505\loch\f4 Lets assume we have object B and aggregated object C (in-proc server), created by B. Can you access any inter\hich\af4\dbch\af31505\loch\f4 
face of B from C? Whats the difference between aggregated and contained objects? Yes, you can. This is fundamental postulate of COM: If you can get there from here, you can get there from anywhere, i.e. QIing for IUnknown you may proceed and to get a poin
\hich\af4\dbch\af31505\loch\f4 t\hich\af4\dbch\af31505\loch\f4 
er to any other interface, supported by the object. Aggregated object exposes its interface directly, without visible intervention of the object container. Contained object is created within the object container and its interfaces might be altered or filt
\hich\af4\dbch\af31505\loch\f4 e\hich\af4\dbch\af31505\loch\f4 red by the object container. 
\par \hich\af4\dbch\af31505\loch\f4 
What is ROT ? GIT ? Count pros and cons of both. By definition, running object table (ROT) is a globally accessible table on each computer that keeps track of all COM objects in the running state that can be identified by a mo
\hich\af4\dbch\af31505\loch\f4 
niker. Moniker providers register an object in the table, which increments the objects reference count. Before the object can be destroyed, its moniker must be released from the table. Global Interface Table (GIT) allows any apartment (either single- or m
\hich\af4\dbch\af31505\loch\f4 u\hich\af4\dbch\af31505\loch\f4 lti-threaded) in a process to get access to an interface implemented on an object in any other apartment in the process. 
\par \hich\af4\dbch\af31505\loch\f4 If you have an object with two interfaces, can you custom marshal one of them? No! The decision to use custom marshaling is an all-or-\hich\af4\dbch\af31505\loch\f4 
nothing decision; an object has to custom marshal all its interfaces or none of them. 
\par \hich\af4\dbch\af31505\loch\f4 Is there a way to register in-proc server without regsvr32.exe? Yes. Call DllRegisterServer() from the client. Do not forget to call DLLUnregisterServer() from the same \hich\af4\dbch\af31505\loch\f4 
client. You may also use Registrar object for the same purpose or use direct manipulation of the windows registry. 
\par \hich\af4\dbch\af31505\loch\f4 What is VARIANT? Why and where would you use it? VARIANT is a huge union containing automation type. This allows easy conversion of one auto\hich\af4\dbch\af31505\loch\f4 
mation type to another. The biggest disadvantage of VARIANT is size of the union. 
\par \hich\af4\dbch\af31505\loch\f4 How can you guarantee that only remote server is ever created by a client? Create an object (call CoCreateObjectEx()) with CLSCTX_REMOTE_SERVER flag. 
\par \hich\af4\dbch\af31505\loch\f4 What is __declspec(nov\hich\af4\dbch\af31505\loch\f4 
table)? Why would you need this?  HYPERLINK "http://msdn.microsoft.com/library/en-us/vccelng/htm/msmod_17.asp" __declspec(novtable) is a Microsofts compiler optimization. The main idea of this optimization is to strip the vtable initialization code from a
\hich\af4\dbch\af31505\loch\f4 b\hich\af4\dbch\af31505\loch\f4 stract class (for abstract class the vtable is empty, while it is initialized in contructor) 
\par \hich\af4\dbch\af31505\loch\f4 What is an IDL? IDL stands for Interface Definition Language. IDL is the language to describe COM interfaces. 
\par \hich\af4\dbch\af31505\loch\f4 What is In-proc? In-proc is in-process COM object, \hich\af4\dbch\af31505\loch\f4 
i.e. COM object that implemented as DLL and supposed to be hosted by a container. When you have to instantiate the in-proc object remotely, you may use DLLHost.exe application [Surrogate Process] that was design specially for this purpose. 
\par \hich\af4\dbch\af31505\loch\f4 What is OLE? OL\hich\af4\dbch\af31505\loch\f4 E is an object and embedding first implementation of COM spec available from MS before COM was officially named COM. 
\par \hich\af4\dbch\af31505\loch\f4 Give examples of OLE usage. The most famous examples are probably drag and drop and structured storage implementations. 
\par \hich\af4\dbch\af31505\loch\f4 What are 2 storag\hich\af4\dbch\af31505\loch\f4 e types for composite document? Storage and Stream. 
\par \hich\af4\dbch\af31505\loch\f4 Is .doc document a compound document? Is it a structured storage? Compound document is a document that contains information about other documents hosted in this document. All office documents _may_ be co
\hich\af4\dbch\af31505\loch\f4 mpound documents, but may be not. Word documents from version 6.0 and up are stored as structured storage. 
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 C++ References
\par 
\par \hich\af4\dbch\af31505\loch\f4 C++ Programming Language, by Bjarne Stroustrup (Addison Wesley, 1997). $44.95. 
\par 
\par \hich\af4\dbch\af31505\loch\f4 C++: The Core Language, by Gregory Satir, Doug Br\hich\af4\dbch\af31505\loch\f4 own, and Steven Qualline (O'Reilly & Associates, 1995). $24.95. 
\par 
\par \hich\af4\dbch\af31505\loch\f4 C++ FAQs, by Marshall P. Cline, Greg A. Lomow, and Mike Girou (Addison-Wesley, 1998). $39.95 
\par 
\par \hich\af4\dbch\af31505\loch\f4 EffectiveC++: 50 Specific Ways to Improve Your Programs and Designs (2nd edition), by Scott Mey\hich\af4\dbch\af31505\loch\f4 ers (Addison-Wesley, 1997). $37.95. 
\par 
\par \hich\af4\dbch\af31505\loch\f4 More Effective C++: 35 New Ways to Improve Your Programs and Designs, by Scott Meyers (Addison-Wesley, 1995). $39.95 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Newsgroups: 
\par 
\par \hich\af4\dbch\af31505\loch\f4 comp.lang.c++ 
\par 
\par \hich\af4\dbch\af31505\loch\f4 comp.lang.c++.moderated 
\par 
\par \hich\af4\dbch\af31505\loch\f4 ***************************************
\par \hich\af4\dbch\af31505\loch\f4 Con\hich\af4\dbch\af31505\loch\f4 
structors and Copy Constructor: Constructors are special type of member function in a class which has the same name as the class itself. Constructor with no parameter is called default constructor. Any number of constructors can be declared and overloaded
.\hich\af4\dbch\af31505\loch\f4 
 Copy Constructor is a typical overloaded constructor that can accept a single argument of reference to same class type. The significance of this specific constructor is pretty high in the OO design aspect. There are several FAQs on this topic some of whi
\hich\af4\dbch\af31505\loch\f4 c\hich\af4\dbch\af31505\loch\f4 h are described and explained below.
\par \~
\par \hich\af4\dbch\af31505\loch\f4 FAQS:
\par \~
\par \hich\af4\dbch\af31505\loch\f4 1.\~\~\~\~\~ Does a class provide default Copy Constructor?
\par \hich\af4\dbch\af31505\loch\f4 2.\~\~\~\~\~ What does default Copy Constructor do?
\par \hich\af4\dbch\af31505\loch\f4 3.\~\~\~\~\~ Can a program have a virtual constructor?
\par \hich\af4\dbch\af31505\loch\f4 4.\~\~\~\~\~ When does a programmer need to implement his own \hich\af4\dbch\af31505\loch\f4 copy constructor?
\par \hich\af4\dbch\af31505\loch\f4 5.\~\~\~\~\~ Can a copy constructor accept an object of the same class, instead of reference of the object?
\par \hich\af4\dbch\af31505\loch\f4 6.\~\~\~\~\~ What is the return parameter of a constructor and why?
\par \hich\af4\dbch\af31505\loch\f4 7.\~\~\~\~\~\hich\f4  Are the \'93\loch\f4 \hich\f4 default constructor\'94\loch\f4 \hich\f4  and \'93\loch\f4 constructor with default para\hich\af4\dbch\af31505\loch\f4 \hich\f4 meter\'94\loch\f4  same?
\par \~
\par \hich\af4\dbch\af31505\loch\f4 Resolutions:\~
\par \hich\af4\dbch\af31505\loch\f4 1.\~\~\~\~ Does a class provide default Copy Constructor?
\par \hich\af4\dbch\af31505\loch\f4 Yes! The default copy constructor is being provided automatically by the compiler if not implemented separately. In this, it puts the code for coping the data members and ot\hich\af4\dbch\af31505\loch\f4 
her variables that stay in stack. If something is being created by malloc or new in the heap, those are not being copied by the default copy constructor provide by the compiler.
\par \~\hich\af4\dbch\af31505\loch\f4 2.\~\~\~\~ What does a default Copy Constructor do?\~
\par \hich\af4\dbch\af31505\loch\f4 A default copy constructor i\hich\af4\dbch\af31505\loch\f4 
s being provided by the compiler, when an attempt to copy an existing object is made. In this case the control goes to the default copy constructor. It generates a new object, and makes the values of data members of the new object which are in the stack, 
\hich\af4\dbch\af31505\loch\f4 s\hich\af4\dbch\af31505\loch\f4 ame as the parent object. It doesn\hich\f4 \rquote \loch\f4 t copy the variables that are created in the heap. Simply speaking, a compiler supplied default copy constructor doesn\hich\f4 
\rquote \loch\f4 t take care of the things in an object, that are being created using malloc/calloc or new.\~
\par \hich\af4\dbch\af31505\loch\f4 3.\~\~\~\~ Can\hich\af4\dbch\af31505\loch\f4  a program have a virtual constructor?\~
\par \hich\af4\dbch\af31505\loch\f4 Generally we don\hich\f4 \rquote \loch\f4 
t need an overridable constructor. So constructor should not be declared as virtual. But in a class, we can make a static method, which will call the private/protected constructor and create an objec\hich\af4\dbch\af31505\loch\f4 
t. In that case the constructor is called as virtual constructor.
\par \~\hich\af4\dbch\af31505\loch\f4 4.\~\~\~\~ When does a programmer need to implement his own copy constructor?\~
\par \hich\af4\dbch\af31505\loch\f4 Though compiler automatically provides the default copy constructor, sometime a programmer needs to implement his \hich\af4\dbch\af31505\loch\f4 own copy constructor. We can take up a case here:
\par \hich\af4\dbch\af31505\loch\f4 In the default constructor some memory allocation has been done for few data members and hence those will be created in the heap. In the destructor corresponding de-allocation code is there. Now if an attem
\hich\af4\dbch\af31505\loch\f4 pt to copy an object is made, it won\hich\f4 \rquote \loch\f4 t call the default constructor but it will call the default copy constructor which will copy the data member variable from stack and copy the pointers but won
\hich\f4 \rquote \loch\f4 t allocate any new memory space for the new copied object. \hich\af4\dbch\af31505\loch\f4 S\hich\af4\dbch\af31505\loch\f4 
o same pointers will exist in both the parent and copied object. This will not only create a great ambiguity but runtime error will occur when attempts will be made to delete both the objects. First object will get deleted properly. When it will try to de
\hich\af4\dbch\af31505\loch\f4 l\hich\af4\dbch\af31505\loch\f4 ete the other object, the common pointer won\hich\f4 \rquote \loch\f4 
t exist and runtime error will come. Even if user stops the application it will try to delete all the objects in the memory and runtime error will occur. In a single word, copy constructor is needed to be imple\hich\af4\dbch\af31505\loch\f4 m
\hich\af4\dbch\af31505\loch\f4 
ented independently, when the parent object has some allocated memory in heap for some of its data member and that gets deleted by destructor. Copy constructor should consist that much of code for memory allocation for the newly created object.\~
\par \hich\af4\dbch\af31505\loch\f4 Apart from\hich\af4\dbch\af31505\loch\f4  this, programmer can implement his own copy constructor to copy any other things, which he wants specifically.\~
\par \hich\af4\dbch\af31505\loch\f4 5.\~\~\~Can a copy constructor accept an object of the same class as parameter, instead of reference of the object?\~
\par \hich\af4\dbch\af31505\loch\f4 No. It is specified in the de\hich\af4\dbch\af31505\loch\f4 
finition of the copy constructor itself. It should generate an error if a programmer specifies a copy constructor with a first argument that is an object and not a reference.
\par \hich\af4\dbch\af31505\loch\f4 Logically thinking, if we can consider the same as copy constructor also, big con\hich\af4\dbch\af31505\loch\f4 
fusion will come. If we pass an object as a function parameter, by value, it will get copied first and then be passed to the function. At the time of getting copied it should call the copy constructor. So in this case, if we consider the above described c
\hich\af4\dbch\af31505\loch\f4 o\hich\af4\dbch\af31505\loch\f4 
nstructor as copy constructor, at the very beginning of the function call, it wil attempt to copy the object and hence again call the same function and hence will go towards an infinite loop. This will probably be ended up with an unexpected stack overflo
\hich\af4\dbch\af31505\loch\f4 w.
\par \hich\af4\dbch\af31505\loch\f4 It will give compiler error if an object of the same class is being passed to a constructor, but it doesn\hich\f4 \rquote \loch\f4 
t give error if more than one different objects are being passed to the constructor . In this case it doesn\hich\f4 \rquote \loch\f4 t treat it as copy constructor, but a no\hich\af4\dbch\af31505\loch\f4 rmal overloaded constructor.\~
\par \hich\af4\dbch\af31505\loch\f4 6.\~\~\~\~ What is the return parameter of a constructor and why?\~
\par \hich\af4\dbch\af31505\loch\f4 Constructor in never being called directly. It is being called automatically by the compiler when an object in being created (or copied). Hence it can\hich\f4 \rquote \loch\f4 t return any\hich\af4\dbch\af31505\loch\f4 
 parameter. Logically thinking, if it would have been made to return a parameter, how do we put the code to create an object?\~
\par \hich\af4\dbch\af31505\loch\f4 7.\~\~\~\~\hich\f4  Are the \'93\loch\f4 \hich\f4 default constructor\'94\loch\f4 \hich\f4  and \'93\loch\f4 \hich\f4 constructor with default parameter\'94\loch\f4  same?\~
\par \hich\af4\dbch\af31505\loch\f4 Default constructor is a constructor, which \hich\af4\dbch\af31505\loch\f4 \hich\f4 
can be called with no argument. So a constructor with all the parameters as default argument can be called as default constructor. A constructor with one or more default parameters (but not all the parameters) can be called \'93\loch\f4 
constructor with default param\hich\af4\dbch\af31505\loch\f4 e\hich\af4\dbch\af31505\loch\f4 \hich\f4 ter\'94\loch\f4  but that won\hich\f4 \rquote \loch\f4 t be the default constructor.
\par \hich\af4\dbch\af31505\loch\f4 If a constructor with no argument and a constructor with all default arguments are being implemented then object-creation will generate an ambiguity regarding which constructor is to be called.
\par \hich\af4\dbch\af31505\loch\f4 8. Give a real\hich\af4\dbch\af31505\loch\f4  time example of Singleton
\par \hich\af4\dbch\af31505\loch\f4 
A classic example of a true singleton is a logging service. Suppose we have an event-based logging service: Client objects request that text be logged by sending a message to the logging service. Other objects actually log the te
\hich\af4\dbch\af31505\loch\f4 xt somewhere (console, file, whatever) by listening to the logging service for these logging requests and handling them. First, notice that the logging service passes the classic test for being a singleton: 
\par \hich\af4\dbch\af31505\loch\f4 The requesters need a well-known object to which\hich\af4\dbch\af31505\loch\f4  to send requests to log. This means a global point of access. 
\par \hich\af4\dbch\af31505\loch\f4 Since the logging service is a single event source to which multiple listeners can register, there only needs to be one instance. 
\par 
\par \~
\par \~
\par \hich\af4\dbch\af31505\loch\f4 Destructor : Destructor function can be treated as the  \hich\af4\dbch\af31505\loch\f4 
inverse of constructor functions. They are called when objects are destroyed (de-allocated) or program exits from application. Designate a function as a class\hich\f4 \rquote \loch\f4 
s destructor by preceding the class name with a tilde (~). There are several FAQs that a program\hich\af4\dbch\af31505\loch\f4 m\hich\af4\dbch\af31505\loch\f4 er comes across, some of which are explained below:
\par \~
\par \~
\par \hich\af4\dbch\af31505\loch\f4 FAQs:
\par \~\hich\af4\dbch\af31505\loch\f4 1.\~\~\~\~\~ When and in what condition a destructor is called?
\par \hich\af4\dbch\af31505\loch\f4 2.\~\~\~\~\~ When does a programmer need a virtual destructor?
\par \hich\af4\dbch\af31505\loch\f4 3.\~\~\~\~\~ Does a destructor have some function parameter or return parameter?
\par \~\hich\af4\dbch\af31505\loch\f4 Resolutions:
\par \~\hich\af4\dbch\af31505\loch\f4 1.\~\~\~\~ When and in what condition a destructor is called?
\par \~\hich\af4\dbch\af31505\loch\f4 There is only one destructor exists for a class. There can be two condition when the destructor is called. When attempt is made to delete the object and when user closes the applicat\hich\af4\dbch\af31505\loch\f4 
ion. When the application is being closed, all the objects are being deleted first and destructor corresponding to all the objects are called.
\par \~\hich\af4\dbch\af31505\loch\f4 2.\~\~\~\~ When does a programmer need a virtual destructor?
\par \hich\af4\dbch\af31505\loch\f4 A good design should provide scope to override the dest\hich\af4\dbch\af31505\loch\f4 
ructors of all the classes. Destructor is the function that controls Pure virtual function and Abstract class: Pure virtual functions are the functions that are not being implemented in the class where it is being defined. An abstract class is a class tha
\hich\af4\dbch\af31505\loch\f4 t\hich\af4\dbch\af31505\loch\f4  contains one or more than one pure virtual functions.
\par \hich\af4\dbch\af31505\loch\f4 I\hich\f4 \rquote \loch\f4 ll soon come up with the following topics like:
\par \~
\par \hich\af4\dbch\af31505\loch\f4 1.\~\~\~\~\~ Multiple Inheritance
\par \hich\af4\dbch\af31505\loch\f4 2.\~\~\~\~\~ Vtable for Multiple inheritance.
\par \hich\af4\dbch\af31505\loch\f4 3.\~\~\~\~\~ Virtual base class
\par \hich\af4\dbch\af31505\loch\f4 4.\~\~\~\~\~ Static class methods and static class member\hich\af4\dbch\af31505\loch\f4 s.
\par \hich\af4\dbch\af31505\loch\f4 5.\~\~\~\~\~ Macros and inline functions
\par \hich\af4\dbch\af31505\loch\f4 #define INC_X(x) (++(x))
\par \hich\af4\dbch\af31505\loch\f4 inline void inc_x(int x) \{ ++x; \}
\par \hich\af4\dbch\af31505\loch\f4 inline void inc_x_ref(int &x) \{ ++x; \}
\par 
\par \hich\af4\dbch\af31505\loch\f4 int main()
\par \{
\par \hich\af4\dbch\af31505\loch\f4       int y = 2;
\par \hich\af4\dbch\af31505\loch\f4       INC_X(y); //y is now 3
\par \hich\af4\dbch\af31505\loch\f4       inc_x(y); //y is still 3
\par \hich\af4\dbch\af31505\loch\f4       inc_x_ref(y); //y is n\hich\af4\dbch\af31505\loch\f4 ow 4
\par \hich\af4\dbch\af31505\loch\f4       return 0;
\par \}
\par \hich\af4\dbch\af31505\loch\f4 
The difference is that the INC_X line will be converted by the preprocessor (before the compiler ever sees it) to "++(y)". The preprocessor does direct text substitution. The inc_x line, on the other hand, will be preserved as a  HYP
\hich\af4\dbch\af31505\loch\f4 ERLINK "http://www.gidforums.com/t-9164.html" \\
t "_top" function call, and will be inlined by the compiler. But since inc_x doesn't return its variable, it is useless and its argument will not be incremented. The fix for this, of course, is to use a refer\hich\af4\dbch\af31505\loch\f4 e
\hich\af4\dbch\af31505\loch\f4 nce, which is what inc_x_ref does. I hope this useless and convoluted code sample helps you understand the difference.
\par 
\par \hich\af4\dbch\af31505\loch\f4 6.\~\~\~\~\~ Private/protected constructor
\par \hich\af4\dbch\af31505\loch\f4 7.\~\~\~\~\~ Singleton class
\par \hich\af4\dbch\af31505\loch\f4 8.\~\~\~\~\~ Data type and storage specifier.
\par \hich\af4\dbch\af31505\loch\f4 9.\~\~\~\~\~ Volatile type qualifier
\par \hich\af4\dbch\af31505\loch\f4 10.\~\hich\af4\dbch\af31505\loch\f4  Malloc and calloc
\par \hich\af4\dbch\af31505\loch\f4 Difference Between Malloc and Calloc 
\par \hich\af4\dbch\af31505\loch\f4 There are two differences. First, is in the number of arguments. Malloc() takes a single argument (memory required in bytes), while calloc() needs two arguments (number of variables to allocate me
\hich\af4\dbch\af31505\loch\f4 mory, size in bytes of a single variable). Secondly, malloc() does not initialize the memory allocated, while calloc() initializes the allocated memory to ZERO. 
\par \hich\af4\dbch\af31505\loch\f4 Here are more opinions and answers from FAQ Farmers: 
\par \hich\af4\dbch\af31505\loch\f4 The difference between malloc and calloc\hich\af4\dbch\af31505\loch\f4  are: 1. malloc() allocates byte of memory, whereas calloc()allocates block of memory. 
\par \hich\af4\dbch\af31505\loch\f4 Calloc(m, n) is essentially equivalent to p = malloc(m * n); memset(p, 0, m * n); The zero fill is all-bits-zero, and does not therefore guarantee useful null pointer v\hich\af4\dbch\af31505\loch\f4 
alues (see section 5 of this list) or floating-point zero values. Free is properly used to free the memory allocated by calloc. 
\par \hich\af4\dbch\af31505\loch\f4 Malloc(s); returns a pointer for enough storage for an object of s bytes. Calloc(n,s); returns a pointer for enough contiguous \hich\af4\dbch\af31505\loch\f4 
storage for n objects, each of s bytes. The storage is all initialized to zeros. 
\par \hich\af4\dbch\af31505\loch\f4 Simply, malloc takes a single argument and allocates bytes of memory as per the argument taken during its invocation. Where as calloc takes two aguments, they are the number \hich\af4\dbch\af31505\loch\f4 
of variables to be created and the capacity of each vaiable (i.e. the bytes per variable). 
\par \hich\af4\dbch\af31505\loch\f4 I think calloc can allocate and initialize memory, if the asked memory is available contiguously where as malloc can allocate even if the memory is not available co\hich\af4\dbch\af31505\loch\f4 
ntiguously but available at different locations.
\par 
\par \hich\af4\dbch\af31505\loch\f4 To determine which synchronization class you should use, ask the following series of questions:
\par \hich\af4\dbch\af31505\loch\f4 Does the application have to wait for something to happen before it can access the resource (for example, data\hich\af4\dbch\af31505\loch\f4  must be received from a communications port before it can be written to a file)?

\par \hich\af4\dbch\af31505\loch\f4 If yes, use CEvent.
\par \hich\af4\dbch\af31505\loch\f4 Can more than one thread within the same application access this resource at one time (for example, your application allows up to five windows with views \hich\af4\dbch\af31505\loch\f4 on the same document)?
\par \hich\af4\dbch\af31505\loch\f4 If yes, use CSemaphore.
\par \hich\af4\dbch\af31505\loch\f4 Can more than one application use this resource (for example, the resource is in a DLL)?
\par \hich\af4\dbch\af31505\loch\f4 If yes, use CMutex.
\par \hich\af4\dbch\af31505\loch\f4 If no, use CCriticalSection.
\par \hich\af4\dbch\af31505\loch\f4 CSyncObject is never used directly. It is the base class for the other \hich\af4\dbch\af31505\loch\f4 four synchronization classes.
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Socket Programming :
\par \hich\af4\dbch\af31505\loch\f4 // Initialize Winsock.
\par \hich\af4\dbch\af31505\loch\f4   WSAStartup(MAKEWORD(2,2), &wsaData);
\par \hich\af4\dbch\af31505\loch\f4 socket: creates a socket of a given domain, type, protocol(buy a phone)
\par \hich\af4\dbch\af31505\loch\f4 I bind: assigns a name to the socket (get a telephone number)
\par \hich\af4\dbch\af31505\loch\f4 I liste\hich\af4\dbch\af31505\loch\f4 n: specifies the number of pending connections that
\par \hich\af4\dbch\af31505\loch\f4 can be queued for a server socket. (call waiting allowance)
\par \hich\af4\dbch\af31505\loch\f4 I accept: server accepts a connection request from a client
\par \hich\af4\dbch\af31505\loch\f4 (answer phone)
\par \hich\af4\dbch\af31505\loch\f4 I connect: client requests a connection request to a server
\par \hich\af4\dbch\af31505\loch\f4 (call)
\par \hich\af4\dbch\af31505\loch\f4 I \hich\af4\dbch\af31505\loch\f4 send, sendto: write to connection (speak)
\par \hich\af4\dbch\af31505\loch\f4 I recv, recvfrom: read from connection (listen)
\par \hich\af4\dbch\af31505\loch\f4 I shutdown: end the call
\par \hich\af4\dbch\af31505\loch\f4 // Clean up and quit. At this point, the application could
\par \hich\af4\dbch\af31505\loch\f4 // handle data transfer on the socket, or other socket
\par \hich\af4\dbch\af31505\loch\f4 // functionality.
\par \hich\af4\dbch\af31505\loch\f4 WSACleanu\hich\af4\dbch\af31505\loch\f4 p();
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 VC+
\par \hich\af4\dbch\af31505\loch\f4 Message Map -> [CCmdTarget]
\par \hich\af4\dbch\af31505\loch\f4 SDI/MDI
\par \hich\af4\dbch\af31505\loch\f4 CArchive
\par \hich\af4\dbch\af31505\loch\f4 Class Hierarchy
\par \hich\af4\dbch\af31505\loch\f4 Re: What is the base class for MFC Framework ?
\par \hich\af4\dbch\af31505\loch\f4 CObject is the base class for Microsoft Foundation Classes.
\par \hich\af4\dbch\af31505\loch\f4 It's used to support Serialization, Runtime Class 
\par \hich\af4\dbch\af31505\loch\f4 Information and Object dia\hich\af4\dbch\af31505\loch\f4 gonstics
\par \hich\af4\dbch\af31505\loch\f4 How to handle command line arguements from simple MFC application ?
\par \hich\af4\dbch\af31505\loch\f4 Using GetCommandLineArgs() function you can get the 
\par \hich\af4\dbch\af31505\loch\f4 arguments in MFC application at any time. In InitInstance
\par \hich\af4\dbch\af31505\loch\f4 ()  function you can change the behaviour of the application using t\hich\af4\dbch\af31505\loch\f4 hose values.
\par 
\par \hich\af4\dbch\af31505\loch\f4 Why not virtual functions to handle messages?
\par \hich\af4\dbch\af31505\loch\f4 In MFC we have lot of base classes those are having so many
\par \hich\af4\dbch\af31505\loch\f4 virtual functions. For each class one virtual table will be
\par \hich\af4\dbch\af31505\loch\f4 created. This will consume lot of memory and our application
\par \hich\af4\dbch\af31505\loch\f4 performance wil\hich\af4\dbch\af31505\loch\f4 l go down. This is the only reason MFC is not
\par \hich\af4\dbch\af31505\loch\f4 using virtual function for message mapping.
\par 
\par \hich\af4\dbch\af31505\loch\f4 Differ SendMessage, PostMessage ?
\par \hich\af4\dbch\af31505\loch\f4 There are a few subtle differences in the ways you can send messages in Windows, but the basic difference between PostMessage and S\hich\af4\dbch\af31505\loch\f4 
endMessage is that SendMessage sends a message to another window immediately by calling that window's procedure and waiting for it to return, whereas PostMessage queues the message in an MSG structure and returns immediately without waiting.
\par 
\par \hich\af4\dbch\af31505\loch\f4 what is messa\hich\af4\dbch\af31505\loch\f4 ge loop how mfc does it internally?
\par \hich\af4\dbch\af31505\loch\f4 In Window programming Message is the main communication.The 
\par \hich\af4\dbch\af31505\loch\f4 messaes are stored in message queue. 
\par \hich\af4\dbch\af31505\loch\f4 the way you retrieve messages from the Message Queue is by 
\par \hich\af4\dbch\af31505\loch\f4 creating a Message Loop. A Message Loop is a loop that 
\par \hich\af4\dbch\af31505\loch\f4 check\hich\af4\dbch\af31505\loch\f4 s for messages in the Message Queue. once a message is 
\par \hich\af4\dbch\af31505\loch\f4 received, the Message Loop dispatches the message by 
\par \hich\af4\dbch\af31505\loch\f4 calling a Message Handler, a function designed to help the 
\par \hich\af4\dbch\af31505\loch\f4 Message Loop at processing the message.
\par 
\par \hich\af4\dbch\af31505\loch\f4 Message loop ends when WM_QUIT messae is retr\hich\af4\dbch\af31505\loch\f4 ived.In Mfc 
\par \hich\af4\dbch\af31505\loch\f4 WinMain is the entry point.since mfc uses event driven 
\par \hich\af4\dbch\af31505\loch\f4 programming model The Incoming messages enter in the 
\par \hich\af4\dbch\af31505\loch\f4 message queue window procedure process that messages and 
\par \hich\af4\dbch\af31505\loch\f4 send to window ,winmain create that window and enter into 
\par \hich\af4\dbch\af31505\loch\f4 message loop ,re\hich\af4\dbch\af31505\loch\f4 trive messages and dispatches them to 
\par \hich\af4\dbch\af31505\loch\f4 window procedure.Messages wait in message queue untill they 
\par \hich\af4\dbch\af31505\loch\f4 are retrived.In order to retrive and dispatch the message 
\par \hich\af4\dbch\af31505\loch\f4 winmain execute simple while loop that call 
\par \hich\af4\dbch\af31505\loch\f4 GetMessage,TranslateMessage and DispathMessage API 
\par \hich\af4\dbch\af31505\loch\f4 Functions .GetMessage retrive message from message 
\par \hich\af4\dbch\af31505\loch\f4 queue ,TranslateMessage convert keyboard message to WM_CHAR 
\par \hich\af4\dbch\af31505\loch\f4 message  and DispatchMessage dispatch messages to Window 
\par \hich\af4\dbch\af31505\loch\f4 procedure. Message loop end when it retrived WM_QUIT 
\par \hich\af4\dbch\af31505\loch\f4 message.
\par \hich\af4\dbch\af31505\loch\f4 &&
\par \hich\af4\dbch\af31505\loch\f4 Generally Windows p\hich\af4\dbch\af31505\loch\f4 rogramming is an event driven 
\par \hich\af4\dbch\af31505\loch\f4 programming.  As and when something happens the some 
\par \hich\af4\dbch\af31505\loch\f4 message will be posted into message loop.
\par 
\par \hich\af4\dbch\af31505\loch\f4 First of all, WinMain is the function which is being called 
\par \hich\af4\dbch\af31505\loch\f4 in windows application.  This WinMain calls Initinstance of 
\par \hich\af4\dbch\af31505\loch\f4 that a\hich\af4\dbch\af31505\loch\f4 pplication and then enters the message loop.
\par 
\par \hich\af4\dbch\af31505\loch\f4 Suppose take the case of SDI/MDI Application:
\par \hich\af4\dbch\af31505\loch\f4 In SDI application messages are first sent it MainFrame 
\par \hich\af4\dbch\af31505\loch\f4 class, if there is no message handle in MainFrame then the 
\par \hich\af4\dbch\af31505\loch\f4 same message will be directed to CView. In the \hich\af4\dbch\af31505\loch\f4 same way if 
\par \hich\af4\dbch\af31505\loch\f4 there is a handle for the message in View then the message 
\par \hich\af4\dbch\af31505\loch\f4 will be handled in the view other wise it will be directed 
\par \hich\af4\dbch\af31505\loch\f4 to CDocument.  If there is message handle for the message 
\par \hich\af4\dbch\af31505\loch\f4 in Document then that handler function will be called 
\par \hich\af4\dbch\af31505\loch\f4 otherwise\hich\af4\dbch\af31505\loch\f4  the message will be sent to CDocTemplate Class.  
\par \hich\af4\dbch\af31505\loch\f4 Then the message will be posed to another view if another 
\par \hich\af4\dbch\af31505\loch\f4 view exists otherwize the message will be sent to 
\par \hich\af4\dbch\af31505\loch\f4 DefWindowProc.
\par \~
\par \hich\af4\dbch\af31505\loch\f4 What is serialization ?which function is responsible for serializing data ?
\par \hich\af4\dbch\af31505\loch\f4 A \hich\af4\dbch\af31505\loch\f4 serializable class usually has a Serialize member 
\par \hich\af4\dbch\af31505\loch\f4 function, and it usually uses the DECLARE_SERIAL and 
\par \hich\af4\dbch\af31505\loch\f4 IMPLEMENT_SERIAL macros, as described under class CObject.
\par 
\par \hich\af4\dbch\af31505\loch\f4 The overloaded extraction (>>) and insertion (<<) operators 
\par \hich\af4\dbch\af31505\loch\f4 are convenient archive program\hich\af4\dbch\af31505\loch\f4 ming interfaces that support 
\par \hich\af4\dbch\af31505\loch\f4 both primitive types and CObject-derived classes.
\par 
\par \hich\af4\dbch\af31505\loch\f4 Serialize() function has to be overridden to take advantage 
\par \hich\af4\dbch\af31505\loch\f4 of serialisation support
\par 
\par \hich\af4\dbch\af31505\loch\f4 What is the difference between GetMessage and PeekMessage ?
\par \hich\af4\dbch\af31505\loch\f4 The major difference between\hich\af4\dbch\af31505\loch\f4  the two is that GetMessage()
\par \hich\af4\dbch\af31505\loch\f4 doesn't return until it finds a message to retrieve from the
\par \hich\af4\dbch\af31505\loch\f4 Application Queue, this allows us to free up precious CPU
\par \hich\af4\dbch\af31505\loch\f4 usage for other programs to use. PeekMessage() returns
\par \hich\af4\dbch\af31505\loch\f4 immediately weather there are any messages or not, t\hich\af4\dbch\af31505\loch\f4 his
\par \hich\af4\dbch\af31505\loch\f4 allows us to utilize the time between messages, for example
\par \hich\af4\dbch\af31505\loch\f4 to render a 3D scene.
\par 
\par \hich\af4\dbch\af31505\loch\f4 How we can findout Memoryleaks, In what way it can be avoided
\par \hich\af4\dbch\af31505\loch\f4 Use Permon utility provided by Microsoft
\par \hich\af4\dbch\af31505\loch\f4 OR
\par \hich\af4\dbch\af31505\loch\f4 To detect a memory leak
\par \hich\af4\dbch\af31505\loch\f4 Create a CMemoryState object and call t\hich\af4\dbch\af31505\loch\f4 he Checkpoint member function. This creates the first memory snapshot.
\par \hich\af4\dbch\af31505\loch\f4 After your program performs its memory allocation and deallocation operations, create another CMemoryState object and call Checkpoint for that object. This gets a second snapshot of mem\hich\af4\dbch\af31505\loch\f4 
ory usage.
\par \hich\af4\dbch\af31505\loch\f4 
Create a third CMemoryState object and call its Difference member function, supplying as arguments the two previous CMemoryState objects. If there is a difference between the two memory states, the Difference function returns a nonzero value. Th
\hich\af4\dbch\af31505\loch\f4 is indicates that some memory blocks have not been deallocated.
\par \hich\af4\dbch\af31505\loch\f4 This example shows what the code looks like:
\par 
\par \hich\af4\dbch\af31505\loch\f4 // Declare the variables needed
\par \hich\af4\dbch\af31505\loch\f4 #ifdef _DEBUG
\par \hich\af4\dbch\af31505\loch\f4     CMemoryState oldMemState, newMemState, diffMemState;
\par \hich\af4\dbch\af31505\loch\f4     oldMemState.Checkpoint();
\par \hich\af4\dbch\af31505\loch\f4 #endif
\par 
\par \hich\af4\dbch\af31505\loch\f4     /\hich\af4\dbch\af31505\loch\f4 / Do your memory allocations and deallocations.
\par \hich\af4\dbch\af31505\loch\f4     CString s("This is a frame variable");
\par \hich\af4\dbch\af31505\loch\f4     // The next object is a heap object.
\par \hich\af4\dbch\af31505\loch\f4    CPerson* p = new CPerson( "Smith", "Alan", "581-0215" );
\par 
\par \hich\af4\dbch\af31505\loch\f4 #ifdef _DEBUG
\par \hich\af4\dbch\af31505\loch\f4     newMemState.Checkpoint();
\par \hich\af4\dbch\af31505\loch\f4     if( diffMemStat\hich\af4\dbch\af31505\loch\f4 e.Difference( oldMemState, newMemState ) )
\par \hich\af4\dbch\af31505\loch\f4     \{
\par \hich\af4\dbch\af31505\loch\f4         TRACE( "Memory leaked!\\n" );
\par \hich\af4\dbch\af31505\loch\f4     \}
\par \hich\af4\dbch\af31505\loch\f4 #endif
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Now that you know a memory leak exists, you can use another member function, CMemoryState::DumpStatistics, to  HYPERLINK "ms-help://MS.MSDNQTR.v80.en/MS.MS\hich\af4\dbch\af31505\loch\f4 
DN.v80/MS.VisualStudio.v80.en/dv_vsdebugnative/html/7e325535-51d5-492e-a794-11697270cd3c.htm" view memory statistics that will help you locate it.
\par 
\par \hich\af4\dbch\af31505\loch\f4 is there any class which is not derived from Cobject
\par \hich\af4\dbch\af31505\loch\f4 Classes Not Derived from Cobject are
\par ------------------
\par \hich\af4\dbch\af31505\loch\f4 Simple Value Types
\par ------------------
\par \hich\af4\dbch\af31505\loch\f4 CFileTime
\par \hich\af4\dbch\af31505\loch\f4 CFileTimeSpan
\par \hich\af4\dbch\af31505\loch\f4 CPoint
\par \hich\af4\dbch\af31505\loch\f4 CRect
\par \hich\af4\dbch\af31505\loch\f4 CSize
\par \hich\af4\dbch\af31505\loch\f4 CSimpleStringT
\par \hich\af4\dbch\af31505\loch\f4 |__CStringT
\par \hich\af4\dbch\af31505\loch\f4    |_CFixedStringT
\par \hich\af4\dbch\af31505\loch\f4 CTime
\par \hich\af4\dbch\af31505\loch\f4 CTimeSpan
\par ---------------
\par \hich\af4\dbch\af31505\loch\f4 Support Classes
\par ---------------
\par \hich\af4\dbch\af31505\loch\f4 CCmdUI
\par \hich\af4\dbch\af31505\loch\f4 |_COleCmdUI
\par \hich\af4\dbch\af31505\loch\f4 CDaoFieldExchange
\par \hich\af4\dbch\af31505\loch\f4 CDataExchange
\par \hich\af4\dbch\af31505\loch\f4 CDBVariant
\par \hich\af4\dbch\af31505\loch\f4 CF\hich\af4\dbch\af31505\loch\f4 iledExchange
\par \hich\af4\dbch\af31505\loch\f4 CImage
\par \hich\af4\dbch\af31505\loch\f4 COccManager
\par \hich\af4\dbch\af31505\loch\f4 COleDataObject
\par \hich\af4\dbch\af31505\loch\f4 COleDispatchDriver
\par \hich\af4\dbch\af31505\loch\f4 CPropExchange
\par \hich\af4\dbch\af31505\loch\f4 CRecentFileList
\par \hich\af4\dbch\af31505\loch\f4 CRectTracker
\par \hich\af4\dbch\af31505\loch\f4 CWaitCursor
\par -------------------
\par \hich\af4\dbch\af31505\loch\f4 Internet Server API\tab \tab 
\par --------------------
\par \hich\af4\dbch\af31505\loch\f4 CHttpArgList
\par \hich\af4\dbch\af31505\loch\f4 CHtmlStream
\par \hich\af4\dbch\af31505\loch\f4 CHttpFilter
\par \hich\af4\dbch\af31505\loch\f4 CHttpFilterContext
\par \hich\af4\dbch\af31505\loch\f4 CHttpServer
\par \hich\af4\dbch\af31505\loch\f4 CHtt\hich\af4\dbch\af31505\loch\f4 pServerContext
\par ----------------------------
\par \hich\af4\dbch\af31505\loch\f4 Run-Time Object Model Support
\par ------------------------------
\par \hich\af4\dbch\af31505\loch\f4 CArchive
\par \hich\af4\dbch\af31505\loch\f4 CDumpContext
\par \hich\af4\dbch\af31505\loch\f4 CRuntimeClass
\par ----------
\par \hich\af4\dbch\af31505\loch\f4 Structures
\par ----------
\par \hich\af4\dbch\af31505\loch\f4 CCreateContext
\par \hich\af4\dbch\af31505\loch\f4 CHttpArg
\par \hich\af4\dbch\af31505\loch\f4 CMemoryState
\par \hich\af4\dbch\af31505\loch\f4 COleSafArray
\par \hich\af4\dbch\af31505\loch\f4 CPrintInfo
\par 
\par -------------------------
\par \hich\af4\dbch\af31505\loch\f4 TypedTemplate Collections
\par --------------------------
\par \hich\af4\dbch\af31505\loch\f4 CTypedPtrArray
\par \hich\af4\dbch\af31505\loch\f4 CTypedPtrList
\par \hich\af4\dbch\af31505\loch\f4 CTypedPtrMap
\par -----------------
\par \hich\af4\dbch\af31505\loch\f4 OLE Type wrappers
\par -----------------
\par \hich\af4\dbch\af31505\loch\f4 CFontHolder
\par \hich\af4\dbch\af31505\loch\f4 CPictureHolder
\par --------------------
\par \hich\af4\dbch\af31505\loch\f4 OLE Automation Types
\par --------------------
\par \hich\af4\dbch\af31505\loch\f4 COleCurency
\par \hich\af4\dbch\af31505\loch\f4 COleDateTime
\par \hich\af4\dbch\af31505\loch\f4 COleDateTimeSpan
\par \hich\af4\dbch\af31505\loch\f4 COleVariant
\par ----------------
\par \hich\af4\dbch\af31505\loch\f4 Synchronization
\par ----------------
\par \hich\af4\dbch\af31505\loch\f4 CMultiLock
\par \hich\af4\dbch\af31505\loch\f4 CSingleLock
\par 
\par \hich\af4\dbch\af31505\loch\f4 how do u identify RTTI in vc++
\par \hich\af4\dbch\af31505\loch\f4 Check if class is derived directly or indirectly from 
\par \hich\af4\dbch\af31505\loch\f4 CObject. CObject provides facility of RTTI check to i\hich\af4\dbch\af31505\loch\f4 ts 
\par \hich\af4\dbch\af31505\loch\f4 derived classes.
\par 
\par \hich\af4\dbch\af31505\loch\f4 &#61558;\tab   DECLARE_DYNAMIC and IMPLEMENT_DYNAMIC, permit run-
\par \hich\af4\dbch\af31505\loch\f4 time access to the class name and its position in the 
\par \hich\af4\dbch\af31505\loch\f4 hierarchy. This, in turn, allows meaningful diagnostic 
\par \hich\af4\dbch\af31505\loch\f4 dumping.
\par 
\par \hich\af4\dbch\af31505\loch\f4 &#61558;\tab   CObject::IsKindOf function to determine \hich\af4\dbch\af31505\loch\f4 the class 
\par \hich\af4\dbch\af31505\loch\f4 of your objects at run time.
\par 
\par \hich\af4\dbch\af31505\loch\f4 What is the difference between the ASSERT and VERIFY macros?
\par \hich\af4\dbch\af31505\loch\f4 ASSERT() macro works in the Debug builds
\par \hich\af4\dbch\af31505\loch\f4 VERIFY() macro works in Release builds.
\par 
\par \hich\af4\dbch\af31505\loch\f4 What is subclassing?
\par \hich\af4\dbch\af31505\loch\f4 Subclassing is a technique that allows an applicati\hich\af4\dbch\af31505\loch\f4 on to 
\par \hich\af4\dbch\af31505\loch\f4 intercept and process messages sent or posted to a 
\par \hich\af4\dbch\af31505\loch\f4 particular window before the window has a chance to process 
\par \hich\af4\dbch\af31505\loch\f4 them. This is typically done by replacing the Window 
\par \hich\af4\dbch\af31505\loch\f4 Procedure for a window with application-defined window 
\par \hich\af4\dbch\af31505\loch\f4 procedure. I will devide t\hich\af4\dbch\af31505\loch\f4 his article into 3: 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Subclassing in SDK programs, 
\par \hich\af4\dbch\af31505\loch\f4 Subclassing in MFC programs, 
\par \hich\af4\dbch\af31505\loch\f4 Reflected messages
\par 
\par \hich\af4\dbch\af31505\loch\f4 Subclassing a window control is not the same as subclassing a C++ class. Subclassing a control means you replace some or all of the message handlers of a \hich\af4\dbch\af31505\loch\f4 
window with your own. You effectively hijack the control and make it behave the way you want, not the way Windows wants. This allows you to take a control that is almost, but not quite, what you want, and make it perfect. There are two types of subclassin
\hich\af4\dbch\af31505\loch\f4 g\hich\af4\dbch\af31505\loch\f4 
: instance subclassing and global subclassing. Instance subclassing is when you subclass a single instance of a window. Global subclassing subclasses all windows of a particular type with your own version. We'll only discuss single instance here.
\par 
\par \hich\af4\dbch\af31505\loch\f4 To subcl\hich\af4\dbch\af31505\loch\f4 
ass a control we need to create a new class that handles all the windows messages we are interested in. Since we are lazy it's best to minimise the number of messages you actually have to deal with, and the best way of doing this is by deriving your class
\hich\af4\dbch\af31505\loch\f4  \hich\af4\dbch\af31505\loch\f4 from the control class you are subclassing. In our case CButton.
\par \hich\af4\dbch\af31505\loch\f4 Lets assume we want to do something bizarre like make the button glow bright yellow everytime the mouse moves over it. Stranger things have been done. First thing we do is use ClassWizard to \hich\af4\dbch\af31505\loch\f4 
create a new class derived from CButton called CMyButton.
\par 
\par \hich\af4\dbch\af31505\loch\f4 Deriving from CButton within the MFC framework has a lot of advantages, with the biggest one being we don't actually have to add a single line of code for our class to be a fully functioning window
\hich\af4\dbch\af31505\loch\f4 
s control. If we wished we could move onto the next step and subclass a button control with our new class and we would have a perfectly functioning, though somewhat boring, button control. This is becuase MFC implements default handlers for all it's messa
\hich\af4\dbch\af31505\loch\f4 g\hich\af4\dbch\af31505\loch\f4 es, so we can simply pick the ones we are interested in, and ignore the others.
\par 
\par \hich\af4\dbch\af31505\loch\f4 BEGIN_MESSAGE_MAP(CMyButton, CButton)
\par \hich\af4\dbch\af31505\loch\f4     //\{\{AFX_MSG_MAP(CMyButton)
\par \hich\af4\dbch\af31505\loch\f4     ON_WM_MOUSEMOVE()
\par \hich\af4\dbch\af31505\loch\f4     ON_WM_TIMER()
\par \hich\af4\dbch\af31505\loch\f4     //\}\}AFX_MSG_MAP
\par \hich\af4\dbch\af31505\loch\f4 END_MESSAGE_MAP()
\par 
\par \hich\af4\dbch\af31505\loch\f4 ///////////////////////////\hich\af4\dbch\af31505\loch\f4 //////////////////////////////////////////////////
\par \hich\af4\dbch\af31505\loch\f4 // CMyButton message handlers
\par 
\par \hich\af4\dbch\af31505\loch\f4 void CMyButton::OnMouseMove(UINT nFlags, CPoint point) 
\par \{
\par \hich\af4\dbch\af31505\loch\f4     // TODO: Add your message handler code here and/or call default
\par \tab 
\par \hich\af4\dbch\af31505\loch\f4     CButton::OnMouseMove(nFlags, point);
\par \}
\par 
\par \hich\af4\dbch\af31505\loch\f4 vo\hich\af4\dbch\af31505\loch\f4 id CMyButton::OnTimer(UINT nIDEvent) 
\par \{
\par \hich\af4\dbch\af31505\loch\f4     // TODO: Add your message handler code here and/or call default
\par \tab 
\par \hich\af4\dbch\af31505\loch\f4     CButton::OnTimer(nIDEvent);
\par \}
\par 
\par \hich\af4\dbch\af31505\loch\f4 The message map entries (in the BEGIN_MESSAGE_MAP section) map the windows message to the function. ON_WM_MOUSE\hich\af4\dbch\af31505\loch\f4 
MOVE maps WM_MOUSEMOVE to your OnMouseMove function, and ON_WM_TIMER maps WM_TIMER to OnTimer. These macros are defined in the MFC source, but they are not required reading. For this excercise simply have faith that they do their job.
\par 
\par \hich\af4\dbch\af31505\loch\f4 what is the size of \hich\af4\dbch\af31505\loch\f4 a process
\par \hich\af4\dbch\af31505\loch\f4 In Case of 32-bit OS the process gains 4GB and in 64-bit OS 
\par \hich\af4\dbch\af31505\loch\f4 the process gains 32GB.But in both the cases,if a single 
\par \hich\af4\dbch\af31505\loch\f4 process is currently running it may use the entire memory 
\par \hich\af4\dbch\af31505\loch\f4 or else the memory space is equally divided among the 
\par \hich\af4\dbch\af31505\loch\f4 running proce\hich\af4\dbch\af31505\loch\f4 sses.
\par 
\par \hich\af4\dbch\af31505\loch\f4 how many types of classes are there, what are that
\par \hich\af4\dbch\af31505\loch\f4 As far i know following are the types of classes 
\par \hich\af4\dbch\af31505\loch\f4 1: Base class
\par \hich\af4\dbch\af31505\loch\f4 2: Derived Class
\par \hich\af4\dbch\af31505\loch\f4 3: Abstract Class 
\par \hich\af4\dbch\af31505\loch\f4 4: Virtual Class.
\par \hich\af4\dbch\af31505\loch\f4 OR
\par \hich\af4\dbch\af31505\loch\f4 There Are 2 Types of Classes Regarding MFC.
\par \hich\af4\dbch\af31505\loch\f4 1.Generic Classes -  Independent \hich\af4\dbch\af31505\loch\f4 Classes
\par \hich\af4\dbch\af31505\loch\f4 2.Non-Generic Classes - These Classes are derived From 
\par \hich\af4\dbch\af31505\loch\f4 CObject
\par 
\par \hich\af4\dbch\af31505\loch\f4 Re: What is the size of class
\par \hich\af4\dbch\af31505\loch\f4 Variable \hich\f4 \endash \loch\f4  4
\par \hich\af4\dbch\af31505\loch\f4 Function \hich\f4 \endash \loch\f4  4
\par \hich\af4\dbch\af31505\loch\f4 Virtual Function \hich\f4 \endash \loch\f4  8
\par \hich\af4\dbch\af31505\loch\f4  HYPERLINK "http://www.allinterview.com/showanswers/57419.html" http://www.allinterview.com/showanswers/57\hich\af4\dbch\af31505\loch\f4 419.html
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 SDI & MDI
\par \hich\af4\dbch\af31505\loch\f4 The SDI application is typically used when you intend to work with only one data set at a time. For instance, the program notepad.exe is a SDI application.\~
\par \hich\af4\dbch\af31505\loch\f4 Word for Windows and the VC++ developer studio are MDI applications. In these \hich\af4\dbch\af31505\loch\f4 
you can have several documents opened at once. This is particularly useful when you want to cut and paste between documents.\~
\par \hich\af4\dbch\af31505\loch\f4 Another use for MDI applications is to have one document, but several different views open that view the data differently. \~
\par \hich\af4\dbch\af31505\loch\f4 Remem\hich\af4\dbch\af31505\loch\f4 ber that in a dialog app, we had just two main classes.\~CWinApp\~and\~CDialog. Here again we have a\~CWinApp\~and\~The\~CDialog\~class however is replaced by 3 other classes:\~CFrameWnd,
\~CDocument, and\~CView.
\par \hich\af4\dbch\af31505\loch\f4 CDocument\~is a class that has no display, and typically\hich\af4\dbch\af31505\loch\f4 
 doesn't react much with the messaging system of windows. It is used as a class to manage your data. MFC will create the code automatically which handles the event of File->Save, File->SaveAs, File->Close, and File->Open. All you need to do is to fill in 
\hich\af4\dbch\af31505\loch\f4 t\hich\af4\dbch\af31505\loch\f4 he blank functions in the\~CDocument\~class.
\par \hich\af4\dbch\af31505\loch\f4 Next is the\~CView. Most likely you will spend more time writing code to display and interact with the document's data then you will writing any other code. This is where the\~CView\~comes in. The\~CView\~is a class de
\hich\af4\dbch\af31505\loch\f4 rived from\~CWnd, which is used for displaying your\~CDocument\~in some way. It is also one of the places where you can handle events like mouse clicks and what not.\~
\par \hich\af4\dbch\af31505\loch\f4 The\~CFrameWnd\~acts as a way to bridge the gap between your document/view classes and the res\hich\af4\dbch\af31505\loch\f4 
t of the application. Do you see that frame which goes all around applications boarders? That is the Main Frame window of the application. The title bar, the menu, the scroll bars, the status bar, and the tool bars are all part of the main frame window in
\hich\af4\dbch\af31505\loch\f4  \hich\af4\dbch\af31505\loch\f4 an SDI application.\~ You typically put the code to handle these objects in the\~CFrameWndclass. The\~CFrameWnd\~class is the main window of the application. The\~CView\~
class is typically a child window of the\~CFrameWnd. (For the most part, the child/parent wi\hich\af4\dbch\af31505\loch\f4 n\hich\af4\dbch\af31505\loch\f4 
dow relations just tell windows what windows are 'stuck' to what other windows. If you move a parent window, all of the children will move also. If you destroy a parent window, all of the children will be destroyed. Etc.)
\par \hich\af4\dbch\af31505\loch\f4 You should have a pretty good idea\hich\af4\dbch\af31505\loch\f4  now of how SDI applications are constructed. MDI applications are similar, but there can be several\~CDocument\~
classes in existence at the same time and there is an added class called\~CChildFrame\~which acts as a connection between the\~CView\~and the\~CFrame\hich\af4\dbch\af31505\loch\f4 W\hich\af4\dbch\af31505\loch\f4 nd.
\par 
\par \hich\af4\dbch\af31505\loch\f4 roy@capabil-it.com.au
\par 
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 http://www.informit.com/library/content.aspx?b=Visual_C_PlusPlus&seqNum=47
\par \hich\af4\dbch\af31505\loch\f4 Inside the Message Map
\par \hich\af4\dbch\af31505\loch\f4 The message map macros\~DECLARE_MESSAGE_MAP,\~BEGIN_MESSAGE_MAP, and\~END_MESSAGE_MAP\~are defined in\~AFXWIN.H. If you are curious, \hich\af4\dbch\af31505\loch\f4 you can find this file in the\~VC98\\MFC\\INCLUDE\~
subdirectory under the directory where Visual C++ was installed.
\par \hich\af4\dbch\af31505\loch\f4 The\~DECLARE_MESSAGE_MAP\~macro is declared like this:
\par \hich\af4\dbch\af31505\loch\f4 #ifdef _AFXDLL
\par \hich\af4\dbch\af31505\loch\f4 #define DECLARE_MESSAGE_MAP()\~
\par \hich\af4\dbch\af31505\loch\f4 private:     static const AFX_MSGMAP_ENTRY _m\hich\af4\dbch\af31505\loch\f4 essageEntries[];\~
\par \hich\af4\dbch\af31505\loch\f4 protected:     static AFX_DATA const AFX_MSGMAP messageMap;    \~
\par \hich\af4\dbch\af31505\loch\f4 static const AFX_MSGMAP* PASCAL _GetBaseMessageMap();    \~
\par \hich\af4\dbch\af31505\loch\f4 virtual const AFX_MSGMAP* GetMessageMap() const; 
\par 
\par \hich\af4\dbch\af31505\loch\f4 #else
\par \hich\af4\dbch\af31505\loch\f4 #define DECLARE_MESSAGE_MAP()\~
\par \hich\af4\dbch\af31505\loch\f4 private: \}
\par \hich\af4\dbch\af31505\loch\f4     static cons\hich\af4\dbch\af31505\loch\f4 t AFX_MSGMAP_ENTRY _messageEntries[];\~
\par \hich\af4\dbch\af31505\loch\f4 protected:     static AFX_DATA const AFX_MSGMAP messageMap;    \~
\par \hich\af4\dbch\af31505\loch\f4 virtual const AFX_MSGMAP* GetMessageMap() const;\~
\par \hich\af4\dbch\af31505\loch\f4 #endif
\par \hich\af4\dbch\af31505\loch\f4 In short,\~DECLARE_MESSAGE_MAP\~defines functions to return the class's message map (GetMessageMa\hich\af4\dbch\af31505\loch\f4 p()), and that of its base class (_GetBaseMessageMap()), as well as an\~AFX_MSGMAP\~
structure. This structure consists primarily of an array of\~AFX_MSGMAP_ENTRY\~structures (_messageEntries[]).
\par \hich\af4\dbch\af31505\loch\f4 The\~BEGIN_MESSAGE_MAP\~macro is defined like this:
\par \hich\af4\dbch\af31505\loch\f4 #ifdef _AFXDLL
\par \hich\af4\dbch\af31505\loch\f4 #define BEGIN_MESSAGE_MAP(theClass, baseClass)    \~
\par \hich\af4\dbch\af31505\loch\f4 const AFX_MSGMAP* PASCAL theClass::_GetBaseMessageMap()        \~\{ return &baseClass::messageMap; \}    \~
\par \hich\af4\dbch\af31505\loch\f4 const AFX_MSGMAP* theClass::GetMessageMap() const         \{ return &theClass::messageMap; \}    \~
\par \hich\af4\dbch\af31505\loch\f4 AFX\hich\af4\dbch\af31505\loch\f4 _COMDAT AFX_DATADEF const AFX_MSGMAP theClass::messageMap =     \{ &theClass::_GetBaseMessageMap, &theClass::_messageEntries[0] \};    \~
\par \hich\af4\dbch\af31505\loch\f4 AFX_COMDAT const AFX_MSGMAP_ENTRY theClass::_messageEntries[] =     \{ 
\par \hich\af4\dbch\af31505\loch\f4 #else
\par \hich\af4\dbch\af31505\loch\f4 #define BEGIN_MESSAGE_MAP(theClass, baseClas\hich\af4\dbch\af31505\loch\f4 s)    \~
\par \hich\af4\dbch\af31505\loch\f4 const AFX_MSGMAP* theClass::GetMessageMap() const         \{  return &theClass::messageMap; \}    \~
\par \hich\af4\dbch\af31505\loch\f4 AFX_COMDAT AFX_DATADEF const AFX_MSGMAP theClass::messageMap =     \{  &baseClass::messageMap, &theClass::_messageEntries[0] \};    \~
\par \hich\af4\dbch\af31505\loch\f4 AFX_COMDAT const A\hich\af4\dbch\af31505\loch\f4 FX_MSGMAP_ENTRY theClass::_messageEntries[] =     \{ #endif
\par \hich\af4\dbch\af31505\loch\f4 The\~BEGIN_MESSAGE_MAP\~macro implements the\~GetMessageMap()\~and _GetBaseMessageMap()\~functions, then begins initializing the\~_messageEntries[]\~array. The initializer list is left without a closing b
\hich\af4\dbch\af31505\loch\f4 race, leaving\~END_MESSAGE_MAP\~to add an entry that marks the end of the message map and closes the initializer list:
\par \hich\af4\dbch\af31505\loch\f4 #define END_MESSAGE_MAP()         \{ 0, 0, 0, 0, AfxSig_end, (AFX_PMSG)0 \}     \}; 
\par \hich\af4\dbch\af31505\loch\f4 Between the\~BEGIN_MESSAGE_MAP\~and\~END_MESSAGE_MAP\~macros,\hich\af4\dbch\af31505\loch\f4  you use the message map entry macros, such as\~ON_COMMAND, which is actually defined like this:
\par \hich\af4\dbch\af31505\loch\f4 #define ON_COMMAND(id, memberFxn)     \{ WM_COMMAND, CN_COMMAND, (WORD)id, (WORD)id, AfxSig_vv, (AFX_PMSG)&memberFxn \},
\par \hich\af4\dbch\af31505\loch\f4 The values specified in the message map m\hich\af4\dbch\af31505\loch\f4 acros are used to initialize an\~AFX_MSGMAP_ENTRY, which looks like this:
\par \hich\af4\dbch\af31505\loch\f4 struct AFX_MSGMAP_ENTRY
\par \{
\par \hich\af4\dbch\af31505\loch\f4     UINT nMessage;  // windows message
\par \hich\af4\dbch\af31505\loch\f4     UINT nCode;     // control code or WM_NOTIFY code
\par \hich\af4\dbch\af31505\loch\f4     UINT nID;       // control ID (or 0 for windows messages)
\par \hich\af4\dbch\af31505\loch\f4   \hich\af4\dbch\af31505\loch\f4   UINT nLastID;   // used for entries specifying a range of control id's
\par \hich\af4\dbch\af31505\loch\f4     UINT nSig;      // signature type (action) or pointer to message #
\par \hich\af4\dbch\af31505\loch\f4     AFX_PMSG pfn;   // routine to call (or special value)
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par \hich\af4\dbch\af31505\loch\f4 The first four elements are used by MFC to check wh\hich\af4\dbch\af31505\loch\f4 
ether this message map entry applies to the Windows message that is being dispatched. The last two elements specify information about the handler function to be called.\~pfn\~is a pointer to the function to call, and\~nSig\~
is a special signature type, which \hich\af4\dbch\af31505\loch\f4 M\hich\af4\dbch\af31505\loch\f4 FC uses to specify the return type and parameters that will be passed to the function specified by\~pfn.
\par \hich\af4\dbch\af31505\loch\f4 The values used for\~nSig\~are defined in the\~AfxSig\~enum type in Afxmsg_.h. This file also lists the function prototypes that should be used to correspon\hich\af4\dbch\af31505\loch\f4 d with each\~nSig\~value.
\par \hich\af4\dbch\af31505\loch\f4 If you are ever unsure of what form a handler function for a given message map macro should take, you can look up the macro\hich\f4 \emdash \loch\f4 for example,\~ON_COMMAND\hich\f4 \emdash \loch\f4 
in Afxmsg_.h, see that it uses\~AfxSig_vv, then find the definition of\~AfxSig_vv\~to f\hich\af4\dbch\af31505\loch\f4 ind that your handler function should return\~void\~and take no parameters.
\par \hich\af4\dbch\af31505\loch\f4 Using\~ClassWizard\~to add your handler functions will save you this trouble in most cases; however, there are certain message map entries that\~ClassWizard\~does not support, such as\~ON\hich\af4\dbch\af31505\loch\f4 
_COMMAND_RANGE\~or\~ON_THREAD_MESSAGE.
\par \hich\af4\dbch\af31505\loch\f4 Implementing Handler Functions
\par \hich\af4\dbch\af31505\loch\f4 When you add handler functions with\~ClassWizard, your handler function will be created for you, with the proper parameters and return type. If you create your message map en tries and corr\hich\af4\dbch\af31505\loch\f4 
esponding handler functions yourself, be very careful to declare your handler function with the parameters and return type that the message map entry expects. Failure to do so will result in a corrupted stack at some point and can cause big headaches.

\par \hich\af4\dbch\af31505\loch\f4 PreT\hich\af4\dbch\af31505\loch\f4 ranslateMessage()
\par \hich\af4\dbch\af31505\loch\f4 
In most cases, the message pump receives messages and dispatches them by way of message maps, as you saw in the previous example. However, if you find that you need to intercept messages prior to the normal dispatch process, MFC offers a 
\hich\af4\dbch\af31505\loch\f4 way to do this\hich\f4 \emdash \loch\f4 the\~PreTranslateMessage()\~function.
\par \hich\af4\dbch\af31505\loch\f4 You can override the\~PreTranslateMessage()\~member function in any class derived from\~CWnd,\~CWinApp, or\~CWinThread. The function takes a pointer to an\~MSG\~structure and returns a\~BOOL. If\~PreTranslateMessag
\hich\af4\dbch\af31505\loch\f4 e()\~returns\~TRUE, MFC will assume that you have handled the message. If it returns\~FALSE, MFC assumes that you have elected not to handle it and will proceed with its normal dispatch process.
\par 
\par \hich\af4\dbch\af31505\loch\f4 what is the use of\~AFX_MANAGE_STATE?
\par \hich\af4\dbch\af31505\loch\f4 We are familiar with\~Dynam\hich\af4\dbch\af31505\loch\f4 ic Link\~Libraries\~(DLLs)\~and most of our daily\~application development activities\~are using it. If you have an exported function in DLL and you\~don\hich\f4 
\rquote \loch\f4 t use any resources from the DLL\~itself\~ then\~you could invoke it from an executable module and it will wor\hich\af4\dbch\af31505\loch\f4 k\hich\af4\dbch\af31505\loch\f4  fine.\~
\par \hich\af4\dbch\af31505\loch\f4 But you want to launch a\~dialog from the DLL module and which is from\~it\hich\f4 \rquote \loch\f4 
s own resource part. What will happen if you invoke the domodal of a dialog from any of the exported function in the DLL. No doubt, the domodal will return -1.\~
\par 
\par \~
\par \~
\par \hich\af4\dbch\af31505\loch\f4 Actually \hich\af4\dbch\af31505\loch\f4 what is happening here, once we try yo launch a dialog from the DLL from its own resource \hich\f4 \endash \loch\f4 
 but the application holds the resource handle of the main application. So we need to switch the module state for the correct handle to be used. We can do this by a\hich\af4\dbch\af31505\loch\f4 d\hich\af4\dbch\af31505\loch\f4 
ding the following code to the beginning of the exported function in the DLL,
\par \hich\af4\dbch\af31505\loch\f4 AFX_MANAGE_STATE( AfxGetStaticModuleState() );
\par \hich\af4\dbch\af31505\loch\f4 This swaps the current module state with\~ the state returned fromAfxGetStaticModuleState( )\~until the end of the current scope. Thi\hich\af4\dbch\af31505\loch\f4 s is a macro used to protect an exported function in a DLL.

\par 
\par \hich\af4\dbch\af31505\loch\f4 Why should we use BOOST on top of STL
\par \hich\af4\dbch\af31505\loch\f4 BOOST can run with any compiler whereas STL can\hich\f4 \rquote \loch\f4 t
\par \hich\af4\dbch\af31505\loch\f4 BOOST STL Comparison
\par \hich\af4\dbch\af31505\loch\f4 It\hich\f4 \rquote \loch\f4 s been ten years since they started to form a standard, and two years since the app\hich\af4\dbch\af31505\loch\f4 roval. A lot changed in that time, and the compiler vendors couldn\hich\f4 
\rquote \loch\f4 t really risk implementing new features if those features would be scrapped later on. The resulting picture really has not been pretty.
\par \hich\af4\dbch\af31505\loch\f4 Boost, however, has been moving along well. The devel\hich\af4\dbch\af31505\loch\f4 
opers have done a superior job of making sure their code works with different compilers. Boost is mature, well-tested, and works well. The development process has moved forward without being encumbered by a standards committee. It continues to evolve.

\par \hich\af4\dbch\af31505\loch\f4 And \hich\af4\dbch\af31505\loch\f4 
what about those parts of it that made it into the Standard Library? I mentioned the Regular Expression library is very similar and was heavily influenced by Boost. But considering that implementations of the Standard Library still lack a lot of the featu
\hich\af4\dbch\af31505\loch\f4 r\hich\af4\dbch\af31505\loch\f4 es in the specification, does it even matter? Remember, the C++ standard itself isn\hich\f4 \rquote \loch\f4 
t code, and there is no reference implementation. The standard only says what a C++ compiler should do and what should be present in an implementation of the Standard Libr\hich\af4\dbch\af31505\loch\f4 a\hich\af4\dbch\af31505\loch\f4 
ry. If you want to use the Standard Library, you have to use one produced by a third party\hich\f4 \emdash \loch\f4 usually the one that comes with the compiler, such as the GCC version or the Microsoft version. And that\hich\f4 \rquote \loch\f4 
s what you\hich\f4 \rquote \loch\f4 re really choosing between: GCC or Microsoft\hich\f4 \rquote \loch\f4 s i\hich\af4\dbch\af31505\loch\f4 m\hich\af4\dbch\af31505\loch\f4 
plementation of the Standard Library, or the Boost library upon which the Standard Library was modeled. And those two implementations of the Standard Library aren\hich\f4 \rquote \loch\f4 \hich\f4 t even complete, and one is called \'93\loch\f4 \hich\f4 
experimental.\'94\loch\f4  Which one would you prefer to ship out to\hich\af4\dbch\af31505\loch\f4  \hich\af4\dbch\af31505\loch\f4 production?
\par \hich\af4\dbch\af31505\loch\f4 
The Standards Committee took some eight years to fight over what should be in the standard, and the compiler vendors had to wait for all that to get ironed out before they could publish an implementation of the Standard Library. They did publis
\hich\af4\dbch\af31505\loch\f4 h pieces, but it was clear they were early alpha versions at best. And they\hich\f4 \rquote \loch\f4 
re still not completely there yet. But meanwhile the actual C++ community was moving forward on its own, building better things such as Boost.
\par \hich\af4\dbch\af31505\loch\f4 We\hich\f4 \rquote \loch\f4 re told there will be another stan\hich\af4\dbch\af31505\loch\f4 dard in a few more years. We\hich\f4 \rquote \loch\f4 ve heard that before. I imagine by then Boost will be even better yet.
\par \hich\af4\dbch\af31505\loch\f4 Difference between map of STL/BOOST/VC++
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 SQL
\par \hich\af4\dbch\af31505\loch\f4 What is SQL?
\par \hich\af4\dbch\af31505\loch\f4 SQL stands for Structured Query Language 
\par \hich\af4\dbch\af31505\loch\f4 SQL lets you access and manipulate databases 
\par \hich\af4\dbch\af31505\loch\f4 SQL is a\hich\af4\dbch\af31505\loch\f4 n ANSI (American National Standards Institute) standard 
\par \hich\af4\dbch\af31505\loch\f4 What Can SQL do?
\par \hich\af4\dbch\af31505\loch\f4 SQL can execute queries against a database 
\par \hich\af4\dbch\af31505\loch\f4 SQL can retrieve data from a database 
\par \hich\af4\dbch\af31505\loch\f4 SQL can insert records in a database 
\par \hich\af4\dbch\af31505\loch\f4 SQL can update records in a database 
\par \hich\af4\dbch\af31505\loch\f4 SQL can delete records \hich\af4\dbch\af31505\loch\f4 from a database 
\par \hich\af4\dbch\af31505\loch\f4 SQL can create new databases 
\par \hich\af4\dbch\af31505\loch\f4 SQL can create new tables in a database 
\par \hich\af4\dbch\af31505\loch\f4 SQL can create stored procedures in a database 
\par \hich\af4\dbch\af31505\loch\f4 SQL can create views in a database 
\par \hich\af4\dbch\af31505\loch\f4 SQL can set permissions on tables, procedures, and views 
\par 
\par \hich\af4\dbch\af31505\loch\f4 The following SQL stateme\hich\af4\dbch\af31505\loch\f4 nt will select all the records in the "Persons" table:
\par \hich\af4\dbch\af31505\loch\f4 SELECT * FROM Persons
\par 
\par \hich\af4\dbch\af31505\loch\f4 SQL DML and DDL
\par \hich\af4\dbch\af31505\loch\f4 SQL can be divided into two parts: The Data Manipulation Language (DML) and the Data Definition Language (DDL).
\par 
\par \hich\af4\dbch\af31505\loch\f4 The query and update commands form the DML part o\hich\af4\dbch\af31505\loch\f4 f SQL:
\par \hich\af4\dbch\af31505\loch\f4 SELECT - extracts data from a database 
\par \hich\af4\dbch\af31505\loch\f4 UPDATE - updates data in a database 
\par \hich\af4\dbch\af31505\loch\f4 DELETE - deletes data from a database 
\par \hich\af4\dbch\af31505\loch\f4 INSERT INTO - inserts new data into a database 
\par 
\par \hich\af4\dbch\af31505\loch\f4 The DDL part of SQL permits database tables to be created or deleted. It also define\hich\af4\dbch\af31505\loch\f4 
 indexes (keys), specify links between tables, and impose constraints between tables. The most important DDL statements in SQL are:
\par \hich\af4\dbch\af31505\loch\f4 CREATE DATABASE - creates a new database 
\par \hich\af4\dbch\af31505\loch\f4 ALTER DATABASE - modifies a database 
\par \hich\af4\dbch\af31505\loch\f4 CREATE TABLE - creates a new table 
\par \hich\af4\dbch\af31505\loch\f4 ALTER TA\hich\af4\dbch\af31505\loch\f4 BLE - modifies a table 
\par \hich\af4\dbch\af31505\loch\f4 DROP TABLE - deletes a table 
\par \hich\af4\dbch\af31505\loch\f4 CREATE INDEX - creates an index (search key) 
\par \hich\af4\dbch\af31505\loch\f4 DROP INDEX - deletes an index 
\par 
\par \hich\af4\dbch\af31505\loch\f4 SELECT LastName,FirstName FROM Persons
\par \hich\af4\dbch\af31505\loch\f4 SELECT DISTINCT City FROM Persons
\par \hich\af4\dbch\af31505\loch\f4 SELECT * FROM Persons WHERE City='Happy'
\par \hich\af4\dbch\af31505\loch\f4 SELECT * F\hich\af4\dbch\af31505\loch\f4 ROM Persons WHERE Year=1965
\par 
\par \hich\af4\dbch\af31505\loch\f4 Operators Allowed in the WHERE Clause
\par \hich\af4\dbch\af31505\loch\f4 With the WHERE clause, the following operators can be used:
\par \ltrrow}\trowd \irow0\irowband0\ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalt\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr
\brdrs\brdrw20\brdrcf16 \clcbpat7\cltxlrtb\clftsWidth3\clwWidth4428\clcbpatraw7 \cellx4320\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth4320\clcbpatraw7 \cellx8640\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Operator\cell \hich\af4\dbch\af31505\loch\f4 Description\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {
\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow0\irowband0\ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalt\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl
\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \clcbpat7\cltxlrtb\clftsWidth3\clwWidth4428\clcbpatraw7 \cellx4320\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb
\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \clcbpat7\cltxlrtb\clftsWidth3\clwWidth4320\clcbpatraw7 \cellx8640\row \ltrrow}\trowd \irow1\irowband1\ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalt\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth4428\clshdrawnil \cellx4320\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth4320\clshdrawnil \cellx8640
\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 =\cell 
\hich\af4\dbch\af31505\loch\f4 Equal\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow1\irowband1\ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalt\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth4428\clshdrawnil \cellx4320\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth4320\clshdrawnil \cellx8640
\row \ltrrow}\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 <>\cell \hich\af4\dbch\af31505\loch\f4 Not equal\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \trowd \irow2\irowband2\ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalt\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb
\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth4428\clshdrawnil \cellx4320\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth4320\clshdrawnil \cellx8640\row \ltrrow}\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 >\cell \hich\af4\dbch\af31505\loch\f4 Greater than\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {
\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow3\irowband3\ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalt\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl
\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth4428\clshdrawnil \cellx4320\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 
\clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth4320\clshdrawnil \cellx8640\row \ltrrow}\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl
\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 <\cell \hich\af4\dbch\af31505\loch\f4 Less than
\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow4\irowband4\ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalt\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth4428\clshdrawnil \cellx4320\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth4320\clshdrawnil \cellx8640
\row \ltrrow}\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 >=\cell \hich\af4\dbch\af31505\loch\f4 Greater than or equal\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \trowd \irow5\irowband5\ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalt\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb
\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth4428\clshdrawnil \cellx4320\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth4320\clshdrawnil \cellx8640\row \ltrrow}\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 <=\cell \hich\af4\dbch\af31505\loch\f4 Less than or equal\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {
\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow6\irowband6\ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalt\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl
\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth4428\clshdrawnil \cellx4320\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 
\clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth4320\clshdrawnil \cellx8640\row \ltrrow}\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl
\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 BETWEE\hich\af4\dbch\af31505\loch\f4 N\cell 
\hich\af4\dbch\af31505\loch\f4 Between an inclusive range\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\trowd \irow7\irowband7\ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalt\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr
\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth4428\clshdrawnil \cellx4320\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth4320\clshdrawnil \cellx8640\row \ltrrow}\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 LIKE\cell \hich\af4\dbch\af31505\loch\f4 Search for a pattern\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {
\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow8\irowband8\ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalt\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl
\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth4428\clshdrawnil \cellx4320\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 
\clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth4320\clshdrawnil \cellx8640\row \ltrrow}\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl
\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 IN\cell \hich\af4\dbch\af31505\loch\f4 
If you know the exact value you want to return for at least one of the columns\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \trowd \irow9\irowband9\lastrow \ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalt\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb
\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth4428\clshdrawnil \cellx4320\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth4320\clshdrawnil \cellx8640\row }\pard \ltrpar\ql \li0\ri0\nowidctlpar\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Note: In some versions of SQL the <> operator may be written as !=
\par \hich\af4\dbch\af31505\loch\f4 SELECT * FROM Persons WHERE FirstName='Tove' AND \hich\af4\dbch\af31505\loch\f4 LastName='Svendson'
\par \hich\af4\dbch\af31505\loch\f4 SELECT * FROM Persons WHERE FirstName='Tove' OR FirstName='Ola'
\par \hich\af4\dbch\af31505\loch\f4 SELECT * FROM Persons WHERE LastName='Svendson' AND (FirstName='Tove' OR FirstName='Ola')
\par \hich\af4\dbch\af31505\loch\f4 SELECT * FROM Persons ORDER BY LastName
\par \hich\af4\dbch\af31505\loch\f4 SELECT * FROM Persons ORDER BY LastName DE\hich\af4\dbch\af31505\loch\f4 SC
\par 
\par \hich\af4\dbch\af31505\loch\f4 Now we want to insert a new row in the "Persons" table.
\par \hich\af4\dbch\af31505\loch\f4 INSERT INTO Persons VALUES (4,'Nilsen', 'Johan', 'Bakken 2', 'Stavanger')
\par 
\par \hich\af4\dbch\af31505\loch\f4 The following SQL statement will add a new row, but only add data in the "P_Id", "LastName" and the "FirstName" columns:
\par \hich\af4\dbch\af31505\loch\f4 INSERT INTO Persons (P_Id, LastName, FirstName) VALUES (5, 'Tjessem', 'Jakob')
\par 
\par \hich\af4\dbch\af31505\loch\f4 UPDATE Persons SET Address='Nissestien 67', City='Sandnes' WHERE LastName='Tjessem' AND FirstName='Jakob'
\par 
\par \hich\af4\dbch\af31505\loch\f4 Notice the WHERE clause in the DELETE syntax. The WHERE clause specif\hich\af4\dbch\af31505\loch\f4 ies which record or records that should be deleted. If you omit the WHERE clause, all records will be deleted!
\par 
\par \hich\af4\dbch\af31505\loch\f4 DELETE FROM Persons WHERE LastName='Tjessem' AND FirstName='Jakob'
\par 
\par \hich\af4\dbch\af31505\loch\f4 SELECT * FROM customers WHERE companyname LIKE 'a%'
\par 
\par \hich\af4\dbch\af31505\loch\f4 SQL JOIN
\par \hich\af4\dbch\af31505\loch\f4 The JOIN keywo\hich\af4\dbch\af31505\loch\f4 rd is used in an SQL statement to query data from two or more tables, based on a relationship between certain columns in these tables.
\par \hich\af4\dbch\af31505\loch\f4 Tables in a database are often related to each other with keys.
\par \hich\af4\dbch\af31505\loch\f4 A primary key is a column (or a combination of columns) w\hich\af4\dbch\af31505\loch\f4 
ith a unique value for each row. Each primary key value must be unique within the table. The purpose is to bind data together, across tables, without repeating all of the data in every table.
\par \hich\af4\dbch\af31505\loch\f4 Different SQL JOINs
\par \hich\af4\dbch\af31505\loch\f4 Before we continue with examples, we will li\hich\af4\dbch\af31505\loch\f4 st the types of JOIN you can use, and the differences between them.
\par \hich\af4\dbch\af31505\loch\f4 JOIN: Return rows when there is at least one match in both tables 
\par \hich\af4\dbch\af31505\loch\f4 LEFT JOIN: Return all rows from the left table, even if there are no matches in the right table 
\par \hich\af4\dbch\af31505\loch\f4 RIGHT JOIN: Return all r\hich\af4\dbch\af31505\loch\f4 ows from the right table, even if there are no matches in the left table 
\par \hich\af4\dbch\af31505\loch\f4 FULL JOIN: Return rows when there is a match in one of the tables 
\par \hich\af4\dbch\af31505\loch\f4 SQL INNER JOIN Keyword
\par \hich\af4\dbch\af31505\loch\f4 The INNER JOIN keyword return rows when there is at least one match in both tables.
\par \hich\af4\dbch\af31505\loch\f4 PS: INNE\hich\af4\dbch\af31505\loch\f4 R JOIN is the same as JOIN.
\par \hich\af4\dbch\af31505\loch\f4 The "Persons" table:
\par \ltrrow}\trowd \irow0\irowband0\ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr
\brdrs\brdrw20\brdrcf16 \clcbpat7\cltxlrtb\clftsWidth3\clwWidth1836\clcbpatraw7 \cellx1728\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth1728\clcbpatraw7 \cellx3456\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth1728\clcbpatraw7 \cellx5184\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth1728\clcbpatraw7 \cellx6912\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth1728\clcbpatraw7 \cellx8640\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 P_Id\cell \hich\af4\dbch\af31505\loch\f4 LastName\cell \hich\af4\dbch\af31505\loch\f4 FirstName\cell \hich\af4\dbch\af31505\loch\f4 Address\cell \hich\af4\dbch\af31505\loch\f4 City\cell 
}\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow0\irowband0\ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth1836\clcbpatraw7 \cellx1728\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth1728\clcbpatraw7 \cellx3456\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth1728\clcbpatraw7 \cellx5184\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth1728\clcbpatraw7 \cellx6912\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth1728\clcbpatraw7 \cellx8640\row \ltrrow}\trowd \irow1\irowband1\ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 
\clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1836\clshdrawnil \cellx1728\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb
\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx3456\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx5184\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx6912
\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx8640\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl
\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 1\cell \hich\af4\dbch\af31505\loch\f4 Hansen\cell 
\hich\af4\dbch\af31505\loch\f4 Ola\cell \hich\af4\dbch\af31505\loch\f4 Timoteivn 10\cell \hich\af4\dbch\af31505\loch\f4 Sandnes\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {
\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow1\irowband1\ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl
\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1836\clshdrawnil \cellx1728\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 
\clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx3456\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx5184\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx6912
\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx8640\row \ltrrow}\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl
\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 2\cell \hich\af4\dbch\af31505\loch\f4 Svendson
\cell \hich\af4\dbch\af31505\loch\f4 Tove\cell \hich\af4\dbch\af31505\loch\f4 Borgvn 23\cell \hich\af4\dbch\af31505\loch\f4 Sandnes\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow2\irowband2\ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth1836\clshdrawnil \cellx1728\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx3456
\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx5184\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl
\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx6912\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 
\clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx8640\row \ltrrow}\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl
\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 3\cell \hich\af4\dbch\af31505\loch\f4 Pettersen
\cell \hich\af4\dbch\af31505\loch\f4 Kari\cell \hich\af4\dbch\af31505\loch\f4 Storgt 20\cell \hich\af4\dbch\af31505\loch\f4 Stavanger\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow3\irowband3\lastrow \ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth1836\clshdrawnil \cellx1728\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx3456
\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx5184\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl
\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx6912\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 
\clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx8640\row }\pard \ltrpar\ql \li0\ri0\nowidctlpar\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0\itap0 {
\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 The "Orders" table:
\par \ltrrow}\trowd \irow0\irowband0\ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr
\brdrs\brdrw20\brdrcf16 \clcbpat7\cltxlrtb\clftsWidth3\clwWidth2988\clcbpatraw7 \cellx2880\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth2880\clcbpatraw7 \cellx5760\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth2880\clcbpatraw7 \cellx8640\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 O_Id\cell \hich\af4\dbch\af31505\loch\f4 OrderNo\cell \hich\af4\dbch\af31505\loch\f4 P_Id\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow0\irowband0\ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth2988\clcbpatraw7 \cellx2880\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth2880\clcbpatraw7 \cellx5760\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth2880\clcbpatraw7 \cellx8640\row \ltrrow}\trowd \irow1\irowband1\ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 
\clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2988\clshdrawnil \cellx2880\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb
\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx5760\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx8640\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 1\cell \hich\af4\dbch\af31505\loch\f4 77895\cell \hich\af4\dbch\af31505\loch\f4 3\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow1\irowband1\ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth2988\clshdrawnil \cellx2880\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx5760
\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx8640\row \ltrrow}\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl
\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 2\cell \hich\af4\dbch\af31505\loch\f4 44678\cell 
\hich\af4\dbch\af31505\loch\f4 3\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow2\irowband2\ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth2988\clshdrawnil \cellx2880\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx5760
\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx8640\row \ltrrow}\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl
\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 3\cell \hich\af4\dbch\af31505\loch\f4 22456\cell 
\hich\af4\dbch\af31505\loch\f4 1\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow3\irowband3\ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth2988\clshdrawnil \cellx2880\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx5760
\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx8640\row \ltrrow}\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl
\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 4\cell \hich\af4\dbch\af31505\loch\f4 24562\cell 
\hich\af4\dbch\af31505\loch\f4 1\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow4\irowband4\ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth2988\clshdrawnil \cellx2880\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx5760
\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx8640\row \ltrrow}\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl
\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 5\cell \hich\af4\dbch\af31505\loch\f4 34764\cell 
\hich\af4\dbch\af31505\loch\f4 15\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\trowd \irow5\irowband5\lastrow \ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr
\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2988\clshdrawnil \cellx2880\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx5760\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx8640
\row }\pard \ltrpar\ql \li0\ri0\nowidctlpar\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
Now we want to list all the persons with any orders.
\par \hich\af4\dbch\af31505\loch\f4 SELECT Persons.LastName, Persons.FirstName, Orders.OrderNo}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 FROM Persons}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 INNER JOIN Orders}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 ON Persons.P_Id=Orders.P_Id}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 ORDER BY Persons.LastName
\par \hich\af4\dbch\af31505\loch\f4 The result-set will look like this:
\par \ltrrow}\trowd \irow0\irowband0\ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr
\brdrs\brdrw20\brdrcf16 \clcbpat7\cltxlrtb\clftsWidth3\clwWidth2988\clcbpatraw7 \cellx2880\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth2880\clcbpatraw7 \cellx5760\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth2880\clcbpatraw7 \cellx8640\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 LastName\cell \hich\af4\dbch\af31505\loch\f4 FirstName\cell \hich\af4\dbch\af31505\loch\f4 OrderNo\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow0\irowband0\ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth2988\clcbpatraw7 \cellx2880\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth2880\clcbpatraw7 \cellx5760\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth2880\clcbpatraw7 \cellx8640\row \ltrrow}\trowd \irow1\irowband1\ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 
\clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2988\clshdrawnil \cellx2880\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb
\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx5760\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx8640\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Hansen\cell \hich\af4\dbch\af31505\loch\f4 Ola\cell \hich\af4\dbch\af31505\loch\f4 22456\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow1\irowband1\ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth2988\clshdrawnil \cellx2880\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx5760
\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx8640\row \ltrrow}\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl
\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Hansen\cell \hich\af4\dbch\af31505\loch\f4 Ola
\cell \hich\af4\dbch\af31505\loch\f4 24562\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\trowd \irow2\irowband2\ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr
\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2988\clshdrawnil \cellx2880\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx5760\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx8640
\row \ltrrow}\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 Pettersen\cell \hich\af4\dbch\af31505\loch\f4 Kari\cell \hich\af4\dbch\af31505\loch\f4 77895\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {
\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow3\irowband3\ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl
\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2988\clshdrawnil \cellx2880\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 
\clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx5760\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx8640\row \ltrrow}\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Pettersen\cell \hich\af4\dbch\af31505\loch\f4 Kari\cell \hich\af4\dbch\af31505\loch\f4 44678\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow4\irowband4\lastrow \ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth2988\clshdrawnil \cellx2880\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx5760
\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx8640\row }\pard \ltrpar\ql \li0\ri0\nowidctlpar
\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 The INNER JOIN keyword ret
\hich\af4\dbch\af31505\loch\f4 urn rows when there is at least one match in both tables. If there are rows in "Persons" that do not have matches in "Orders", those rows will NOT be listed.
\par \hich\af4\dbch\af31505\loch\f4 SQL LEFT JOIN Keyword
\par \hich\af4\dbch\af31505\loch\f4 The LEFT JOIN keyword returns all rows from the left table (table_name1), ev\hich\af4\dbch\af31505\loch\f4 en if there are no matches in the right table (table_name2).
\par \hich\af4\dbch\af31505\loch\f4 The "Persons" table:
\par \ltrrow}\trowd \irow0\irowband0\ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr
\brdrs\brdrw20\brdrcf16 \clcbpat7\cltxlrtb\clftsWidth3\clwWidth1836\clcbpatraw7 \cellx1728\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth1728\clcbpatraw7 \cellx3456\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth1728\clcbpatraw7 \cellx5184\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth1728\clcbpatraw7 \cellx6912\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth1728\clcbpatraw7 \cellx8640\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 P_Id\cell \hich\af4\dbch\af31505\loch\f4 LastName\cell \hich\af4\dbch\af31505\loch\f4 FirstName\cell \hich\af4\dbch\af31505\loch\f4 Address\cell \hich\af4\dbch\af31505\loch\f4 City\cell 
}\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow0\irowband0\ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth1836\clcbpatraw7 \cellx1728\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth1728\clcbpatraw7 \cellx3456\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth1728\clcbpatraw7 \cellx5184\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth1728\clcbpatraw7 \cellx6912\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth1728\clcbpatraw7 \cellx8640\row \ltrrow}\trowd \irow1\irowband1\ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 
\clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1836\clshdrawnil \cellx1728\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb
\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx3456\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx5184\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx6912
\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx8640\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl
\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 1\cell \hich\af4\dbch\af31505\loch\f4 Hansen\cell 
\hich\af4\dbch\af31505\loch\f4 Ola\cell \hich\af4\dbch\af31505\loch\f4 Timoteivn 10\cell \hich\af4\dbch\af31505\loch\f4 Sandnes\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {
\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow1\irowband1\ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl
\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1836\clshdrawnil \cellx1728\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 
\clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx3456\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx5184\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx6912
\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx8640\row \ltrrow}\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl
\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 2\cell \hich\af4\dbch\af31505\loch\f4 Svendson
\cell \hich\af4\dbch\af31505\loch\f4 Tove\cell \hich\af4\dbch\af31505\loch\f4 Borgvn 23\cell \hich\af4\dbch\af31505\loch\f4 Sandnes\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow2\irowband2\ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth1836\clshdrawnil \cellx1728\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx3456
\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx5184\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl
\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx6912\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 
\clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx8640\row \ltrrow}\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl
\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 3\cell \hich\af4\dbch\af31505\loch\f4 Pettersen
\cell \hich\af4\dbch\af31505\loch\f4 Kari\cell \hich\af4\dbch\af31505\loch\f4 Storgt 20\cell \hich\af4\dbch\af31505\loch\f4 Stavanger\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow3\irowband3\ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth1836\clshdrawnil \cellx1728\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx3456
\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx5184\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl
\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx6912\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 
\clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx8640\row \ltrrow}\trowd \irow4\irowband4\ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblrsid11607506\tblind0\tblindtype3 
\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \clcbpat7\cltxlrtb\clftsWidth3\clwWidth1836\clcbpatraw7 \cellx1728\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl
\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \clcbpat7\cltxlrtb\clftsWidth3\clwWidth1728\clcbpatraw7 \cellx3456\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb
\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \clcbpat7\cltxlrtb\clftsWidth3\clwWidth5184\clcbpatraw7 \cellx8640\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl
\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 The "Orders" table:O_Id\cell 
\hich\af4\dbch\af31505\loch\f4 Orde\hich\af4\dbch\af31505\loch\f4 rNo\cell \hich\af4\dbch\af31505\loch\f4 P_Id\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 
\af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid11607506 \trowd \irow4\irowband4\ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblrsid11607506\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl
\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \clcbpat7\cltxlrtb\clftsWidth3\clwWidth1836\clcbpatraw7 \cellx1728\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb
\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \clcbpat7\cltxlrtb\clftsWidth3\clwWidth1728\clcbpatraw7 \cellx3456\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr
\brdrs\brdrw20\brdrcf16 \clcbpat7\cltxlrtb\clftsWidth3\clwWidth5184\clcbpatraw7 \cellx8640\row \ltrrow}\trowd \irow5\irowband5\ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblrsid11607506\tblind0\tblindtype3 
\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1836\clshdrawnil \cellx1728\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl
\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx3456\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 
\clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth5184\clshdrawnil \cellx8640\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {
\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 1\cell \hich\af4\dbch\af31505\loch\f4 77895\cell \hich\af4\dbch\af31505\loch\f4 3\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid11607506 \trowd \irow5\irowband5\ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblrsid11607506\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth1836\clshdrawnil \cellx1728\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx3456
\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth5184\clshdrawnil \cellx8640\row \ltrrow}\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl
\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 2\cell \hich\af4\dbch\af31505\loch\f4 44678\cell 
\hich\af4\dbch\af31505\loch\f4 3\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid11607506 \trowd \irow6\irowband6\ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblrsid11607506\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth1836\clshdrawnil \cellx1728\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx3456
\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth5184\clshdrawnil \cellx8640\row \ltrrow}\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl
\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 3\cell \hich\af4\dbch\af31505\loch\f4 22456\cell 
\hich\af4\dbch\af31505\loch\f4 1\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid11607506 \trowd \irow7\irowband7\ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblrsid11607506\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth1836\clshdrawnil \cellx1728\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx3456
\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth5184\clshdrawnil \cellx8640\row \ltrrow}\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl
\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 4\cell \hich\af4\dbch\af31505\loch\f4 24562\cell 
\hich\af4\dbch\af31505\loch\f4 1\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid11607506 \trowd \irow8\irowband8\ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblrsid11607506\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth1836\clshdrawnil \cellx1728\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx3456
\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth5184\clshdrawnil \cellx8640\row \ltrrow}\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl
\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 5\cell \hich\af4\dbch\af31505\loch\f4 34764\cell 
\hich\af4\dbch\af31505\loch\f4 15\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid11607506 
\trowd \irow9\irowband9\lastrow \ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblrsid11607506\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb
\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1836\clshdrawnil \cellx1728\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx3456\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth5184\clshdrawnil \cellx8640
\row }\pard \ltrpar\ql \li0\ri0\nowidctlpar\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
SELECT Persons.LastName, Persons.FirstName, Orders.OrderNo}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 FROM Persons}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 LEFT JOIN Orders}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 ON Persons.P_Id=Orders.P_Id}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 ORDER BY Persons.LastName
\par \hich\af4\dbch\af31505\loch\f4 The result-set will look like this:
\par \ltrrow}\trowd \irow0\irowband0\ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr
\brdrs\brdrw20\brdrcf16 \clcbpat7\cltxlrtb\clftsWidth3\clwWidth2988\clcbpatraw7 \cellx2880\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth2880\clcbpatraw7 \cellx5760\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth2880\clcbpatraw7 \cellx8640\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 LastName\cell \hich\af4\dbch\af31505\loch\f4 Fi\hich\af4\dbch\af31505\loch\f4 rstName\cell \hich\af4\dbch\af31505\loch\f4 OrderNo\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow0\irowband0\ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth2988\clcbpatraw7 \cellx2880\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth2880\clcbpatraw7 \cellx5760\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth2880\clcbpatraw7 \cellx8640\row \ltrrow}\trowd \irow1\irowband1\ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 
\clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2988\clshdrawnil \cellx2880\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb
\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx5760\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx8640\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Hansen\cell \hich\af4\dbch\af31505\loch\f4 Ola\cell \hich\af4\dbch\af31505\loch\f4 22456\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow1\irowband1\ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth2988\clshdrawnil \cellx2880\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx5760
\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx8640\row \ltrrow}\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl
\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Hansen\cell \hich\af4\dbch\af31505\loch\f4 Ola
\cell \hich\af4\dbch\af31505\loch\f4 24562\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\trowd \irow2\irowband2\ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr
\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2988\clshdrawnil \cellx2880\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx5760\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx8640
\row \ltrrow}\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 Pettersen\cell \hich\af4\dbch\af31505\loch\f4 Kari\cell \hich\af4\dbch\af31505\loch\f4 77895\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {
\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow3\irowband3\ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl
\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2988\clshdrawnil \cellx2880\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 
\clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx5760\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx8640\row \ltrrow}\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Pettersen\cell \hich\af4\dbch\af31505\loch\f4 Kari\cell \hich\af4\dbch\af31505\loch\f4 44678\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow4\irowband4\ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth2988\clshdrawnil \cellx2880\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx5760
\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx8640\row \ltrrow}\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl
\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Svendson\cell \hich\af4\dbch\af31505\loch\f4 Tove
\cell \~\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow5\irowband5\lastrow \ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth2988\clshdrawnil \cellx2880\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx5760
\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx8640\row }\pard \ltrpar\ql \li0\ri0\nowidctlpar
\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
The LEFT JOIN keyword returns all the rows from the left table (Persons), even if there are no matches in the right table (Orders).
\par \hich\af4\dbch\af31505\loch\f4 The FULL J\hich\af4\dbch\af31505\loch\f4 OIN keyword return rows when there is a match in one of the tables.
\par \hich\af4\dbch\af31505\loch\f4 SQL FULL JOIN Example
\par \hich\af4\dbch\af31505\loch\f4 The "Persons" table:
\par \ltrrow}\trowd \irow0\irowband0\ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr
\brdrs\brdrw20\brdrcf16 \clcbpat7\cltxlrtb\clftsWidth3\clwWidth1836\clcbpatraw7 \cellx1728\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth1728\clcbpatraw7 \cellx3456\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth1728\clcbpatraw7 \cellx5184\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth1728\clcbpatraw7 \cellx6912\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth1728\clcbpatraw7 \cellx8640\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 P_Id\cell \hich\af4\dbch\af31505\loch\f4 LastName\cell \hich\af4\dbch\af31505\loch\f4 FirstName\cell \hich\af4\dbch\af31505\loch\f4 Address\cell \hich\af4\dbch\af31505\loch\f4 City\cell 
}\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow0\irowband0\ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth1836\clcbpatraw7 \cellx1728\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth1728\clcbpatraw7 \cellx3456\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth1728\clcbpatraw7 \cellx5184\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth1728\clcbpatraw7 \cellx6912\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth1728\clcbpatraw7 \cellx8640\row \ltrrow}\trowd \irow1\irowband1\ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 
\clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1836\clshdrawnil \cellx1728\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb
\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx3456\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx5184\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx6912
\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx8640\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl
\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 1\cell \hich\af4\dbch\af31505\loch\f4 Hansen\cell 
\hich\af4\dbch\af31505\loch\f4 Ola\cell \hich\af4\dbch\af31505\loch\f4 Timoteivn 10\cell \hich\af4\dbch\af31505\loch\f4 Sandnes\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {
\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow1\irowband1\ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl
\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1836\clshdrawnil \cellx1728\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 
\clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx3456\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx5184\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx6912
\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx8640\row \ltrrow}\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl
\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 2\cell \hich\af4\dbch\af31505\loch\f4 Svendson
\cell \hich\af4\dbch\af31505\loch\f4 Tove\cell \hich\af4\dbch\af31505\loch\f4 Borgvn 23\cell \hich\af4\dbch\af31505\loch\f4 Sandnes\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow2\irowband2\ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth1836\clshdrawnil \cellx1728\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx3456
\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx5184\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl
\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx6912\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 
\clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx8640\row \ltrrow}\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl
\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 3\cell \hich\af4\dbch\af31505\loch\f4 Pettersen
\cell \hich\af4\dbch\af31505\loch\f4 Kari\cell \hich\af4\dbch\af31505\loch\f4 Storgt 20\cell \hich\af4\dbch\af31505\loch\f4 Stavanger\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow3\irowband3\lastrow \ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth1836\clshdrawnil \cellx1728\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx3456
\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx5184\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl
\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx6912\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 
\clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth1728\clshdrawnil \cellx8640\row }\pard \ltrpar\ql \li0\ri0\nowidctlpar\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0\itap0 {
\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 The "Orders" table:
\par \ltrrow}\trowd \irow0\irowband0\ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr
\brdrs\brdrw20\brdrcf16 \clcbpat7\cltxlrtb\clftsWidth3\clwWidth2988\clcbpatraw7 \cellx2880\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth2880\clcbpatraw7 \cellx5760\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth2880\clcbpatraw7 \cellx8640\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 O_Id\cell \hich\af4\dbch\af31505\loch\f4 OrderNo\cell \hich\af4\dbch\af31505\loch\f4 P_Id\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow0\irowband0\ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth2988\clcbpatraw7 \cellx2880\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth2880\clcbpatraw7 \cellx5760\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth2880\clcbpatraw7 \cellx8640\row \ltrrow}\trowd \irow1\irowband1\ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 
\clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2988\clshdrawnil \cellx2880\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb
\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx5760\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx8640\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 1\cell \hich\af4\dbch\af31505\loch\f4 77895\cell \hich\af4\dbch\af31505\loch\f4 3\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow1\irowband1\ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth2988\clshdrawnil \cellx2880\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx5760
\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx8640\row \ltrrow}\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl
\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 2\cell \hich\af4\dbch\af31505\loch\f4 44678\cell 
\hich\af4\dbch\af31505\loch\f4 3\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow2\irowband2\ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth2988\clshdrawnil \cellx2880\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx5760
\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx8640\row \ltrrow}\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl
\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 3\cell \hich\af4\dbch\af31505\loch\f4 22456\cell 
\hich\af4\dbch\af31505\loch\f4 1\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow3\irowband3\ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth2988\clshdrawnil \cellx2880\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx5760
\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx8640\row \ltrrow}\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl
\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 4\cell \hich\af4\dbch\af31505\loch\f4 24562\cell 
\hich\af4\dbch\af31505\loch\f4 1\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow4\irowband4\ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth2988\clshdrawnil \cellx2880\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx5760
\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx8640\row \ltrrow}\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl
\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 5\cell \hich\af4\dbch\af31505\loch\f4 34764\cell 
\hich\af4\dbch\af31505\loch\f4 15\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\trowd \irow5\irowband5\lastrow \ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr
\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2988\clshdrawnil \cellx2880\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx5760\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx8640
\row }\pard \ltrpar\ql \li0\ri0\nowidctlpar\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
SELECT Persons.LastName, Persons.FirstName, Orders.OrderNo}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 FROM Persons}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 FULL JOIN Orders}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 ON Persons.P_Id=Orders.P_Id}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 ORDER BY Persons.LastName
\par \hich\af4\dbch\af31505\loch\f4 The result-set wi\hich\af4\dbch\af31505\loch\f4 ll look like this:
\par \ltrrow}\trowd \irow0\irowband0\ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr
\brdrs\brdrw20\brdrcf16 \clcbpat7\cltxlrtb\clftsWidth3\clwWidth2988\clcbpatraw7 \cellx2880\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth2880\clcbpatraw7 \cellx5760\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth2880\clcbpatraw7 \cellx8640\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 LastName\cell \hich\af4\dbch\af31505\loch\f4 FirstName\cell \hich\af4\dbch\af31505\loch\f4 OrderNo\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow0\irowband0\ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth2988\clcbpatraw7 \cellx2880\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth2880\clcbpatraw7 \cellx5760\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\clcbpat7\cltxlrtb\clftsWidth3\clwWidth2880\clcbpatraw7 \cellx8640\row \ltrrow}\trowd \irow1\irowband1\ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 
\clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2988\clshdrawnil \cellx2880\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb
\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx5760\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx8640\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Hansen\cell \hich\af4\dbch\af31505\loch\f4 Ola\cell \hich\af4\dbch\af31505\loch\f4 22456\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow1\irowband1\ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth2988\clshdrawnil \cellx2880\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx5760
\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx8640\row \ltrrow}\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl
\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Hansen\cell \hich\af4\dbch\af31505\loch\f4 Ola
\cell \hich\af4\dbch\af31505\loch\f4 24562\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\trowd \irow2\irowband2\ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr
\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2988\clshdrawnil \cellx2880\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx5760\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx8640
\row \ltrrow}\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 Pettersen\cell \hich\af4\dbch\af31505\loch\f4 Kari\cell \hich\af4\dbch\af31505\loch\f4 77895\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {
\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow3\irowband3\ltrrow\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl
\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2988\clshdrawnil \cellx2880\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 
\clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx5760\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx8640\row \ltrrow}\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Pettersen\cell \hich\af4\dbch\af31505\loch\f4 Kari\cell \hich\af4\dbch\af31505\loch\f4 44678\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow4\irowband4\ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth2988\clshdrawnil \cellx2880\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx5760
\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx8640\row \ltrrow}\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl
\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Svendson\cell \hich\af4\dbch\af31505\loch\f4 Tove
\cell \~\cell }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow5\irowband5\ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth2988\clshdrawnil \cellx2880\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx5760
\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx8640\row \ltrrow}\pard \ltrpar\ql \li0\ri0\nowidctlpar\intbl
\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \~\cell \~\cell \hich\af4\dbch\af31505\loch\f4 34764\cell }\pard \ltrpar
\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \trowd \irow6\irowband6\lastrow \ltrrow
\ts11\trgaph108\trleft-108\trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 
\cltxlrtb\clftsWidth3\clwWidth2988\clshdrawnil \cellx2880\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx5760
\clvertalc\clbrdrt\brdrs\brdrw20\brdrcf16 \clbrdrl\brdrs\brdrw20\brdrcf16 \clbrdrb\brdrs\brdrw20\brdrcf16 \clbrdrr\brdrs\brdrw20\brdrcf16 \cltxlrtb\clftsWidth3\clwWidth2880\clshdrawnil \cellx8640\row }\pard \ltrpar\ql \li0\ri0\nowidctlpar
\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
The FULL JOIN keyword returns all the rows from the left table (Persons), and all the rows from the r\hich\af4\dbch\af31505\loch\f4 
ight table (Orders). If there are rows in "Persons" that do not have matches in "Orders", or if there are rows in "Orders" that do not have matches in "Persons", those rows will be listed as well.
\par \hich\af4\dbch\af31505\loch\f4 The SQL UNION Operator
\par \hich\af4\dbch\af31505\loch\f4 The UNION operator is used to combin\hich\af4\dbch\af31505\loch\f4 e the result-set of two or more SELECT statements.
\par \hich\af4\dbch\af31505\loch\f4 Notice that each SELECT statement within the UNION must have the same number of columns. The columns must also have similar data types. Also, the columns in each SELECT statement must be in the same order.
\par 
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 11.\~ Unary and binary operator: non-overloadable operators.
\par \hich\af4\dbch\af31505\loch\f4 12.\~ Late Binding.
\par \hich\af4\dbch\af31505\loch\f4 13.\~ Some critical situation on inheritance: Having same variable name in both base and derived class.
\par \~
\par \~
\par \hich\af4\dbch\af31505\loch\f4 AND FAQs on dlls, static lib, Linking/binding
\par \~
\par \hich\af4\dbch\af31505\loch\f4 1.\~\~\~\~\~ Introducti\hich\af4\dbch\af31505\loch\f4 on on compiling, object code and linking.
\par \hich\af4\dbch\af31505\loch\f4 2.\~\~\~\~\~ Introduction to static and dynamic library.
\par \hich\af4\dbch\af31505\loch\f4 3.\~\~\~\~\~ LoadLibrary, FreeLibrary.
\par \hich\af4\dbch\af31505\loch\f4 4.\~\~\~\~\~ Comparison on Exe and dlls.
\par \hich\af4\dbch\af31505\loch\f4 5.\~\~\~\~\~ Multithreading and multitasking.
\par \~
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 A.B.
\par \hich\af4\dbch\af31505\loch\f4 General Tips To Overcome An Interview
\par \hich\af4\dbch\af31505\loch\f4 Camp\hich\af4\dbch\af31505\loch\f4 
us So what if you are not a mountaineer. Or a keen hiker. You still cannot treat your interview like a careless morning trot along a jogger's path. Your jaw-jaw at the interview table is nothing less than a cautious climb up a mountain trail--which begins
\hich\af4\dbch\af31505\loch\f4  \hich\af4\dbch\af31505\loch\f4 
around your early childhood and meanders through the years at the academia before reaching a new summit in your career.And as you retrace your steps down memory lane make sure that you post flags at important landmarks of your life and career, so that you
\hich\af4\dbch\af31505\loch\f4  \hich\af4\dbch\af31505\loch\f4 can pop them before the interview panel scoops them out of you. You don't want to be at the receiving end, do you?
\par \hich\af4\dbch\af31505\loch\f4 Face the panel, but don't fall of the chair in a headlong rush-and-skid attempt to tell your story. Take one step at a time. If you place you\hich\af4\dbch\af31505\loch\f4 
r foot on slippery ground, you could be ejecting out on a free fall.
\par \hich\af4\dbch\af31505\loch\f4 So prepare, fortify your thoughts, re-jig your memory, and script and design your story (without frills and falsity). Without the right preparation and storyboard, you could be a loser at\hich\af4\dbch\af31505\loch\f4 
 the interview. Here are a few preparation tips that books on interviews sometimes overlook.\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~
\par \hich\af4\dbch\af31505\loch\f4 Before the interview\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~  HYPERLINK "http://www.freshersworld.com/intervi\hich\af4\dbch\af31505\loch\f4 ew/" \\
l "top"  INCLUDEPICTURE "http://www.freshersworld.com/img/top.gif" \\* MERGEFORMATINET 
\par \hich\af4\dbch\af31505\loch\f4 1. Chronological Outline of Career and Education Divide your life into "segments" defining your university, first job, second job. For each stage, jot down :
\par \hich\af4\dbch\af31505\loch\f4 The r\hich\af4\dbch\af31505\loch\f4 
eason for opting certain course or profession; Your job responsibilities in your previous/current job; Reason of leaving your earlier/current job. You should be clear in your mind where you want to be in the short and long term and ask yourself the reason
\hich\af4\dbch\af31505\loch\f4  \hich\af4\dbch\af31505\loch\f4 why you would be appropriate for the job you are being interviewed for and how it will give shape to your future course.
\par \hich\af4\dbch\af31505\loch\f4 2. Strengths and Weaknesses
\par \hich\af4\dbch\af31505\loch\f4 You should keep a regular check on your strengths and weaknesses. Write down three (3) technical and three \hich\af4\dbch\af31505\loch\f4 
(3) non-technical personal strengths. Most importantly, show examples of your skills. This proves more effective than simply talking about them. So if you're asked about a general skill, provide a specific example to help you fulfil the interviewer's expe
\hich\af4\dbch\af31505\loch\f4 c\hich\af4\dbch\af31505\loch\f4 tations. It isn't enough to say you've got "excellent leadership skills". Instead, try saying:
\par \hich\af4\dbch\af31505\loch\f4 "I think I have excellent leaderships skills which I have acquired through a combination of effective communication, delegation and personal interaction. This ha\hich\af4\dbch\af31505\loch\f4 
s helped my team achieve its goals."
\par \hich\af4\dbch\af31505\loch\f4 As compared to strengths, the area of weaknesses is difficult to handle. Put across your weakness in such a way that it at leaset seems to be a positive virtue to the interviewer. Describe a weakness or area for develop
\hich\af4\dbch\af31505\loch\f4 ment that you have worked on and have now overcome.
\par \hich\af4\dbch\af31505\loch\f4 3. Questions you should be prepared for\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~
  HYPERLINK "http://www.freshersworld.com/interview/" \\l "top"  INCLUDEPICTURE \hich\af4\dbch\af31505\loch\f4 "http://www.freshersworld.com/img/top.gif" \\* MERGEFORMATINET 
\par \hich\af4\dbch\af31505\loch\f4 Tell us about yourself.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 What do you know about our company?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Why do you want to join our company?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 What are your strengths and weaknesses?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 
\af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Where do you see yourself in the next five years?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232
\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 How have you improved the nature of your job in the past years of your working? Why should w\hich\af4\dbch\af31505\loch\f4 e hire you?}{\rtlch\fcs1 
\af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
What contributions to profits have you made in your present or former company? Why are you looking for a change?
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
Answers to some difficult questions :\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~  HYPERLINK "http://www.freshersworld.com/interview/\hich\af4\dbch\af31505\loch\f4 " \\
l "top"  INCLUDEPICTURE "http://www.freshersworld.com/img/top.gif" \\* MERGEFORMATINET 
\par \hich\af4\dbch\af31505\loch\f4 Tell me about yourself ?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 Start from your education and give a brief coverage of previous experiences. Emphasise more on your recent experience explaining your job pro\hich\af4\dbch\af31505\loch\f4 file.
\par \hich\af4\dbch\af31505\loch\f4 What do you think of your boss?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 Put across a positive image, but don't exaggerate.
\par \hich\af4\dbch\af31505\loch\f4 Why should we hire you? Or why are you interested in this job?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Sum up your work experiences with your abilities and emphasise your strongest qualities and achievements\hich\af4\dbch\af31505\loch\f4 
. Let your interviewer know that you will prove to be an asset to the company.
\par \hich\af4\dbch\af31505\loch\f4 How much money do you want?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 Indicate your present salary and emphasise that the opportunity is the most important consideration.
\par \hich\af4\dbch\af31505\loch\f4 Do you prefer to work in a group?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 Be honest and \hich\af4\dbch\af31505\loch\f4 give examples how you've worked by yourself and also with others. Prove your flexibility.
\par \hich\af4\dbch\af31505\loch\f4 4. Questions to As\~\~\~\~\~\~ \~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~
\par \~\hich\af4\dbch\af31505\loch\f4 At the end of the interview, most interviewers generally\hich\af4\dbch\af31505\loch\f4 
 ask if you have any questions. Therefore, you should be prepared beforehand with 2-3 technical and 2-3 non-technical questions and commit them to your memory before the interview.
\par \hich\af4\dbch\af31505\loch\f4 Do not ask queries related to your salary, vacation, bonuses, or other bene\hich\af4\dbch\af31505\loch\f4 
fits. This information should be discussed at the time of getting your joining letter. Here we are giving few sample questions that you can ask at the time of your interview.
\par \hich\af4\dbch\af31505\loch\f4 Sample Questions
\par \hich\af4\dbch\af31505\loch\f4 Could you tell me the growth plans and goals for the company?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Wh\hich\af4\dbch\af31505\loch\f4 at skills are important to be successful in this position?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 
\loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Why did you join this company? (optional)}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 What's the criteria your company uses for performance appraisal?}{
\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
With whom will I be interacting most frequently and what are their responsibilities and th\hich\af4\dbch\af31505\loch\f4 e nature of our interaction?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 
\loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 What is the time frame for making a decision at this position?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 What made the previous persons in this position successful/unsuccessful?

\par \~\hich\af4\dbch\af31505\loch\f4 5. Do your homework\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~
\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\hich\af4\dbch\af31505\loch\f4   HYPERLINK "http://www.freshersworld.com/interview/" \\l "top"  INCLUDEPICTURE "http://www.freshersworld.com/img/top.gif" \\* MERGEFORMATINET 
\par \~\hich\af4\dbch\af31505\loch\f4 Before going for an interview, find out as much information\hich\af4\dbch\af31505\loch\f4 
 on the company (go to JobsAhead Company Q and A) as possible. The best sources are the public library, the Internet (you can check out the company's site), and can even call the company and get the required information. The information gives you a one-up
\hich\af4\dbch\af31505\loch\f4  \hich\af4\dbch\af31505\loch\f4 in the interview besides proving your content company or position.
\par \~\hich\af4\dbch\af31505\loch\f4 Clearing the interview isn't necessarily a solitary attempt. Seek assistance from individuals who are in the profession and whose counsel you value most. Be confident in your approach and \hich\af4\dbch\af31505\loch\f4 
attitude; let the panel feel it through your demeanour, body language and dressing.
\par \hich\af4\dbch\af31505\loch\f4 Getting prepared for your interview is the best way to dig deep and know yourself. You will be surprised that it would breed a new familiarity become more familiar with you\hich\af4\dbch\af31505\loch\f4 
r own qualifications that will be make you present yourself better. All the best and get ready to give a treat.
\par 
\par \hich\af4\dbch\af31505\loch\f4 Preprocessor
\par \hich\af4\dbch\af31505\loch\f4 Q: How to avoid '#include' woes and redefinition errors?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 A: If you declare a class in your code the compiler normally needs to kn\hich\af4\dbch\af31505\loch\f4 
ow some information about the used class like e.g. size. But if you just uses a pointer or a reference, the compiler doesn't need to know those information at that point since pointers or references are always the same size (4 bytes on a windows system). 
\hich\af4\dbch\af31505\loch\f4 S\hich\af4\dbch\af31505\loch\f4 
o you just need to tell the compiler that there will be a class - in this case called 'CSomeClass' - which will be used later by that declared pointer or reference. In this case you can use the so-called 'forward declaration'...
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 class CFoo
\par \{
\par \hich\af4\dbch\af31505\loch\f4   CSom\hich\af4\dbch\af31505\loch\f4 eClass m_SomeClass;
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
In this example you would need to provide the complete definition of 'CSomeClass' since 'CFoo' will create one instance of it. Therefore the compiler needs to know the exact size of the class and how it looks like...
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 class \hich\af4\dbch\af31505\loch\f4 CSomeClass;
\par 
\par \hich\af4\dbch\af31505\loch\f4 class CFoo
\par \{
\par \hich\af4\dbch\af31505\loch\f4   CSomeClass* m_pSomeClass;
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
In this case you only have a pointer to 'CSomeClass'. Since the size of a pointer is independent from the size of the object it is pointing to the compiler just needs to know that there is somewher\hich\af4\dbch\af31505\loch\f4 
e a class named 'CSomeClass' is defined...}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 Most of the time forward declarations are used to prevent circular includes. Consider this
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 // classA.hpp
\par \hich\af4\dbch\af31505\loch\f4 #include <classB.hpp>;
\par 
\par \hich\af4\dbch\af31505\loch\f4 class A
\par \{
\par \hich\af4\dbch\af31505\loch\f4   B m_ClassB;
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par 
\par \hich\af4\dbch\af31505\loch\f4 // classB.hpp
\par \hich\af4\dbch\af31505\loch\f4 #include <classA.hpp>;
\par 
\par \hich\af4\dbch\af31505\loch\f4 class B
\par \{
\par \hich\af4\dbch\af31505\loch\f4   A m_ClassA;
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
In this case you will end up with circular includes. While compiling the 'classA.hpp' header file the header file 'classB.hpp' will be included. While compiling 'classB.hpp' header file the 'classA.hpp' will be included. While compiling...}{\rtlch\fcs1 
\af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
This will give problems even if you use inclusion guards like
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 #ifndef __CLASS_A_HPP
\par \hich\af4\dbch\af31505\loch\f4 #define __CLASS_A_HPP
\par 
\par \hich\af4\dbch\af31505\loch\f4 // Your class declaration
\par 
\par \hich\af4\dbch\af31505\loch\f4 #endif
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
Therefore it is not necessarely a good idea to include all the needed header files within your heade\hich\af4\dbch\af31505\loch\f4 r file. Using forward declarations will avoid those circular includes...
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q: What are __FILE__ and __LINE__?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 A: __FILE__ and __LINE__ are predefined macros and part of the C standard. During preprocessing, they are replaced respectively by a constant str\hich\af4\dbch\af31505\loch\f4 
ing holding the current file name and by a integer representing the current line number.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 There are other preprocessor variables including:}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f
}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 __DATE__ a string literal of the form "Mmm dd yyyy"}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 
\loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 __TIME__ a string literal of the form "hh:mm:ss"}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 __TIMESTAMP_\hich\af4\dbch\af31505\loch\f4 
_ a string literal of the form "Mmm dd yyyy hh:mm:ss"
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q: Why is there no ".h" in the include directive:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par \hich\af4\dbch\af31505\loch\f4 #include <iostream> 
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
A: The file "iostream.h" has been deprecate with the new C++ standard. Replacing it is the file "iostream" (without the\hich\af4\dbch\af31505\loch\f4 
 ".h"). "iostream" is part of the Standard Template Library (commonly refered to the STL) a new addition to the C++ standard.
\par 
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Memory management
\par \hich\af4\dbch\af31505\loch\f4 Q: What is the difference between delete and delete [] ?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 A: Whenever you allocate memory with new [], you ha\hich\af4\dbch\af31505\loch\f4 
ve to free the memory using delete []. When you allocate memory with new, then use delete without the brackets. You use new[] to allocate an array of values (always starting at the index 0).
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 int *pi = new int; // allocates a single integer
\par \hich\af4\dbch\af31505\loch\f4 int *pi_\hich\af4\dbch\af31505\loch\f4 array = new int[10]; // allocates an array of 10 integers
\par \hich\af4\dbch\af31505\loch\f4 delete pi;
\par \hich\af4\dbch\af31505\loch\f4 pi = 0;
\par \hich\af4\dbch\af31505\loch\f4 delete [] pi_array;
\par \hich\af4\dbch\af31505\loch\f4 pi_array = 0;
\par 
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q: Why does deleting the following char* cause my program to crash?
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 char*    a_string = "beware, the end is near!";
\par \hich\af4\dbch\af31505\loch\f4 delete[] a_string;
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
A: Because the memory that a_string points to was not allocated with new. Only delete memory that was allocated with new. In particular, this string is a constant, so you should not delete it. Also beware that you can not use delete to release memory al
\hich\af4\dbch\af31505\loch\f4 located with malloc.
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q: Why does declaring double x[500000] cause my program to crash?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 
\af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 A: Because such a large piece of memory exceeds the stack size (a stack overflow). You need to allocate the memory on the heap instead:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 double *x = new double\hich\af4\dbch\af31505\loch\f4 [500000];
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
Don't forget to delete the memory (with delete[]) after you are finished with it to avoid memory leaks.
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q: What is the difference between const char* and char* const?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 
\af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 A: char* const declares a constant pointer which has both read and write a\hich\af4\dbch\af31505\loch\f4 
ccess to a character (or character array). The pointer itself is a constant and you can not change it. Like all other constant variables, you must initialize it with a constant value at the same time when it is declared:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 char buffer[80];
\par \hich\af4\dbch\af31505\loch\f4 char* cons\hich\af4\dbch\af31505\loch\f4 t pBuffer = buffer;
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
const char* declares a pointer to a constant character (or a constant character array). The pointer can be changed, but the character (or array) to which it points can not be changed.
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q: What is the purpose of a const reference (const T&)?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 (Isn't a ref\hich\af4\dbch\af31505\loch\f4 erence type only useful when its value can be changed?)}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 
\loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 A: Passing by const reference avoids creating a temporary object (thus copying) and thus can vastly improve performance.}{
\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
However passing const references to the standard data types (char, int, long, d\hich\af4\dbch\af31505\loch\f4 ouble, ...) does not result in any performance gain. Usually, these types are passed by value instead.
\par 
\par \hich\af4\dbch\af31505\loch\f4 The rules for initializing references make passing by reference-to-const an efficient and attractive alternative to passing by value. 
\par \hich\af4\dbch\af31505\loch\f4 As in C, function\hich\af4\dbch\af31505\loch\f4  calls in C++ normally pass arguments by value. For example, given: 
\par \hich\af4\dbch\af31505\loch\f4 int abs(int i);}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 int n; 
\par \hich\af4\dbch\af31505\loch\f4 calling abs(n) passes argument n to function abs by value. That is, the program copies the value of n to abs's parameter i each time it makes this call. 
\par \hich\af4\dbch\af31505\loch\f4 C++ uses pass-by-value even for objects of class types. (In C++, class types include struct a\hich\af4\dbch\af31505\loch\f4 nd union types.) For example, given some struct type: 
\par \hich\af4\dbch\af31505\loch\f4 struct gadget}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \{}{\rtlch\fcs1 
\af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 // a whole bunch of fields}{\rtlch\fcs1 
\af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \}\hich\af4\dbch\af31505\loch\f4 ; 
\par \hich\af4\dbch\af31505\loch\f4 and: 
\par \hich\af4\dbch\af31505\loch\f4 int test(gadget g);}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 gadget x; 
\par \hich\af4\dbch\af31505\loch\f4 calling test(x) passes argument x by value. Much as before, the program copies x's value to parameter g each time it \hich\af4\dbch\af31505\loch\f4 makes this call. 
\par \hich\af4\dbch\af31505\loch\f4 
For large struct objects, passing by value can be very slow because it copies each byte of the argument to the corresponding byte of the parameter, as if by calling the Standard C memcpy function. The program does not necessarily call mem
\hich\af4\dbch\af31505\loch\f4 
cpy to do the job, but the argument passing mechanism behaves as if it did. Strictly speaking, passing a class object by value in C++ conceptually calls a special function associated with the class called the copy constructor. However, when the class is j
\hich\af4\dbch\af31505\loch\f4 u\hich\af4\dbch\af31505\loch\f4 st a struct as in C, the copy constructor behaves essentially like memcpy. 
\par \hich\af4\dbch\af31505\loch\f4 You can avoid the cost of copying a large argument by passing it by address rather than by value. You simply change the function declaration to: 
\par \hich\af4\dbch\af31505\loch\f4 int test(gadget *g); 
\par \hich\af4\dbch\af31505\loch\f4 and then cha\hich\af4\dbch\af31505\loch\f4 nge the function call to test(&x). Passing &x (the address of x) is often a lot less work than passing an entire copy of x. 
\par \hich\af4\dbch\af31505\loch\f4 Unfortunately, when you change the parameter type from gadget to "pointer to gadget," you introduce a change in the function's beha\hich\af4\dbch\af31505\loch\f4 
vior, or at least the possibility of a change. When passing by value, the function only sees a copy of the original gadget, so it cannot change that gadget. In my example, when passing by value, calling test(x) cannot change x. When passing by address, th
\hich\af4\dbch\af31505\loch\f4 e\hich\af4\dbch\af31505\loch\f4 
 function can dereference its pointer parameter and store new values into the gadget argument. That is, calling test(&x) might change x. Of course, you can prevent the function from tampering with its argument by using the const qualifier, as in: 
\par \hich\af4\dbch\af31505\loch\f4 int test\hich\af4\dbch\af31505\loch\f4 (gadget const *g); 
\par \hich\af4\dbch\af31505\loch\f4 
For very large objects, passing by address (with const) is almost always faster than passing by value. For objects of modest size (on the order of eight to 16 bytes), it isn't always clear at the outset whether passing by address will a
\hich\af4\dbch\af31505\loch\f4 
ctually be faster than passing by value. It depends on the target machine's architecture and what the function does with the parameter. Sometimes you just have to make your best guess and wait to measure the performance of the running program. If it turns
\hich\af4\dbch\af31505\loch\f4  \hich\af4\dbch\af31505\loch\f4 out that you guessed wrong, you may have to rewrite the function. 
\par \hich\af4\dbch\af31505\loch\f4 Unfortunately, rewriting a function call so that it uses pass-by-address instead of pass-by-value, or vice versa, can be a bona fide maintenance headache. Changing the function declaration \hich\af4\dbch\af31505\loch\f4 
from: 
\par \hich\af4\dbch\af31505\loch\f4 int test(gadget g); 
\par \hich\af4\dbch\af31505\loch\f4 to: 
\par \hich\af4\dbch\af31505\loch\f4 int test(gadget const *g); 
\par \hich\af4\dbch\af31505\loch\f4 isn't much fuss, nor is changing the corresponding function definition. But numerous function calls might be scattered throughout the code, and you have to rewrite all those calls. In some cases,
\hich\af4\dbch\af31505\loch\f4  a call such as text(x) becomes test(&x). In others, test(*p) becomes test(p) (where p is a "pointer to gadget"). 
\par \hich\af4\dbch\af31505\loch\f4 In C++, passing by reference offers an alternative to passing by address. You can declare the test function as: 
\par \hich\af4\dbch\af31505\loch\f4 int test(gadget const &g); 
\par \hich\af4\dbch\af31505\loch\f4 
In this case, parameter g has type "reference to const gadget." This lets you write the call as test(x), as if it were passing by value, but it yields the exact same performance as if it were passing by address. Again, the const qualifier prevents the fun
\hich\af4\dbch\af31505\loch\f4 c\hich\af4\dbch\af31505\loch\f4 tion from changing the value of its actual gadget argument. 
\par 
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Operators
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q: How do I overload the postfix increment and decrement operators? (as in x++ or x-- )?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232
\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 A: To specify the postfix increment and decrement operators, you must specify an int as an \hich\af4\dbch\af31505\loch\f4 argument:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 class MyClass
\par \{
\par \hich\af4\dbch\af31505\loch\f4 public:
\par \hich\af4\dbch\af31505\loch\f4     MyClass& operator++();    //Prefix increment operator  (++x)
\par \hich\af4\dbch\af31505\loch\f4     MyClass  operator++(int); //Postfix increment operator (x++)
\par 
\par \hich\af4\dbch\af31505\loch\f4     MyClass& operator--();    //Prefix decrement operator  (--x)
\par \hich\af4\dbch\af31505\loch\f4     MyClass  opera\hich\af4\dbch\af31505\loch\f4 tor--(int); //Postfix decrement operator (x--)
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par 
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q: Someone told me that if I want to increment a variable and that's all, I should use ++x instead of x++. Is this true?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 
\loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
A: If incrementing is all that you want to do (you are not assigning the variable to something else), then yes this is a good practice, especially if you are using the increment operator on a class.
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par \hich\af4\dbch\af31505\loch\f4 // Prefix operators are preferred in cases in t\hich\af4\dbch\af31505\loch\f4 he following common cases:
\par 
\par \hich\af4\dbch\af31505\loch\f4 for (;checkstate(x);++x) dosomething(x);
\par 
\par \hich\af4\dbch\af31505\loch\f4 ++x;
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
For the standard data types there is usually no performance difference, but for classes there are! The reason is that (for most common implementations of) postfix operators retain\hich\af4\dbch\af31505\loch\f4 
 a temporary copy of original variable and because the return value is returned by value, not by reference. The following code exemplifies this:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 class MyClass
\par \{
\par \hich\af4\dbch\af31505\loch\f4 public:
\par \hich\af4\dbch\af31505\loch\f4     MyClass& operator++()    //Prefix increment operator  (++x)
\par \hich\af4\dbch\af31505\loch\f4     \{
\par \hich\af4\dbch\af31505\loch\f4         /\hich\af4\dbch\af31505\loch\f4 /Perform increment operation
\par \hich\af4\dbch\af31505\loch\f4         return *this;
\par \hich\af4\dbch\af31505\loch\f4     \}
\par 
\par \hich\af4\dbch\af31505\loch\f4     MyClass  operator++(int) //Postfix increment operator (x++)
\par \hich\af4\dbch\af31505\loch\f4     \{
\par \hich\af4\dbch\af31505\loch\f4         MyClass temp = *this;
\par \hich\af4\dbch\af31505\loch\f4         //Perform increment operation
\par \hich\af4\dbch\af31505\loch\f4         return temp;
\par \hich\af4\dbch\af31505\loch\f4     \}
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par 
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Exception handling
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q: The \hich\af4\dbch\af31505\loch\f4 wrong catch statement catches an exception in the following code! Why?
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 #include <iostream>
\par 
\par \hich\af4\dbch\af31505\loch\f4 using namespace std;
\par 
\par \hich\af4\dbch\af31505\loch\f4 class A
\par \{
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par 
\par \hich\af4\dbch\af31505\loch\f4 class B : public A
\par \{
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par 
\par \hich\af4\dbch\af31505\loch\f4 int main()
\par \{
\par \hich\af4\dbch\af31505\loch\f4     B b;
\par 
\par \hich\af4\dbch\af31505\loch\f4     try
\par \hich\af4\dbch\af31505\loch\f4     \{
\par \hich\af4\dbch\af31505\loch\f4         throw b;
\par \hich\af4\dbch\af31505\loch\f4     \}
\par \hich\af4\dbch\af31505\loch\f4     catch (A& ea)
\par \hich\af4\dbch\af31505\loch\f4     \{
\par \hich\af4\dbch\af31505\loch\f4         cou\hich\af4\dbch\af31505\loch\f4 t << "Caught an instance of A" << endl;
\par \hich\af4\dbch\af31505\loch\f4     \}
\par \hich\af4\dbch\af31505\loch\f4     catch (B& eb)
\par \hich\af4\dbch\af31505\loch\f4     \{
\par \hich\af4\dbch\af31505\loch\f4         cout << "Caught an instance of B" << endl;
\par \hich\af4\dbch\af31505\loch\f4     \}
\par \hich\af4\dbch\af31505\loch\f4     return 0;
\par \}
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
A: No, the code works the way it is supposed to. When a thrown class encounters a parent class in an a catch statement, the class will be recast and copied -- you will not be able to recast a caught pointer back to the original type!}{\rtlch\fcs1 
\af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Catching happens on
\hich\af4\dbch\af31505\loch\f4 
 a "first come, first serve" basis. The first catch statement that can match will. In order to get the above code to work as expected, the catch statement for the B class needs to occur before the catch statement for the A class:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 #include <iostream\hich\af4\dbch\af31505\loch\f4 >
\par 
\par \hich\af4\dbch\af31505\loch\f4 using namespace std;
\par 
\par \hich\af4\dbch\af31505\loch\f4 class A
\par \{
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par 
\par \hich\af4\dbch\af31505\loch\f4 class B : public A
\par \{
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par 
\par \hich\af4\dbch\af31505\loch\f4 int main()
\par \{
\par \hich\af4\dbch\af31505\loch\f4     B b;
\par 
\par \hich\af4\dbch\af31505\loch\f4     try
\par \hich\af4\dbch\af31505\loch\f4     \{
\par \hich\af4\dbch\af31505\loch\f4         throw b;
\par \hich\af4\dbch\af31505\loch\f4     \}
\par \hich\af4\dbch\af31505\loch\f4     catch (B& eb)
\par \hich\af4\dbch\af31505\loch\f4     \{
\par \hich\af4\dbch\af31505\loch\f4         cout << "Caught an instance of B" << endl;
\par \hich\af4\dbch\af31505\loch\f4     \}
\par \hich\af4\dbch\af31505\loch\f4     catch (A& ea)
\par \hich\af4\dbch\af31505\loch\f4     \{
\par \hich\af4\dbch\af31505\loch\f4         cout << "Caught an \hich\af4\dbch\af31505\loch\f4 instance of A" << endl;
\par \hich\af4\dbch\af31505\loch\f4     \}
\par \hich\af4\dbch\af31505\loch\f4     return 0;
\par \}
\par 
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Structures
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q: How do I write a structure to a file?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 A: You can easily write a structure to a file as long as the structure is what is known as a POD (Plain Old Data) type. This means that all members of th\hich\af4\dbch\af31505\loch\f4 
e structure must be of a fixed size, which implies that the structure can not contain pointers. This stipulation goes for all members of the structure. Look at these examples:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 struct a
\par \{
\par \hich\af4\dbch\af31505\loch\f4   int    x;
\par \hich\af4\dbch\af31505\loch\f4   float  f;
\par \hich\af4\dbch\af31505\loch\f4   double d;
\par \hich\af4\dbch\af31505\loch\f4   char   c;
\par \hich\af4\dbch\af31505\loch\f4   char   s[50\hich\af4\dbch\af31505\loch\f4 ];
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par 
\par \hich\af4\dbch\af31505\loch\f4 // OK
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 struct b
\par \{
\par \hich\af4\dbch\af31505\loch\f4   int    x;
\par \hich\af4\dbch\af31505\loch\f4   float  f;
\par \hich\af4\dbch\af31505\loch\f4   double d;
\par \hich\af4\dbch\af31505\loch\f4   char   c;
\par \hich\af4\dbch\af31505\loch\f4   char*  s;
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par 
\par \hich\af4\dbch\af31505\loch\f4 // Wrong! 's' has unknown length; only address of pointer will be written.
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 struct c
\par \{
\par \hich\af4\dbch\af31505\loch\f4   int    x;
\par \hich\af4\dbch\af31505\loch\f4   float  f;
\par \hich\af4\dbch\af31505\loch\f4   double d;
\par \hich\af4\dbch\af31505\loch\f4   char   c;
\par 
\par \hich\af4\dbch\af31505\loch\f4   struct
\par \hich\af4\dbch\af31505\loch\f4   \{
\par \hich\af4\dbch\af31505\loch\f4     char* s;
\par \hich\af4\dbch\af31505\loch\f4   \}\hich\af4\dbch\af31505\loch\f4  e;
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par 
\par \hich\af4\dbch\af31505\loch\f4 // Wrong! 'e' has a char* member.
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
So, now hopefully you have a POD data type. We will use 'fstream' to read and write it:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 #include <string>
\par \hich\af4\dbch\af31505\loch\f4 #include <fstream>
\par 
\par \hich\af4\dbch\af31505\loch\f4 struct s
\par \{
\par \hich\af4\dbch\af31505\loch\f4   // Your POD data here
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par 
\par \hich\af4\dbch\af31505\loch\f4 void write( const std::string& file_nam\hich\af4\dbch\af31505\loch\f4 e, s& data )
\par \{
\par \hich\af4\dbch\af31505\loch\f4   std::ofstream out( file_name.c_str() );
\par \hich\af4\dbch\af31505\loch\f4   out.write( reinterpret_cast<char*>(&s), sizeof(s) );
\par \}
\par 
\par \hich\af4\dbch\af31505\loch\f4 void read( const std::string& file_name, s& data )
\par \{
\par \hich\af4\dbch\af31505\loch\f4   std::ifstream in( file_name.c_str() );
\par \hich\af4\dbch\af31505\loch\f4   in.read( reinterpret_cast<char*>(&s), sizeof(\hich\af4\dbch\af31505\loch\f4 s) );
\par \}
\par 
\par \hich\af4\dbch\af31505\loch\f4 int main()
\par \{
\par \hich\af4\dbch\af31505\loch\f4   s myStruct;
\par \hich\af4\dbch\af31505\loch\f4   read( "test.dat", myStruct );
\par \hich\af4\dbch\af31505\loch\f4   write( "test.dat", myStruct );
\par \}
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
This code works fine, but only works for a single type and it does not work for an array. To make this solution more flexible, we will define a template function that will work for any POD structure.
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 template<typename T>
\par \hich\af4\dbch\af31505\loch\f4 void write_pod( std::ofstr\hich\af4\dbch\af31505\loch\f4 eam& out, T& t )
\par \{
\par \hich\af4\dbch\af31505\loch\f4   out.write( reinterpret_cast<char*>(&T), sizeof(T) );
\par \}
\par 
\par \hich\af4\dbch\af31505\loch\f4 template<typename T>
\par \hich\af4\dbch\af31505\loch\f4 void read_pod( std::ifstream& in, T& t )
\par \{
\par \hich\af4\dbch\af31505\loch\f4   in.read( reinterpret_cast<char*>(&T), sizeof(T) );
\par \}
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
So now we have two simple functions that will write and re\hich\af4\dbch\af31505\loch\f4 
ad an arbitrary POD structure. Now, we can easily apply them to our current example, but instead, I will show you how they can be used to write an array to a file. To make this easy, we will make use of the STL algorithm 'for_each' to write.
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 #inclu\hich\af4\dbch\af31505\loch\f4 de <vector>
\par \hich\af4\dbch\af31505\loch\f4 #include <fstream>
\par \hich\af4\dbch\af31505\loch\f4 #include <algorithm>
\par 
\par \hich\af4\dbch\af31505\loch\f4 int main()
\par \{
\par \hich\af4\dbch\af31505\loch\f4   std::vector<s> myStructs;
\par \hich\af4\dbch\af31505\loch\f4   std::ofstream out( "test.dat" );
\par 
\par \hich\af4\dbch\af31505\loch\f4   // Fill vector here
\par 
\par \hich\af4\dbch\af31505\loch\f4   std::for_each( myStructs.begin(), myStructs.end(), std::bind1st( write_pod<s>, out ) );
\par \}
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 or for an array
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 #include <fstream>
\par \hich\af4\dbch\af31505\loch\f4 #include <algorithm>
\par 
\par \hich\af4\dbch\af31505\loch\f4 int main()
\par \{
\par \hich\af4\dbch\af31505\loch\f4   s myStructs[20];
\par \hich\af4\dbch\af31505\loch\f4   std::ofstream out( "test.dat" );
\par 
\par \hich\af4\dbch\af31505\loch\f4   // Fill array here
\par 
\par \hich\af4\dbch\af31505\loch\f4   std::for_each( myStructs, myStructs + 20, std::bind1st( write_pod<s>, out ) );
\par \}
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 This code works
\hich\af4\dbch\af31505\loch\f4 
 great for writing, but posses a problem when reading; we don't know the size of the array. This is not always a problem - we can just read until we hit the end of the file. But if you need to allocate an array, or want to store several different structs 
\hich\af4\dbch\af31505\loch\f4 i\hich\af4\dbch\af31505\loch\f4 
n one file this will not work. It also allows us to optimize our code with 'vector' by presizing the 'vector' before reading. This is a fairly simple fix, we will just write the size before all of our data:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 #include <vector>
\par \hich\af4\dbch\af31505\loch\f4 #include <fstream>
\par \hich\af4\dbch\af31505\loch\f4 #inc\hich\af4\dbch\af31505\loch\f4 lude <algorithm>
\par 
\par \hich\af4\dbch\af31505\loch\f4 int main()
\par \{
\par \hich\af4\dbch\af31505\loch\f4   std::vector<s> myStructs;
\par \hich\af4\dbch\af31505\loch\f4   std::ofstream out( "test.dat" );
\par 
\par \hich\af4\dbch\af31505\loch\f4   // Fill vector here
\par 
\par \hich\af4\dbch\af31505\loch\f4   write_pod<long>( out, myStructs.size() );
\par \hich\af4\dbch\af31505\loch\f4   std::for_each( myStructs.begin(), myStructs.end(), std::bind1st( write_pod<s>, out ) );
\par \}
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
Notice, that 'write_pod()' can also be used with integral types since they are POD's themselves. Unfortunately, the STL does not have an algorithm that allows us to easily read from a 'vector' into a file. So, we will just use a loop. Here is the method t
\hich\af4\dbch\af31505\loch\f4 o\hich\af4\dbch\af31505\loch\f4  read a 'vector' of structs from a file, I will templatize it to begin with:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 #include <vector>
\par \hich\af4\dbch\af31505\loch\f4 #include <fstream>
\par 
\par \hich\af4\dbch\af31505\loch\f4 template<typename T>
\par \hich\af4\dbch\af31505\loch\f4 void read_pod_vector( std::ifstream& in, std::vector<T>& vect )
\par \{
\par \hich\af4\dbch\af31505\loch\f4   long size;
\par 
\par \hich\af4\dbch\af31505\loch\f4   read_pod( in, size );
\par \hich\af4\dbch\af31505\loch\f4   vect.r\hich\af4\dbch\af31505\loch\f4 esize( size );
\par 
\par \hich\af4\dbch\af31505\loch\f4   for( int i = 0;i < size;++i )
\par \hich\af4\dbch\af31505\loch\f4   \{
\par \hich\af4\dbch\af31505\loch\f4     T t;
\par \hich\af4\dbch\af31505\loch\f4     read_pod( in, t );
\par \hich\af4\dbch\af31505\loch\f4     vect.push_back( t );
\par \hich\af4\dbch\af31505\loch\f4   \}
\par \}
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
While we're at it, we might as well define a similar function to write a 'vector':
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 #include <vector>
\par \hich\af4\dbch\af31505\loch\f4 #include <fstream>
\par \hich\af4\dbch\af31505\loch\f4 #include <a\hich\af4\dbch\af31505\loch\f4 lgorithm>
\par 
\par \hich\af4\dbch\af31505\loch\f4 template<typename T>
\par \hich\af4\dbch\af31505\loch\f4 void write_pod_vector( std::ofstream& out, std::vector<T>& vect )
\par \{
\par \hich\af4\dbch\af31505\loch\f4   write_pod<long>( out, myStructs.size() );
\par \hich\af4\dbch\af31505\loch\f4   std::for_each( vect.begin(), vect.end(), std::bind1st( write_pod<T>, out ) );
\par \}
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 So, implementing these funct
\hich\af4\dbch\af31505\loch\f4 ions to read and write a 'vector' we have:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 #include <vector>
\par \hich\af4\dbch\af31505\loch\f4 #include <fstream>
\par 
\par \hich\af4\dbch\af31505\loch\f4 int main()
\par \{
\par \hich\af4\dbch\af31505\loch\f4   std::vector<s> myStructs;
\par \hich\af4\dbch\af31505\loch\f4   std::ofstream out( "test.dat" );
\par \hich\af4\dbch\af31505\loch\f4   std::ifstream in( "test.dat" );
\par 
\par \hich\af4\dbch\af31505\loch\f4   // Fill vector here
\par 
\par \hich\af4\dbch\af31505\loch\f4   write_pod_vector( out, myStruct\hich\af4\dbch\af31505\loch\f4 s );
\par \hich\af4\dbch\af31505\loch\f4   out.close();
\par 
\par \hich\af4\dbch\af31505\loch\f4   read_pod_vector( in, myStructs );
\par \}
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
So, now you know how to write a POD structure, or a set of POD structures to a file. What if your structure is not POD? Well, then it becomes a bit more complicated. The approach you would take is the exact same as we took with 'vector', after all 'vector
\hich\af4\dbch\af31505\loch\f4 
' is a non-POD type and we are writing it to a file. That is, you would write the size of the data before the data so you know how much data to read. You may have noticed that the second parameter to read/write is the size of the data, so you don't need l
\hich\af4\dbch\af31505\loch\f4 o\hich\af4\dbch\af31505\loch\f4 op through all of your data. I will show you now two examples that use this fact.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 
\loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Example 1: Optimized vector read/write
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 #include <vector>
\par \hich\af4\dbch\af31505\loch\f4 #include <fstream>
\par 
\par \hich\af4\dbch\af31505\loch\f4 template<typename T>
\par \hich\af4\dbch\af31505\loch\f4 void write_pod_vector( std::ofstream& out, std::vector<T>& vect )
\par \{
\par \hich\af4\dbch\af31505\loch\f4   long size = myStructs.size();
\par 
\par \hich\af4\dbch\af31505\loch\f4   write_pod<long>( out, size );
\par \hich\af4\dbch\af31505\loch\f4   out.write( re\hich\af4\dbch\af31505\loch\f4 interpret_cast<char*>(vect.front()), size * sizeof(T) );
\par \}
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
This example takes advantage of vector's congenious structure and second parameter to write which allows us to write the entire 'vector' with one call. We can do the same thing to read:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 #\hich\af4\dbch\af31505\loch\f4 include <vector>
\par \hich\af4\dbch\af31505\loch\f4 #include <fstream>
\par 
\par \hich\af4\dbch\af31505\loch\f4 template<typename T>
\par \hich\af4\dbch\af31505\loch\f4 void read_pod_vector( std::ifstream& in, std::vector<T>& vect )
\par \{
\par \hich\af4\dbch\af31505\loch\f4   long size;
\par 
\par \hich\af4\dbch\af31505\loch\f4   read_pod( in, size );
\par \hich\af4\dbch\af31505\loch\f4   vect.resize( size );
\par \hich\af4\dbch\af31505\loch\f4   in.read( reinterpret_cast<char*>(vect.front()), size * sizeof(T) );
\par \}
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
Not only do we cut out several lines, but we make our program more effient. My next example will show you to read/write other pointer data. The following structure is used to store a variable length string:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 struct str
\par \{
\par \hich\af4\dbch\af31505\loch\f4   long  size;
\par \hich\af4\dbch\af31505\loch\f4   char* s;
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
Now, here are the read an write methods for this structure.
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 #include <fstream>
\par 
\par \hich\af4\dbch\af31505\loch\f4 void write_str( std::ofstream& out, str& s )
\par \{
\par \hich\af4\dbch\af31505\loch\f4   out.write( reinterpret_cast<char*>(&s.size), sizeof(long) );
\par \hich\af4\dbch\af31505\loch\f4   out.write( s.s, s.size * sizeof(char) );
\par \}
\par 
\par \hich\af4\dbch\af31505\loch\f4 void read\hich\af4\dbch\af31505\loch\f4 _str( std::ifstream& in, str& s )
\par \{
\par \hich\af4\dbch\af31505\loch\f4   in.read( reinterpret_cast<char*>(&s.size), sizeof(long) );
\par \hich\af4\dbch\af31505\loch\f4   s.s = new char[s.size];
\par \hich\af4\dbch\af31505\loch\f4   in.read( s.s, s.size * sizeof(char) );
\par \}
\par 
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q: Why returns 'sizeof()' a bigger size than the member variables actually need?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{
\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 A: Th\hich\af4\dbch\af31505\loch\f4 is is due to structure alignment which aligns the data structure by padding extra bytes so as to optimize for data transfer.}{
\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
Modern CPUs perform best in data transfer when fundamental types, such as 'int' and 'float', are stored in memory addresses that a\hich\af4\dbch\af31505\loch\f4 
re multiples of their length. Some CPUs, like x86, also allow unaligned access but at a performance penalty. In other words, it requires extra data transfer when the data is unaligned.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
When a C/C++ compiler processes a structure declaration, it adds extra\hich\af4\dbch\af31505\loch\f4 
 bytes between fields to ensure that they are properly aligned. It also adds extra bytes to the end of the structure so that every element of an array of that structure type, is properly aligned.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 As a rule of thumb, to minimize the extra padded bytes need
\hich\af4\dbch\af31505\loch\f4 ed for the alignment, all fields of the same type should be grouped together. See the following example:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 struct MyStructA
\par \{
\par \hich\af4\dbch\af31505\loch\f4     char a;
\par \hich\af4\dbch\af31505\loch\f4     char b;
\par \hich\af4\dbch\af31505\loch\f4     int c;
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par 
\par \hich\af4\dbch\af31505\loch\f4 struct MyStructB
\par \{
\par \hich\af4\dbch\af31505\loch\f4     char a;
\par \hich\af4\dbch\af31505\loch\f4     int c;
\par \hich\af4\dbch\af31505\loch\f4     char b;
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par 
\par \hich\af4\dbch\af31505\loch\f4 // Results from VC6 on x86,\hich\af4\dbch\af31505\loch\f4  it may varies for other CPU/OS/compiler combination.
\par \hich\af4\dbch\af31505\loch\f4 int sizeA = sizeof(MyStructA);   // sizeA = 1 + 1 + (2-padding) + 4 = 8
\par \hich\af4\dbch\af31505\loch\f4 int sizeB = sizeof(MyStructB);   // sizeB = 1 + (3-padding) + 4 + 1 + (3-padding) = 12
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
As the C/C++ standard states, the alignment is completely implementation defined, thus, each CPU/OS/compiler combination is free to choose whatever alignment and padding rules it deems best. Although the standard didn't provide any control in customizing 
\hich\af4\dbch\af31505\loch\f4 
the alignment and padding rules, many compilers provide this through non-standard extensions. For example, VC6 provides the  HYPERLINK "http://msdn.microsoft.com/library/default.asp?url=/library/en-us/vclang/html/_predir_pack.asp" \\
t "_blank" pragma pack(\hich\af4\dbch\af31505\loch\f4 n\hich\af4\dbch\af31505\loch\f4 ) macro.
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Casting
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q: What are c-style casts ? What is static_cast, dynamic_cast, const_cast and reinterpret_cast ? What is the difference ? Why should I care ?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
A: Casting means you change the representation of a variable by changing its type to a different one. In order to type-cast a simple object to another you use the traditional type casting operator. For example, to cast a floating point number of type 'do
\hich\af4\dbch\af31505\loch\f4 uble' to an integer of type 'int':
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 int i;
\par \hich\af4\dbch\af31505\loch\f4 double d;
\par 
\par \hich\af4\dbch\af31505\loch\f4 i = (int) d;
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 or also
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 i = int (d);
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
This is quite good for basic types that have standard defined conversions, however this operators can also been indiscriminately applied on classes a\hich\af4\dbch\af31505\loch\f4 
nd pointers to classes. ANSI-C++ standard has defined four new casting operators: 'reinterpret_cast', 'static_cast', 'dynamic_cast' and 'const_cast' in order to control these types of conversions between classes...
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 reinterpret_cast<new_type>(expres\hich\af4\dbch\af31505\loch\f4 sion)
\par \hich\af4\dbch\af31505\loch\f4 dynamic_cast<new_type>(expression)
\par \hich\af4\dbch\af31505\loch\f4 static_cast<new_type>(expression)
\par \hich\af4\dbch\af31505\loch\f4 const_cast<new_type>(expression)
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 reinterpret_cast}{\rtlch\fcs1 
\af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
'reinterpret_cast' casts a pointer to any other type of pointer. It also allows casting from pointer to an integer type and vice versa.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 
\u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 This operator can cast pointers between non-related classed. The operation results is a simple binar\hich\af4\dbch\af31505\loch\f4 
y copy of the value from a pointer to the other. The content pointed does not pass any kind of check nor transformation between types.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 
\u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 In the case that the copy is performed from a pointer to an integer, the interpretation of its content is system depende
\hich\af4\dbch\af31505\loch\f4 nt and therefore any implementation is non portable. A pointer casted to an integer enough large to fully contain it can be casted back to a valid pointer.
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 class A \{\};
\par \hich\af4\dbch\af31505\loch\f4 class B \{\};
\par 
\par \hich\af4\dbch\af31505\loch\f4 A * a = new A;
\par \hich\af4\dbch\af31505\loch\f4 B * b = reinterpret_cast<B *>(a);
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 'reinterpret_cas
\hich\af4\dbch\af31505\loch\f4 t' treats all pointers exactly as traditional type-casting operators do.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f\u8232\'3f}{
\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 static_cast}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 
\af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 'static_cast' allows to perform any casting that can be implicitly performed as well as also the inverse cast (even if this is not allowed implicitly).}{\rtlch\fcs1 \af15\afs18 
\ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Applied to poin\hich\af4\dbch\af31505\loch\f4 
ters to classes, that is to say that it allows to cast a pointer of a derived class to its base class (this is a valid conversion that can be implicitly performed) and can also perform the inverse: cast a base class to its derivated class.}{\rtlch\fcs1 
\af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 In this last ca
\hich\af4\dbch\af31505\loch\f4 se the base class that is being casted is not checked to determine wether this is a complete class of the destination type or not.
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 class Base \{\};
\par \hich\af4\dbch\af31505\loch\f4 class Derived : public Base \{\};
\par 
\par \hich\af4\dbch\af31505\loch\f4 Base *a    = new Base;
\par \hich\af4\dbch\af31505\loch\f4 Derived *b = static_cast<Derived *>(a);
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 'sta
\hich\af4\dbch\af31505\loch\f4 tic_cast', aside from manipulating pointers to classes, can also be used to perform conversions explicitly defined in classes, as well as to perform standard conversions between fundamental types:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 double d = 3.14159265;
\par \hich\af4\dbch\af31505\loch\f4 int    i = static_cast<int>(\hich\af4\dbch\af31505\loch\f4 d);
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 dynamic_cast}{\rtlch\fcs1 
\af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
'dynamic_cast' is exclusively used with pointers and references to objects. It allows any type-casting that can be implicitly performed as well as the inverse one when used with polymorphic classes, however, unlike static_cast, dynamic_cast 
\hich\af4\dbch\af31505\loch\f4 checks, in this last case, if the operation is valid. That is to say, it checks if the casting is going to return a valid complete object of the requested type.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
Checking is performed during run-time execution. If the pointer being casted is not a pointer \hich\af4\dbch\af31505\loch\f4 to a valid complete object of the requested type, the value returned is a 'NULL' pointer.
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 class Base \{ virtual dummy() \{\} \};
\par \hich\af4\dbch\af31505\loch\f4 class Derived : public Base \{\};
\par 
\par \hich\af4\dbch\af31505\loch\f4 Base* b1 = new Derived;
\par \hich\af4\dbch\af31505\loch\f4 Base* b2 = new Base;
\par 
\par \hich\af4\dbch\af31505\loch\f4 Derived* d1 = dynamic_cast<Derived *>(b1);  \hich\af4\dbch\af31505\loch\f4         // succeeds
\par \hich\af4\dbch\af31505\loch\f4 Derived* d2 = dynamic_cast<Derived *>(b2);          // fails: returns 'NULL'
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
If the type-casting is performed to a reference type and this casting is not possible an exception of type 'bad_cast' is thrown:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 class Base \{ virtual dummy() \{\} \};
\par \hich\af4\dbch\af31505\loch\f4 class Derived : public Base \{ \};
\par 
\par \hich\af4\dbch\af31505\loch\f4 Base* b1 = new Derived;
\par \hich\af4\dbch\af31505\loch\f4 Base* b2 = new Base;
\par 
\par \hich\af4\dbch\af31505\loch\f4 Der\hich\af4\dbch\af31505\loch\f4 ived d1 = dynamic_cast<Derived &*>(b1);          // succeeds
\par \hich\af4\dbch\af31505\loch\f4 Derived d2 = dynamic_cast<Derived &*>(b2);          // fails: exception thrown
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 const_cast}{\rtlch\fcs1 
\af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
This type of casting manipulates the const attribute of the passed object, either to be set or removed\hich\af4\dbch\af31505\loch\f4 :
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 class C \{\};
\par 
\par \hich\af4\dbch\af31505\loch\f4 const C *a = new C;
\par 
\par \hich\af4\dbch\af31505\loch\f4 C *b = const_cast<C *>(a);
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
Neither of the other three new cast operators can modify the constness of an object.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Note: const_cast can also change the volatile qualifier on a type.
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Callbacks
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q: How to use cla\hich\af4\dbch\af31505\loch\f4 ss member functions as callbacks?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{
\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 A:The problem is that every callback function has its own prototype, which determines the parameters that gets passed from the operating system to it.}{\rtlch\fcs1 
\af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
In C++ every member function has a hidden parameter - the so-called '\hich\af4\dbch\af31505\loch\f4 
this' pointer which will be automatically passed to the function. C++ is able to associate a function with a particular instance of an object by means of the 'this' pointer. Member functions access member variables through the 'this' pointer...
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 cla\hich\af4\dbch\af31505\loch\f4 ss CFoo
\par \{
\par \hich\af4\dbch\af31505\loch\f4 public:
\par \hich\af4\dbch\af31505\loch\f4   void Function()
\par \hich\af4\dbch\af31505\loch\f4   \{
\par \hich\af4\dbch\af31505\loch\f4     m_iInteger = 0;
\par \hich\af4\dbch\af31505\loch\f4   \}
\par 
\par \hich\af4\dbch\af31505\loch\f4 private:
\par \hich\af4\dbch\af31505\loch\f4   int m_iInteger;
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
If you compile this code it will be compiled as
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 class CFoo
\par \{
\par \hich\af4\dbch\af31505\loch\f4 public:
\par \hich\af4\dbch\af31505\loch\f4   void Function(CFoo *this)
\par \hich\af4\dbch\af31505\loch\f4   \{
\par \hich\af4\dbch\af31505\loch\f4     this->m_iInteger = 0;
\par \hich\af4\dbch\af31505\loch\f4   \}
\par 
\par \hich\af4\dbch\af31505\loch\f4 private:
\par \hich\af4\dbch\af31505\loch\f4   int m_iInteger;
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
The operating system does not call callback functions through objects therefore it \hich\af4\dbch\af31505\loch\f4 
cannot handle the automatically added 'this' pointer... To get a member functions working as a callback routine you need to tell the compiler explicitly not to expect a 'this' pointer. To avoid the automatic 'this' pointer you have two possibilities:}{
\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 - No
\hich\af4\dbch\af31505\loch\f4 n-member functions}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 - Static member functions}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Non-member functions are not part of a class and therefore do not have a 'this' pointer. Static member functions do not receive a 'this' pointer either...}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Therefore if you want to use a member function as a ca
\hich\af4\dbch\af31505\loch\f4 llback routine you need to declare it as 'static'...}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 For more information you might take a look at:}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{
\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 -  HYPERLINK "http://support.microsoft.com/default.aspx?scid=KB;EN-US;q102352&" \\t "_blank" 'INFO: Passing a Pointer to a Member Function to the Win32 API
\hich\af4\dbch\af31505\loch\f4 '}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
-  HYPERLINK "http://msdn.microsoft.com/archive/default.asp?url=/archive/en-us/dnarvc/html/msdn_callb.asp" \\t "_blank" 'Calling All Members: Member Functions as Callbacks'
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Templates
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q: I have the following code:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 // In foo.h
\par 
\par \hich\af4\dbch\af31505\loch\f4 template <typename\hich\af4\dbch\af31505\loch\f4  T>
\par \hich\af4\dbch\af31505\loch\f4 T foo(const T& t);
\par 
\par \hich\af4\dbch\af31505\loch\f4 // end of foo.h
\par \hich\af4\dbch\af31505\loch\f4 //------------------------------------------------
\par 
\par \hich\af4\dbch\af31505\loch\f4 // In foo.cpp
\par 
\par \hich\af4\dbch\af31505\loch\f4 template <typename T>
\par \hich\af4\dbch\af31505\loch\f4 T foo(const T& t)
\par \{
\par \hich\af4\dbch\af31505\loch\f4     // function body
\par \}
\par 
\par \hich\af4\dbch\af31505\loch\f4 // end of foo.cpp
\par \hich\af4\dbch\af31505\loch\f4 //------------------------------------------------
\par 
\par \hich\af4\dbch\af31505\loch\f4 // In main.cp\hich\af4\dbch\af31505\loch\f4 p
\par 
\par \hich\af4\dbch\af31505\loch\f4 #include "foo.h"
\par \hich\af4\dbch\af31505\loch\f4 int main()
\par \{
\par \hich\af4\dbch\af31505\loch\f4     int i = 1;
\par \hich\af4\dbch\af31505\loch\f4     int j = foo(i);
\par \}
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
But when I compile it, the linker tells me that "foo" (in whatever way the complier mangles foo<int>) is an unresolved external symbol.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 
\u8232\'3f\u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 A: There are actually two solutions to this problem - the "correct" one and the one that works. But before getting to
\hich\af4\dbch\af31505\loch\f4  that we need to understand why there is a problem.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
The thing to understand about template code is that it's, well, a template. It's not real code. It's like when you have a letter template in your word processor: it's not a real letter until you fill in \hich\af4\dbch\af31505\loch\f4 
details like the person it's addressed to. In the example given, the compiler can't compile the definition of foo in "foo.cpp" because it doesn't know what T is. Until it knows that, it can't decide whether or not the operation you perform using T objects
\hich\af4\dbch\af31505\loch\f4  \hich\af4\dbch\af31505\loch\f4 
are valid or not. For example foo might call a specific member function of T called, say, bar(). But T is only a placeholder. Until you call foo with a specific type, how can the compiler know whether or not the code is valid?}{\rtlch\fcs1 \af15\afs18 
\ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
So it comes down to this: templated functions (and classes) don't actually exist until you use them. And in order for the compiler to generate the real code for the function (or class), it has to have the complete definition of the template available at 
\hich\af4\dbch\af31505\loch\f4 
the point of use. If the full definition is not available, the compiler will assume that it's been defined somewhere else and just plant code for the call. And here's the problem with the example above: at the time foo is used (in main()), the compiler on
\hich\af4\dbch\af31505\loch\f4 l\hich\af4\dbch\af31505\loch\f4 
y has the declaration of foo available, so it assumes that foo<int> (because that's the instantiation that's wanted) is defined elsewhere. But the definition is in foo.cpp, and there is no use of foo<int> there, so the compiler won't bother generating it.
\hich\af4\dbch\af31505\loch\f4  \hich\af4\dbch\af31505\loch\f4 And so we get to the situation that compiling main() plants a call to foo<int>, but compiling foo.cpp produces nothing. And that leads to an unresolved external reference.}{\rtlch\fcs1 
\af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 The "correct" solution.}{
\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
I call this correct, because it keeps the example code th\hich\af4\dbch\af31505\loch\f4 e way it is laid out. The standard defines a keyword export that is designed for just this situation. By defining foo in foo.cpp with export:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 template <typename T>
\par \hich\af4\dbch\af31505\loch\f4 export T foo(const T& t)
\par \{
\par \hich\af4\dbch\af31505\loch\f4     // definition
\par \}
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
The definition becomes available to\hich\af4\dbch\af31505\loch\f4  the compiler whilst it is comping main.cpp, and so it now generates the code for foo<int> and the external is resolved.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 The solution that works.}{\rtlch\fcs1 \af15\afs18 
\ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
Unfortunately, not many compilers support export, so the "correct" solution is more likely to produce a com\hich\af4\dbch\af31505\loch\f4 
pilation error that it is to solve the problem. So the practical solution is define the function in the header file as an inline function:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 // foo.h
\par \hich\af4\dbch\af31505\loch\f4 template <typename T>
\par \hich\af4\dbch\af31505\loch\f4 inline T foo(const T& t)
\par \{
\par \hich\af4\dbch\af31505\loch\f4     // definition
\par \}
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 This way, because it's in the
\hich\af4\dbch\af31505\loch\f4  header file, the compiler can see it at the point of use and can generate the appropriate code and the external is resolved.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 
\loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
For those who think that's a bit ugly, and would like a solution that's half-way to the "correct" one (for that day when their co\hich\af4\dbch\af31505\loch\f4 
mpiler supports export), put the inine definition into a file called "foo.inl" and #include "foo.inl" at the end of the original foo.h. Then, when you get your new compiler, rename foo.inl to foo.cpp, change inline to export and remove the #include from f
\hich\af4\dbch\af31505\loch\f4 o\hich\af4\dbch\af31505\loch\f4 o.h.
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Polymorphism
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q: How do we use virtual functions?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 A: The FAQ  HYPERLINK "http://www.codeguru.com/forum/showthread.php?s=&threadid=256008" \\
t "_blank" "What is polymorphism?" covers why we have virtual functions. In this FAQ, I want to examine how we use them - in Scott Meyers's words "say what you mean,\hich\af4\dbch\af31505\loch\f4  understand what you are saying".}{\rtlch\fcs1 \af15\afs18 
\ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
There are nine ways that you can declare a virtual function: it can be plain, pure or pure-with-a-body. Each of these three can be declared public, private or protected. Thus, nine declarations, but what does each one say\hich\af4\dbch\af31505\loch\f4 
? What do we mean when we declare a private, pure virtual function?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 "Hold on", I hear a voice from the back cry, "what do you mean by pure-with-a-body?". Well, it's one of those lesser-known facts of the language that a pure virtual function can have a de
\hich\af4\dbch\af31505\loch\f4 
finition (or body). After all, the pure specifier (the "= 0" bit) only says that this class cannot be instantiated - it does not say "this function cannot be implemented here". One of the simplest ways of making a class abstract (cannot be instantiated) i
\hich\af4\dbch\af31505\loch\f4 s\hich\af4\dbch\af31505\loch\f4  to declare the destructor pure - but destructors simply have to have a body.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 
\loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
So, let's look at the various declarations and see what the programmer who uses each is saying. The first thing to point out is that, since the virtual mechanism works down inheritance hierarchies, there is not usually much difference in meaning between 
\hich\af4\dbch\af31505\loch\f4 a public function and a protected one - it's just a matter of outside visibility rather than "meaning" in the sense that I'm covering it here.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
Plain Old Virtual Functions: Basically, these are saying "this function has a default implementation. If you do \hich\af4\dbch\af31505\loch\f4 not override it, then the default will be used."}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
If the function is non-private, then derived classes may also use it as part of their processing.
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 class foo
\par \{
\par \hich\af4\dbch\af31505\loch\f4 public:
\par \hich\af4\dbch\af31505\loch\f4   virtual void povf(); // has a body somewhere
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par 
\par \hich\af4\dbch\af31505\loch\f4 class bar : public foo
\par \{
\par \hich\af4\dbch\af31505\loch\f4 publ\hich\af4\dbch\af31505\loch\f4 ic:
\par \hich\af4\dbch\af31505\loch\f4   void povf()
\par \hich\af4\dbch\af31505\loch\f4   \{
\par \hich\af4\dbch\af31505\loch\f4     foo::povf();
\par \hich\af4\dbch\af31505\loch\f4     // do some more processing
\par \hich\af4\dbch\af31505\loch\f4   \}
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
So here, foo::f() does something (probably involving foo's private data). The function is virtual because the programmer recognised that derived classes may have extra work to d\hich\af4\dbch\af31505\loch\f4 
o with their own private data. If bar had nothing extra to do, then it could just ignore povf and let the default action happen.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232
\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 A private Plain Old Virtual Function, on the other hand, cannot be re-used by derived classes. It's saying "here is a default 
\hich\af4\dbch\af31505\loch\f4 action: if you choose to override it, you may not incorporate into your override". Ok, let's admit it, the need for this is rare, but it's not unknown.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Pure virtual functions:}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
These are saying "here is behaviour that derived classes must implement."}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 If \hich\af4\dbch\af31505\loch\f4 
there is no body for the function, then it is also saying "there is no sensible implementation for this function at this level." In other words, the class that declares the function is at a high level of abstraction and contains insufficient specialised i
\hich\af4\dbch\af31505\loch\f4 n\hich\af4\dbch\af31505\loch\f4 formation to provide an implementation. For example:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 class bird
\par \{
\par \hich\af4\dbch\af31505\loch\f4 public:
\par \hich\af4\dbch\af31505\loch\f4   virtual void fly() = 0;  // No body
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
At the level of "bird", there is no way that it can implement fly(), since we don't know what type of bird we really are. It's not until we've derived "sparrow" and "albatross" from bird that we can supply an implementation.}{\rtlch\fcs1 \af15\afs18 
\ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 ---- A brief digression}{\rtlch\fcs1 \af15\afs18 
\ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 By t\hich\af4\dbch\af31505\loch\f4 
he way, on this definition, emus, ostriches, kiwis, etc. are not birds. Class bird defines the ability to fly as a prerequisite for "bird-hood". Do not be tempted to do this:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 class ostrich : public bird
\par \{
\par \hich\af4\dbch\af31505\loch\f4 public:
\par \hich\af4\dbch\af31505\loch\f4   void fly()
\par \hich\af4\dbch\af31505\loch\f4   \{
\par \hich\af4\dbch\af31505\loch\f4     // throw an ex\hich\af4\dbch\af31505\loch\f4 ception or something
\par \hich\af4\dbch\af31505\loch\f4   \}
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
This is bad programming practice. Public inheritance means IS-A. If your derived class cannot implement a virtual function in its base class's interface, then it is not IS-A, and you should look at reviewing the design. So, to count ostriches as birds, we
\hich\af4\dbch\af31505\loch\f4  need:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 class bird
\par \{
\par \hich\af4\dbch\af31505\loch\f4 public:
\par \hich\af4\dbch\af31505\loch\f4   // something
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par 
\par \hich\af4\dbch\af31505\loch\f4 class flying_bird : public bird
\par \{
\par \hich\af4\dbch\af31505\loch\f4 public:
\par \hich\af4\dbch\af31505\loch\f4   virtual void fly() = 0;
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
now, "ostrich" derives from "bird", while "sparrow" derives from "flying_bird".}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 ---- End of digression}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 How does access control\hich\af4\dbch\af31505\loch\f4 
 affect this? Well, basically, there's no point in declaring a pure virtual function with no body in the protected section. The only reason for making it protected would be to allow a derived class to call it, but there's nothing to call, so make it publi
\hich\af4\dbch\af31505\loch\f4 c\hich\af4\dbch\af31505\loch\f4  or private depending on whether or not the outside world needs to call it.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 
\loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
Pure virtuals that do have a body, on the other hand are saying: "here is a default implementation. If you wish to use it, you must do so explicitly". Note the difference here compared with the Plain Old Virtual Function. With a POVF, you might get the d
\hich\af4\dbch\af31505\loch\f4 efault action by accident, because you forgot to write your override. By making the function pure, you can only get the default implementation deliberately:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 class foo
\par \{
\par \hich\af4\dbch\af31505\loch\f4 public:
\par \hich\af4\dbch\af31505\loch\f4   virtual void pvfwb() = 0;
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par 
\par \hich\af4\dbch\af31505\loch\f4 void foo::pfvwb()
\par \{
\par \hich\af4\dbch\af31505\loch\f4   // something
\par \}
\par 
\par \hich\af4\dbch\af31505\loch\f4 c\hich\af4\dbch\af31505\loch\f4 lass bar1 : public foo
\par \{
\par \hich\af4\dbch\af31505\loch\f4   // ...
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par 
\par \hich\af4\dbch\af31505\loch\f4 class bar2 : public foo
\par \{
\par \hich\af4\dbch\af31505\loch\f4 public:
\par \hich\af4\dbch\af31505\loch\f4   void pvfwb()
\par \hich\af4\dbch\af31505\loch\f4   \{
\par \hich\af4\dbch\af31505\loch\f4     foo::pvfwb();
\par \hich\af4\dbch\af31505\loch\f4   \}
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
"bar1" does not override pvfwb(), so it remains an abstract class. "bar2", however, reuses the default implementation deliberately. The meaning of the coder is clear.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 
\loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 And access control? Well, there seems little point in making one of these private. Only
\hich\af4\dbch\af31505\loch\f4  the class itself (and its friends) could call it, and then it would have to qualify the call:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 class foo
\par \{
\par \hich\af4\dbch\af31505\loch\f4 public:
\par \hich\af4\dbch\af31505\loch\f4   void f() \{ foo::g(); \}
\par 
\par \hich\af4\dbch\af31505\loch\f4 private:
\par \hich\af4\dbch\af31505\loch\f4   virtual void g() = 0;
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par 
\par \hich\af4\dbch\af31505\loch\f4 void foo::g()
\par \{
\par \hich\af4\dbch\af31505\loch\f4   // ...
\par \}
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
There seems little point in making it vir\hich\af4\dbch\af31505\loch\f4 tual, in this case.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Finally, what do non-virtual functions say?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{
\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
A non-virtual function says "the implementation of this behaviour does not change in derived classes". A non-virtual function is invariant over specialisation: derived classes inherit behavi\hich\af4\dbch\af31505\loch\f4 
our and implementation. Do not override a non-virtual function in a derived class - you will pay dearly in lost maintenance time if you do.
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q: What is polymorphism?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 A: I'm glad you asked me that...}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Without going into great detail, polymorphism is a mech\hich\af4\dbch\af31505\loch\f4 
anism that allows you to implement a function in different ways. For example, you might be modelling birds, and you want them to fly. Some birds flap their wings like crazy, others glide majestically. However, the function that moves a bird from one place
\hich\af4\dbch\af31505\loch\f4  \hich\af4\dbch\af31505\loch\f4 
to another doesn't care how the bird flies, only that it does fly. This is an important principle to grasp - the what is important, the how is irrelevant. So your "migrate" function could be used with any bird class that is capable of flying, whether it's
\hich\af4\dbch\af31505\loch\f4  \hich\af4\dbch\af31505\loch\f4 
a sparrow or an albatross. What we're saying, then, is that these birds share the ability to fly, though the way they fly may differ. The "ability to fly" is an abstraction. Note again the distinction between what it does and how it does it. The abstracti
\hich\af4\dbch\af31505\loch\f4 o\hich\af4\dbch\af31505\loch\f4 n says what it does: it says nothing about how it does it. We represent that in C++ with the "pure virtual function":
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 class bird
\par \{
\par \hich\af4\dbch\af31505\loch\f4 public:
\par \hich\af4\dbch\af31505\loch\f4   virtual void fly() = 0;
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
What this (abstract) class is saying is "all birds can fly". (Note that, on this definition, emus and ostriches are not birds because they can't fly. This is a very important point, but unfortunately outside the scope of this FAQ.)}{\rtlch\fcs1 
\af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Your migrate function 
\hich\af4\dbch\af31505\loch\f4 now only needs to know about the "bird" class in order to be written:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 void migrate(bird* tweetiepie)
\par \{
\par \hich\af4\dbch\af31505\loch\f4   // ...
\par \hich\af4\dbch\af31505\loch\f4   tweetiepie->fly();
\par \hich\af4\dbch\af31505\loch\f4   // ...
\par \}
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
So far, so good. But "bird" only defines the "what" part - it says nothing about the "how". And that's\hich\af4\dbch\af31505\loch\f4 
 another thing the pure virtual function does: you cannot create an object of type "bird" - you've got to be more specific and create a particular kind of bird. This is where inheritance and polymorphism come in: if we want to do some useful work, we need
\hich\af4\dbch\af31505\loch\f4  \hich\af4\dbch\af31505\loch\f4 some real birds:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 class swallow : public bird
\par \{
\par \hich\af4\dbch\af31505\loch\f4 public:
\par \hich\af4\dbch\af31505\loch\f4   virtual void fly()
\par \hich\af4\dbch\af31505\loch\f4   \{
\par \hich\af4\dbch\af31505\loch\f4     flap_wings_like_crazy();
\par \hich\af4\dbch\af31505\loch\f4   \}
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par 
\par \hich\af4\dbch\af31505\loch\f4 class albatross : public bird
\par \{
\par \hich\af4\dbch\af31505\loch\f4 public:
\par \hich\af4\dbch\af31505\loch\f4   virtual void fly()
\par \hich\af4\dbch\af31505\loch\f4   \{
\par \hich\af4\dbch\af31505\loch\f4     glide_majestically_over_the_waves();
\par \hich\af4\dbch\af31505\loch\f4   \}
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
Because we've derived both of these from the abstract class bird, we can use one wherever a bird is expected. Specifically, we can give migrate() a swallow or an albatross, and it will still work.
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 swallow s;
\par \hich\af4\dbch\af31505\loch\f4 albatross a;
\par 
\par \hich\af4\dbch\af31505\loch\f4 migrate(&s);
\par \hich\af4\dbch\af31505\loch\f4 migrate(&a);
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
When the swallow is passed to migrate, the call to fly() in there will result in "flap_wings_like_crazy", but when the albatross is passed in, the same call will result in "glide_majestically_over_the_waves". }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 And that's polymorphism.
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Random numbers
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q: Why does my random number generator always return the same set of numbers?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{
\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
A: A random number generator needs to be seeded before use, or it will always generate the same list of random numbers. For example the C 'time()' function can be used for this\hich\af4\dbch\af31505\loch\f4 :
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 srand(time(NULL));
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
One should generally avoid using 'clock()' to initialize random numbers, since 'clock()' returns the amount of time the current thread has been running, generally a number close to zero.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Good seeds will involve more "random"
\hich\af4\dbch\af31505\loch\f4 
 bits. One way this can be accomplished is by using higher resolution timers such as a performance counter or an RDTSC value. Better seeds may mix the least significant bits of different timers. The best seeds are produced from truely random sources. If a
\hich\af4\dbch\af31505\loch\f4  \hich\af4\dbch\af31505\loch\f4 computer is connected to the internet, truely random seeds can be obtained from sites like  HYPERLINK "http://www.random.org" \\t "_blank" random.org.
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q: What are good random number generators?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 A: There are two common problems when using pseudo-random number generators (PRNGs):
\par 
\par \hich\af4\dbch\af31505\loch\f4 The PRNG does not get seeded. Please see related  HYPERLINK "http://www.codeguru.com/forum/showthread.php?s=&threadid=284875" \\t "_blank" FAQ for discussion on this top\hich\af4\dbch\af31505\loch\f4 ic.
\par \hich\af4\dbch\af31505\loch\f4 A poor PRNG is being used.
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
This FAQ addresses the second problem. }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 Often people use the C library function 'rand()' for random number generation. And quite often, the implementation for 'rand()' is not very good - the range of numbers is too small, t\hich\af4\dbch\af31505\loch\f4 
he period before repetition is too small, and/or other problems.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Better PRNGs can be found in a variety of sources. The most popular is the "Mersenne Twister". The "Mersenne Twister" and other good PNRGs can be found in the  HYPERLINK "http://www.boost.or
\hich\af4\dbch\af31505\loch\f4 g/libs/random/" \\t "_blank" Boost library and the  HYPERLINK "http://www.gnu.org/software/gsl" \\t "_blank" GNU Scientific Library).}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 
\loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
Another good resource on random number generation is the book "Numerical Recipes in C". It contains a very good discussion \hich\af4\dbch\af31505\loch\f4 on how one can create different distributions based on a uniform random deviate.
\par 
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Strings
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q:What types of strings are there?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 A:}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 - char*: this is also called a C-style string, or an ANSI string.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 
\af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 - wchar_t*: this is wide character string, i.e. an unsign\hich\af4\dbch\af31505\loch\f4 ed short *}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
- CString: this is a string wrapper class, which is part of the Microsoft Foundation Classes(MFC).}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 
\af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 - std::string: this is a Standard C++ Class wrapping a char string. It is part of the Standard Template Library, or STL.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 - std::wstring: this i\hich\af4\dbch\af31505\loch\f4 
s a Standard C++ Class wrapping a wchar_t string. It is part of the Standard Template Library, or STL.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 
\af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 - BSTR: this known as basic string or binary string, and is a pointer to a wide character string used by Automation data manipulation functions.
\par \hich\af4\dbch\af31505\loch\f4 Q:}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
What\hich\af4\dbch\af31505\loch\f4  is the difference between \\n and \\r\\n ? Should I be concerned about the differences ?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{
\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 What types of characters indicate a new line ?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 
\u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 A:}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{
\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Background}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 
\af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 There are a few characters which can indicate a new line. The usual ones are these two:
\par 
\par \hich\af4\dbch\af31505\loch\f4 "\\n" or 0x0A (10\hich\af4\dbch\af31505\loch\f4  in decimal)}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 This character is called "Line Feed" (LF).
\par \hich\af4\dbch\af31505\loch\f4 "\\r" or 0x0D (13 in decimal)}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 This one is called "Carriage return" (CR)
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
Different Operating Systems handle newlines in a different way. Here is a short list of the most common ones:
\par 
\par \hich\af4\dbch\af31505\loch\f4 DOS and Windows}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 They expect a newline to be the combination of two characters, namely "\\r\\n" (or 13 followed by 10).
\par \hich\af4\dbch\af31505\loch\f4 Unix (and hence Linux as well)}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 Unix uses a single "\\n" to indicate a new line.
\par \hich\af4\dbch\af31505\loch\f4 Mac}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
Macs use a single "\\r".
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
This difference gives rise to a number of prob\hich\af4\dbch\af31505\loch\f4 
lems. For example, a file created under Unix (so with newlines as a single LF) will not open correctly under Window's Notepad. Any Windows program that expects newlines to be CRLF will not work correctly with these files.}{\rtlch\fcs1 \af15\afs18 
\ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 To unify things a bit, so that wr
\hich\af4\dbch\af31505\loch\f4 iting portable C/C++ programs is possible, file streams have both a "translated" and an "untranslated" mode. If you open a file in translated mode, the runtime library will convert a "\\
n" to the appropriate newline character(s). If the following program i\hich\af4\dbch\af31505\loch\f4 s\hich\af4\dbch\af31505\loch\f4 
 compiled under Unix, the file will contain a single LF to indicate the newline. If it's compiled under windows, it will contain a CRLF.
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 #include 
\par \hich\af4\dbch\af31505\loch\f4 #include 
\par 
\par \hich\af4\dbch\af31505\loch\f4 int main()
\par \{
\par \hich\af4\dbch\af31505\loch\f4   FILE *fp = fopen("testfile.txt", "w");
\par \hich\af4\dbch\af31505\loch\f4   fprintf(fp, "Hello World\\n");
\par \hich\af4\dbch\af31505\loch\f4   fc\hich\af4\dbch\af31505\loch\f4 lose(fp);
\par \hich\af4\dbch\af31505\loch\f4   return 0;
\par \}
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
If you look at the generated file with a hex editor, you will see that the windows version has generated the following:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4   H    e    l    l    o         W    o    r    l    d   CR   LF
\par \hich\af4\dbch\af31505\loch\f4 0x48 0x65 0x6C 0x6C 0x6F 0x20 0x57 0x\hich\af4\dbch\af31505\loch\f4 6F 0x72 0x6C 0x64 0x0D 0x0A
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
So file streams are handled in a transparent way, provided of course that you only handle files compatible with your operating system. But many times you have to pass multi-line strings directly to some system functions. }{\rtlch\fcs1 \af15\afs18 
\ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 In\hich\af4\dbch\af31505\loch\f4  practice}{
\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
In Windows you have to pass multi-line strings with \\r\\n, otherwise the system functions don't recognize them correctly as multi-line. This is true e.g. for setting the text of Edit controls, Labels, Windows etc. Also, when you read multi-line t
\hich\af4\dbch\af31505\loch\f4 ext from a file that initially contains "\\r\\n" in translated mode, the string in memory will contain only a single "\\n". See for example the documentation on MSDN about fread:
\par \hich\af4\dbch\af31505\loch\f4 quote: 
\par 
\par \hich\af4\dbch\af31505\loch\f4 MSDN}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 The fread function reads up to count items of size bytes from the \hich\af4\dbch\af31505\loch\f4 
input stream and stores them in buffer. The file pointer associated with stream (if there is one) is increased by the number of bytes actually read. If the given stream is opened in text mode, carriage return\hich\f4 \endash \loch\f4 
linefeed pairs are replaced with single linefe\hich\af4\dbch\af31505\loch\f4 e\hich\af4\dbch\af31505\loch\f4 
d characters. The replacement has no effect on the file pointer or the return value. The file-pointer position is indeterminate if an error occurs. The value of a partially read item cannot be determined.
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
If you want to be able to read text files written on different operating systems, you have to open the file in binary (= untranslated) mode and check for the different newlines yourself.
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q: How to use CString in non-MFC applications?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 A:}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 In most cases,\hich\af4\dbch\af31505\loch\f4 
 you don't need to do that. In order to use CString you have to statically or dynamically link your application to the entire MFC. This would not only increase the size of your executable file, the number of its dependencies, but also makes your program n
\hich\af4\dbch\af31505\loch\f4 o\hich\af4\dbch\af31505\loch\f4 n-portable (especially if it is a Console application).}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232
\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
The recommended solution is to use the Standard C++ Class std::string. It is as powerfull as CString, is portable, using it does not imply adding a huge amount of things you don't need to your project and last, but not least, it is part of the programmin
\hich\af4\dbch\af31505\loch\f4 g language.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f\u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 This being said, if you still want to use CString in your non-MFC application, here it is whar you have to do:}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 
\loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 - Include <afx.h> in one of your main headers;}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
- Open the menu "Project", submenu "Settings". On the "General" tab of the settin\hich\af4\dbch\af31505\loch\f4 gs dialog box choose "Use MFC in a Shared DLL" or "Use MFC in a Static Library" from the dropdown called "Microsoft Foundation Classes".}{
\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 - Rebuild your project.}{
\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
A simple sample of a Console application using CString looks like this:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 #include <afx\hich\af4\dbch\af31505\loch\f4 .h>
\par \hich\af4\dbch\af31505\loch\f4 #include <iostream>
\par \hich\af4\dbch\af31505\loch\f4 int main()
\par \{
\par \hich\af4\dbch\af31505\loch\f4    CString s("Hello");
\par \hich\af4\dbch\af31505\loch\f4    std::cout<<s.GetBuffer(0)<<std::endl;
\par \hich\af4\dbch\af31505\loch\f4    return 0;
\par \}
\par 
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q: How to convert between ANSI and UNICODE strings?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 A:}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 This answers were inspired by a  HYPERLINK "http://www.codeguru.com/forum/showthr\hich\af4\dbch\af31505\loch\f4 ead.php?s=&postid=594418& highlight=To+convert+an+ANSI+string+to+Unicode+use<br />" \\
l "post594418" reply posted by  HYPERLINK "http://www.codeguru.com/forum/member.php?s=&action=getinfo&userid=81047" Yves M}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f
\u8232\'3f\u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 The quick and dirty way }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 
\loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 This way of working \hich\af4\dbch\af31505\loch\f4 
is correct for codepages that are single-byte and Unicode strings that are UCS2. This applies to most cases, but if your program should run correctly on Japanese, Chinese, Taiwanese and other systems which have DBCS codepages then use the "correct way" de
\hich\af4\dbch\af31505\loch\f4 s\hich\af4\dbch\af31505\loch\f4 cribed further below.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 ANSI to UNICODE:}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 The conversion is done using the MultiByteToWideChar() function:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4    char *ansistr = "Hello";
\par \hich\af4\dbch\af31505\loch\f4    int a = lstrlenA(ansistr);
\par \hich\af4\dbch\af31505\loch\f4    BSTR unicodestr = SysAllocStringLen(NULL, a);
\par \hich\af4\dbch\af31505\loch\f4    MultiByteToWideChar(CP_ACP, 0, ansistr, a, unicodestr,\hich\af4\dbch\af31505\loch\f4  a);
\par \hich\af4\dbch\af31505\loch\f4    //... when done, free the BSTR
\par \hich\af4\dbch\af31505\loch\f4    SysFreeString(unicodestr);
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 UNICODE to ANSI:}{
\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
The UNICODE string mostly is returned by some COM function, like this one:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 HRESULT SomeCOMFunction(BSTR *bstr)
\par \{
\par \hich\af4\dbch\af31505\loch\f4    *bstr = ::SysAllocString(L"Hello");
\par \hich\af4\dbch\af31505\loch\f4    retu\hich\af4\dbch\af31505\loch\f4 rn S_OK;
\par \}
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
The conversion is done using the WideCharToMultiByte() function:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4   BSTR unicodestr = 0;
\par \hich\af4\dbch\af31505\loch\f4   SomeCOMFunction(&unicodestr);
\par \hich\af4\dbch\af31505\loch\f4   int a = SysStringLen(unicodestr)+1;
\par \hich\af4\dbch\af31505\loch\f4   char *ansistr = new char[a];
\par \hich\af4\dbch\af31505\loch\f4   WideCharToMultiByte(CP_ACP, 
\par \hich\af4\dbch\af31505\loch\f4                \hich\af4\dbch\af31505\loch\f4          0, 
\par \hich\af4\dbch\af31505\loch\f4                         unicodestr, 
\par \hich\af4\dbch\af31505\loch\f4                         -1, 
\par \hich\af4\dbch\af31505\loch\f4                         ansistr, 
\par \hich\af4\dbch\af31505\loch\f4                         a, 
\par \hich\af4\dbch\af31505\loch\f4                         NULL, 
\par \hich\af4\dbch\af31505\loch\f4                         NULL);
\par \hich\af4\dbch\af31505\loch\f4   //...use the strings, then free their memory:
\par \hich\af4\dbch\af31505\loch\f4   del\hich\af4\dbch\af31505\loch\f4 ete[] ansistr;
\par \hich\af4\dbch\af31505\loch\f4   SysFreeString(unicodestr);
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 The correct way}{
\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
If you want to handle DBCS codepages and UTF-16 Unicode strings then you should do things this way. The idea is to call MultiByteToWideChar resp. WideCharToMultiByte twice. First you get the length of the result, then you allocate the res
\hich\af4\dbch\af31505\loch\f4 ulting string and call it again to convert.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 ANSI to Unicode
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4   char *ansistr = "Hello"
\par \hich\af4\dbch\af31505\loch\f4   int lenA = lstrlenA(ansistr);
\par \hich\af4\dbch\af31505\loch\f4   int lenW;
\par \hich\af4\dbch\af31505\loch\f4   BSTR unicodestr;
\par 
\par \hich\af4\dbch\af31505\loch\f4   lenW = MultiByteToWideChar(CP_ACP, 0, ansistr, lenA, 0, 0);
\par \hich\af4\dbch\af31505\loch\f4   if (lenW > 0) \{ // Check whether \hich\af4\dbch\af31505\loch\f4 conversion was successful
\par \hich\af4\dbch\af31505\loch\f4     unicodestr = SysAllocStringLen(0, lenW);
\par \hich\af4\dbch\af31505\loch\f4     MultiByteToWideChar(CP_ACP, 0, ansistr, lenA, unicodestr, lenW);
\par \hich\af4\dbch\af31505\loch\f4   \} else \{
\par \hich\af4\dbch\af31505\loch\f4     // handle the error
\par \hich\af4\dbch\af31505\loch\f4   \}
\par \hich\af4\dbch\af31505\loch\f4   // when done, free the BSTR
\par \hich\af4\dbch\af31505\loch\f4   SysFreeString(unicodestr);
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Unicode to ANSI
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4   BSTR unicodestr = 0;
\par \hich\af4\dbch\af31505\loch\f4   char *ansistr;
\par \hich\af4\dbch\af31505\loch\f4   SomeCOMFunction(&unicodestr);
\par \hich\af4\dbch\af31505\loch\f4   int lenW = SysStringLen(unicodestr);
\par \hich\af4\dbch\af31505\loch\f4   int lenA = WideCharToMultiByte(CP_ACP, 0, unicodestr, lenW, 0, 0, NULL, NULL);
\par \hich\af4\dbch\af31505\loch\f4   if (lenA > 0) \{
\par \hich\af4\dbch\af31505\loch\f4     ansistr = new char[lenA + 1]; // \hich\af4\dbch\af31505\loch\f4 allocate a final null terminator as well
\par \hich\af4\dbch\af31505\loch\f4     WideCharToMultiByte(CP_ACP, 0, unicodestr, lenW, ansistr, lenA, NULL, NULL);
\par \hich\af4\dbch\af31505\loch\f4     ansistr[lenA] = 0; // Set the null terminator yourself
\par \hich\af4\dbch\af31505\loch\f4   \} else \{
\par \hich\af4\dbch\af31505\loch\f4     // handle the error
\par \hich\af4\dbch\af31505\loch\f4   \}
\par \hich\af4\dbch\af31505\loch\f4   //...use the strings, then free th\hich\af4\dbch\af31505\loch\f4 eir memory:
\par \hich\af4\dbch\af31505\loch\f4   delete[] ansistr;
\par \hich\af4\dbch\af31505\loch\f4   SysFreeString(unicodestr);
\par 
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q: How to assign or compare strings?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 A:}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 Assignment and comparison are not necessarily related, but we decided to handle them together because the mistakes made by programmers beginning with C\hich\af4\dbch\af31505\loch\f4 
++ have a common root, that is, the tendence to use a "natural" syntax.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Assignment}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 This actually is an issue only when working with C-style strings, i.e. char *. The most common mistake is this:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4    char *s1, *s2;
\par \hich\af4\dbch\af31505\loch\f4    //...
\par \hich\af4\dbch\af31505\loch\f4    s2 = s1; // might no\hich\af4\dbch\af31505\loch\f4 t do what one would think
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
This statement assignes to the char pointer s2 the same vale as s1. With other words, s1 and s2 will point to one and the same address in memory. By no means is the string s1 points to copied into s2.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Another mistake that is fr\hich\af4\dbch\af31505\loch\f4 
equently made by beginners is something like this:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4    char *s = "Hello";
\par \hich\af4\dbch\af31505\loch\f4    s[1] = 'a'; // attempting to change the 'e' to an 'a'
\par \hich\af4\dbch\af31505\loch\f4    //...
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
Chances are to get an access violation when running this snip of code. The reason is that, again, the assig\hich\af4\dbch\af31505\loch\f4 
nment applies to the char pointer s, i.e. it will point to the address of the constant string literal "Hello". Since the compiler is allowed to place such const literals in read-only memory, attempting to modify it has undefined results.}{\rtlch\fcs1 
\af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 The correct solut
\hich\af4\dbch\af31505\loch\f4 ion is to use the strcpy() function or one of its relatives.
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4    char *s;
\par \hich\af4\dbch\af31505\loch\f4    s = new char[strlen("Hello")+1]; // reserve one byte for 
\par \hich\af4\dbch\af31505\loch\f4                                     // the trailing '/0'
\par \hich\af4\dbch\af31505\loch\f4    strcpy(s, "Hello");
\par \hich\af4\dbch\af31505\loch\f4    //...
\par \hich\af4\dbch\af31505\loch\f4    delete[] s;
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Both CSt
\hich\af4\dbch\af31505\loch\f4 ring and the Standard C++ Class std::string are "user-friendly" and take care by themselves of this details. This code is perfectly ok:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 #include <string>
\par \hich\af4\dbch\af31505\loch\f4 //...
\par \hich\af4\dbch\af31505\loch\f4    std::string s;
\par \hich\af4\dbch\af31505\loch\f4    s = "Hello";
\par \hich\af4\dbch\af31505\loch\f4    s[1] = 'a';
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Comparison}{\rtlch\fcs1 
\af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 This also is an issue onl
\hich\af4\dbch\af31505\loch\f4 y when working with C-style strings, i.e. char *. The most common mistake is this:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4    char *s1, *s2;
\par \hich\af4\dbch\af31505\loch\f4    // ...
\par \hich\af4\dbch\af31505\loch\f4    if(s1 == s2) .... // wrong!!!!
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
This statement may seem to be the natural syntax, but it unfortunately compares the value of two char\hich\af4\dbch\af31505\loch\f4  pointers and by no means the strings they point to. }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
To compare C-style strings you have to use the strcmp() function or one of its relatives:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4    char *s1, *s2;
\par \hich\af4\dbch\af31505\loch\f4    //...
\par \hich\af4\dbch\af31505\loch\f4    if(!strcmp(s1, s2))....
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
Note that strcmp() returns 0 if the strings are \hich\af4\dbch\af31505\loch\f4 identical, thus the !strcmp(...) in the if statement. Have a look in MSDN for further details on strcmp() and other string comparison functions.}{\rtlch\fcs1 \af15\afs18 
\ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
Both CString and the Standard C++ Class std::string have overloaded comparison operators, which leads to a mo\hich\af4\dbch\af31505\loch\f4 re natural syntax:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 #include <string>
\par \hich\af4\dbch\af31505\loch\f4 //...
\par \hich\af4\dbch\af31505\loch\f4    std::string s1, s2;
\par \hich\af4\dbch\af31505\loch\f4    //...
\par \hich\af4\dbch\af31505\loch\f4    if(s1 == s2) ....
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
All this being said, it should be clear why you always should prefere working with a string wrapper class over working with C-style strings. And there\hich\af4\dbch\af31505\loch\f4  is much more std::string can do for you than this!
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q: What is the difference between CString and std::string? Can I mix them?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{
\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 A: CString is a MFC class and can be used only for Windows programs that are staticaly or dynamically linked to the MFC. Use C\hich\af4\dbch\af31505\loch\f4 
Strings when you write MFC programs.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 std::string is a Standard C++ Class - in other words, it is part of the C++ programming language. It is a very powerfull class that can be used in any kind of Windows programs (MFC, Win32, Win32 Console) as well as in 
\hich\af4\dbch\af31505\loch\f4 non-Windows programs.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 CStrings and std::strings can be mixed, if you know what you are doing and you take some precautions.
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q: How to get the hex representation of a ... into a string?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 A:}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 There are two common scenarios: wanting a string containing the h\hich\af4\dbch\af31505\loch\f4 ex representation of }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 some built-in type variable, like an int or a float or wanting the hex }
{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
representation of every byte from a string.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 Built-in types}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 Following template function can be used on the built-in types:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 template <class T>
\par \hich\af4\dbch\af31505\loch\f4 CString Va\hich\af4\dbch\af31505\loch\f4 riableToHexString(T t)
\par \{
\par \hich\af4\dbch\af31505\loch\f4    CString ret, tmp;
\par \hich\af4\dbch\af31505\loch\f4    for(int i = sizeof(T)-1; i>=0; i--)\{
\par \hich\af4\dbch\af31505\loch\f4       unsigned char c = 
\par \hich\af4\dbch\af31505\loch\f4            reinterpret_cast<unsigned char *>(&t)[i];
\par \hich\af4\dbch\af31505\loch\f4       tmp.Format(" %02hX", c);
\par \hich\af4\dbch\af31505\loch\f4       ret+=tmp;
\par \hich\af4\dbch\af31505\loch\f4    \}
\par \hich\af4\dbch\af31505\loch\f4    return ret;
\par \}
\par \hich\af4\dbch\af31505\loch\f4 //...
\par \hich\af4\dbch\af31505\loch\f4 // Following call
\par \hich\af4\dbch\af31505\loch\f4    AfxMessageBox(VariableToHexString<int>(12345678), 
\par \hich\af4\dbch\af31505\loch\f4                  MB_OK,
\par \hich\af4\dbch\af31505\loch\f4                  0);
\par \hich\af4\dbch\af31505\loch\f4 // produces a message box containing "00 BC 61 4E"
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
We also provide another  HYPERLINK "http://www.codeguru.com/forum/showthread.php?s=&threadid=231054" solution that uses Standard C++ Classes.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 
\loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Strings
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 CString StringToHexString(CString cs)
\par \{
\par \hich\af4\dbch\af31505\loch\f4    CString ret, tmp;
\par \hich\af4\dbch\af31505\loch\f4    for(int i=0; i<cs.GetLength(); \hich\af4\dbch\af31505\loch\f4 i++)\{
\par \hich\af4\dbch\af31505\loch\f4       unsigned char c = cs[i];
\par \hich\af4\dbch\af31505\loch\f4       tmp.Format(" %02hX", c);
\par \hich\af4\dbch\af31505\loch\f4       ret+=tmp;
\par \hich\af4\dbch\af31505\loch\f4    \}
\par \hich\af4\dbch\af31505\loch\f4    return ret;
\par \}
\par \hich\af4\dbch\af31505\loch\f4 // Following call
\par \hich\af4\dbch\af31505\loch\f4    AfxMessageBox(StringToHexString("Hello"), MB_OK, 0);
\par \hich\af4\dbch\af31505\loch\f4 // produces a message box containing "48 65 6C 6C 6F"
\par 
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q: How to convert b\hich\af4\dbch\af31505\loch\f4 etween a CString and a BSTR?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{
\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 A:}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 CString to BSTR:}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Use the AllocSysString member function of the CString:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4    CString cs("Hello");
\par \hich\af4\dbch\af31505\loch\f4    BSTR bstr = cs.AllocSysString();
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
If you pass the BSTR to some OLE function, this will normally free the BSTRs memory when done with it.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 
\af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 If y\hich\af4\dbch\af31505\loch\f4 ou use the BSTR by yourself, dont forget to call ::SysFreeString() when you're done with it.
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4    ::SysFreeString(bstr);
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 BSTR to CString:}{\rtlch\fcs1 
\af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
You will mostly need this when you have some OLE function that returns a BSTR. Such an OLE Function will basi\hich\af4\dbch\af31505\loch\f4 cly do something like}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 
\loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 this:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 HRESULT SomeOLEFunction(BSTR &bstr)
\par \{
\par \hich\af4\dbch\af31505\loch\f4    bstr = ::SysAllocString(L"Hello");
\par \hich\af4\dbch\af31505\loch\f4    return S_OK;
\par \}
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
Use a temporary variable of the type _bstr_t to wrap the BSTR. This way you handle both the 208 }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 and make sure that you have\hich\af4\dbch\af31505\loch\f4  no memory leak:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4    BSTR bstr;
\par \hich\af4\dbch\af31505\loch\f4    SomeOLEFunction(bstr);
\par \hich\af4\dbch\af31505\loch\f4    _bstr_t tmp(bstr, FALSE); //wrap the BSTR
\par \hich\af4\dbch\af31505\loch\f4    CString cs(static_cast<const char *>(tmp)); //convert it
\par \hich\af4\dbch\af31505\loch\f4    AfxMessageBox(cs, MB_OK, 0); //test 
\par \hich\af4\dbch\af31505\loch\f4    // when tmp goes out of scope it will free \hich\af4\dbch\af31505\loch\f4 the BSTRs memory
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
Note that this won't work in a UNICODE build.
\par 
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q: How to convert between CString and std::string?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 A:}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 CString to std::string:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4    CString cs("Hello");
\par \hich\af4\dbch\af31505\loch\f4    std::string s((LPCTSTR)cs);
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 std::string to CString:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4    std::string s("Hello");
\par \hich\af4\dbch\af31505\loch\f4    \hich\af4\dbch\af31505\loch\f4 CString cs(s.c_str());
\par 
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q: How to convert a char* to CString?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 A:}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 Use either the constructor of CString, or its = operator:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4    char *str = "Hello";
\par \hich\af4\dbch\af31505\loch\f4    CString cs(str);
\par \hich\af4\dbch\af31505\loch\f4    // or
\par \hich\af4\dbch\af31505\loch\f4    CString cs;
\par \hich\af4\dbch\af31505\loch\f4    cs = str;
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q: How to convert a CString to a char*?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 A:}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 You will need this mostly to pass a CString to a function that expects a char*. 
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4    // Prototype of a function expecting a char*:
\par \hich\af4\dbch\af31505\loch\f4    void Foo(char *c);
\par \hich\af4\dbch\af31505\loch\f4    //...
\par \hich\af4\dbch\af31505\loch\f4    CString csMyString = "Hello World";
\par \hich\af4\dbch\af31505\loch\f4    //...now call Foo():
\par \hich\af4\dbch\af31505\loch\f4    char *str = csMy\hich\af4\dbch\af31505\loch\f4 String.GetBuffer(csMyString.GetLength());
\par \hich\af4\dbch\af31505\loch\f4    Foo(str);
\par \hich\af4\dbch\af31505\loch\f4    // or directly:
\par \hich\af4\dbch\af31505\loch\f4    Foo(csMyString.GetBuffer(csMyString.GetLength()));
\par \hich\af4\dbch\af31505\loch\f4    // if Foo modifies the passed char*, you must call
\par \hich\af4\dbch\af31505\loch\f4    csMyString.ReleaseBuffer(-1);
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Notes:}{\rtlch\fcs1 \af15\afs18 
\ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 a) CString::GetBuffer() will re
\hich\af4\dbch\af31505\loch\f4 turn a char* only in non-UNICODE builds. }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 b) CString has an implicit 208 operator to LPCTSTR. In non-UNICODE builds, that is a const char*. Do not use a cast hack like}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 this:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4    Foo((char *)((LPCSTR)csMyString)); // BAD!!!!
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 c) Do not call any oth
\hich\af4\dbch\af31505\loch\f4 er CString member function on csMyString between GetBuffer() and ReleaseBuffer().
\par 
\par \hich\af4\dbch\af31505\loch\f4 Strings: How to convert a numeric type to a string? 
\par \hich\af4\dbch\af31505\loch\f4 The ol' C method (deprecated) 
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4    char *c[10]; // simply large enough - don't forget the 
\par \hich\af4\dbch\af31505\loch\f4                 // ext\hich\af4\dbch\af31505\loch\f4 ra byte needed for the trailing '/0' 
\par \hich\af4\dbch\af31505\loch\f4    int i = 1234;
\par \hich\af4\dbch\af31505\loch\f4    sprintf(c, "%d", i);
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
See sprintf() in MSDN for further details.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 Using CString 
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4    int i = 1234;
\par \hich\af4\dbch\af31505\loch\f4    CString cs;
\par \hich\af4\dbch\af31505\loch\f4    cs.Format("%d", i);
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
The format specifiers are the same as for sprintf(). See the CString documentation in MSDN - it is fairly straight forward.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{
\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 A word \hich\af4\dbch\af31505\loch\f4 
of warning: mismatching the format specifiers ("%d") and the actually passed parameters will lead to unpredictable results, both for sprintf() and for CString::Format().}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 The C++ way:}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Following sample shows a template function that uses Standard C++ Classe
\hich\af4\dbch\af31505\loch\f4 s to complete the task: 
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 #include <string>
\par \hich\af4\dbch\af31505\loch\f4 #include <sstream>
\par \hich\af4\dbch\af31505\loch\f4 #include <iostream>
\par 
\par \hich\af4\dbch\af31505\loch\f4 template <class T>
\par \hich\af4\dbch\af31505\loch\f4 std::string to_string(T t, std::ios_base & (*f)(std::ios_base&))
\par \{
\par \hich\af4\dbch\af31505\loch\f4    std::ostringstream oss;
\par \hich\af4\dbch\af31505\loch\f4    oss << f << t;
\par \hich\af4\dbch\af31505\loch\f4    return oss.str();
\par \}
\par 
\par \hich\af4\dbch\af31505\loch\f4 int main()
\par \{
\par \hich\af4\dbch\af31505\loch\f4    // the second parameter of to_string() should be one of 
\par \hich\af4\dbch\af31505\loch\f4    // std::hex, std::dec or std::oct
\par \hich\af4\dbch\af31505\loch\f4    std::cout<<to_string<long>(123456, std::hex)<<std::endl;
\par \hich\af4\dbch\af31505\loch\f4    std::cout<<to_string<long>(123456, std::oct)<<std::endl;
\par \hich\af4\dbch\af31505\loch\f4    return 0;
\par \}\hich\af4\dbch\af31505\loch\f4  
\par 
\par \hich\af4\dbch\af31505\loch\f4 /* output:
\par \hich\af4\dbch\af31505\loch\f4 1e240
\par \hich\af4\dbch\af31505\loch\f4 36\hich\af4\dbch\af31505\loch\f4 1100
\par \hich\af4\dbch\af31505\loch\f4 */
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
This method is not only very elegant, but also type safe, because the compiler will pick
\par 
\par \hich\af4\dbch\af31505\loch\f4 Strings: How to convert a string into a numeric type? 
\par \hich\af4\dbch\af31505\loch\f4 There is one thing that you are not allowed to ignore when you convert a string into a numeric}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}
{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 type: \hich\af4\dbch\af31505\loch\f4 the conversion might fail because the }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 
\loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 string you are convertnig might not contain a valid representation of a number.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 If, for example, you try to convert the string "Hello" to a number, }{
\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 the conversion must fail.}{
\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
The ol' C way (deprecated):}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 Many people\hich\af4\dbch\af31505\loch\f4  use the atoi(), atof() and the other functions from this "family". They're easy to use but have a major}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
drawback: they return 0 both on failure and when converting the string "0", thus making a consistent error detection as good }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}
{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 as impossible. We give th\hich\af4\dbch\af31505\loch\f4 is little sample for the sake of completeness:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4    const char* str_int = "777";
\par \hich\af4\dbch\af31505\loch\f4    const char* str_float = "333.3";
\par \hich\af4\dbch\af31505\loch\f4    int i = atoi(str_int);
\par \hich\af4\dbch\af31505\loch\f4    float f = atof(str_float);
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 A better way:}{\rtlch\fcs1 
\af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
A bit more complicated, but also more consistent way is to u\hich\af4\dbch\af31505\loch\f4 se sscanf() in one of it's flavors:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4    const char* str_int = "777";
\par \hich\af4\dbch\af31505\loch\f4    const char* str_float = "333.3";
\par \hich\af4\dbch\af31505\loch\f4    int i;
\par \hich\af4\dbch\af31505\loch\f4    float f;
\par \hich\af4\dbch\af31505\loch\f4    if(EOF == sscanf(str_int, "%d", &i))\{
\par \hich\af4\dbch\af31505\loch\f4       //error
\par \hich\af4\dbch\af31505\loch\f4    \}
\par \hich\af4\dbch\af31505\loch\f4    if(EOF == sscanf(str_float, "%f", &f))\{
\par \hich\af4\dbch\af31505\loch\f4       //error
\par \hich\af4\dbch\af31505\loch\f4    \}
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
Since sscanf() takes a const char* parameter, you can directly use a CString with}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 it:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4    CString str_int("777");
\par \hich\af4\dbch\af31505\loch\f4    if(EOF == sscanf(str_int, "%d", &i))\{
\par \hich\af4\dbch\af31505\loch\f4       //error
\par \hich\af4\dbch\af31505\loch\f4    \}
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
Be very careful with the format specifier (i.e. "%d" in this example). s\hich\af4\dbch\af31505\loch\f4 scanf() has no way to check whether the format specifier }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 
\loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 and the type of the passed variable match each other. If they don't you will get unexpected}{\rtlch\fcs1 \af15\afs18 
\ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
results. Also note that sscanf() is able to extract more than one }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 numerical value from a string with one \hich\af4\dbch\af31505\loch\f4 call. Have a look in MSDN for details.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 
\loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 The C++ way}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 
\loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Following sample shows a template function that uses Standard C++ Classes to complete the}{\rtlch\fcs1 
\af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 task:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 #include <string>
\par \hich\af4\dbch\af31505\loch\f4 #include <sstream>
\par \hich\af4\dbch\af31505\loch\f4 #include <iostream>
\par 
\par \hich\af4\dbch\af31505\loch\f4 template <class T>
\par \hich\af4\dbch\af31505\loch\f4 bool from_string(T &t\hich\af4\dbch\af31505\loch\f4 , 
\par \hich\af4\dbch\af31505\loch\f4                  const std::string &s, 
\par \hich\af4\dbch\af31505\loch\f4                  std::ios_base & (*f)(std::ios_base&))
\par \{
\par \hich\af4\dbch\af31505\loch\f4    std::istringstream iss(s);
\par \hich\af4\dbch\af31505\loch\f4    return !(iss>>f>>t).fail();
\par \}
\par 
\par \hich\af4\dbch\af31505\loch\f4 int main()
\par \{
\par \hich\af4\dbch\af31505\loch\f4    int i;
\par \hich\af4\dbch\af31505\loch\f4    float f;
\par \hich\af4\dbch\af31505\loch\f4    // the third parameter of from_string() should be 
\par \hich\af4\dbch\af31505\loch\f4    \hich\af4\dbch\af31505\loch\f4 // one of std::hex, std::dec or std::oct
\par \hich\af4\dbch\af31505\loch\f4    if(from_string<int>(i, std::string("ff"), std::hex))\{
\par \hich\af4\dbch\af31505\loch\f4       std::cout<<i<<std::endl;
\par \hich\af4\dbch\af31505\loch\f4    \}
\par \hich\af4\dbch\af31505\loch\f4    else\{
\par \hich\af4\dbch\af31505\loch\f4       std::cout<<"from_string failed"<<std::endl;
\par \hich\af4\dbch\af31505\loch\f4    \}
\par \hich\af4\dbch\af31505\loch\f4    if(from_string<float>(f, 
\par \hich\af4\dbch\af31505\loch\f4                              \hich\af4\dbch\af31505\loch\f4   std::string("123.456"),
\par \hich\af4\dbch\af31505\loch\f4                                std::dec))
\par \hich\af4\dbch\af31505\loch\f4    \{
\par \hich\af4\dbch\af31505\loch\f4       std::cout<<f<<std::endl;
\par \hich\af4\dbch\af31505\loch\f4    \}
\par \hich\af4\dbch\af31505\loch\f4    else\{
\par \hich\af4\dbch\af31505\loch\f4       std::cout<<"from_string failed"<<std::endl;
\par \hich\af4\dbch\af31505\loch\f4    \}
\par \hich\af4\dbch\af31505\loch\f4    return 0;
\par \}\hich\af4\dbch\af31505\loch\f4  
\par 
\par \hich\af4\dbch\af31505\loch\f4 /* output:
\par \hich\af4\dbch\af31505\loch\f4 255
\par \hich\af4\dbch\af31505\loch\f4 123.456
\par \hich\af4\dbch\af31505\loch\f4 */
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
This method is not only elegant but al\hich\af4\dbch\af31505\loch\f4 so type safe, because the compiler will pick the proper std::istringstream::operator >>() at compile time, }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 according to the operand type.
\par 
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 STL FAQ
\par 
\par \hich\af4\dbch\af31505\loch\f4 General
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q: How can I define a dynamic two-dimensional array?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 A: The basic idea is to use a vector<vecto\hich\af4\dbch\af31505\loch\f4 
r<T> >. Use containment to write a template class that offers the desired functionality. Following skeleton code shows how to implement and use such a class:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 #include <vector>
\par 
\par \hich\af4\dbch\af31505\loch\f4 template <typename T>
\par \hich\af4\dbch\af31505\loch\f4 class dynamic_array
\par \{
\par \hich\af4\dbch\af31505\loch\f4 public:
\par \hich\af4\dbch\af31505\loch\f4     dynamic_array()\{\}\hich\af4\dbch\af31505\loch\f4 ;
\par \hich\af4\dbch\af31505\loch\f4     dynamic_array(int rows, int cols)
\par \hich\af4\dbch\af31505\loch\f4     \{
\par \hich\af4\dbch\af31505\loch\f4         for(int i=0; i<rows; ++i)\{
\par \hich\af4\dbch\af31505\loch\f4             data_.push_back(std::vector<T>(cols));
\par \hich\af4\dbch\af31505\loch\f4         \}
\par \hich\af4\dbch\af31505\loch\f4     \}
\par \hich\af4\dbch\af31505\loch\f4     // other ctors ....
\par \hich\af4\dbch\af31505\loch\f4     std::vector<T> & operator[](int i)
\par \hich\af4\dbch\af31505\loch\f4     \{
\par \hich\af4\dbch\af31505\loch\f4         return data_[i];
\par \hich\af4\dbch\af31505\loch\f4     \}
\par \hich\af4\dbch\af31505\loch\f4     co\hich\af4\dbch\af31505\loch\f4 nst std::vector<T> & operator[] (int i) const
\par \hich\af4\dbch\af31505\loch\f4     \{
\par \hich\af4\dbch\af31505\loch\f4         return data_[i];
\par \hich\af4\dbch\af31505\loch\f4     \}
\par \hich\af4\dbch\af31505\loch\f4     // other accessors, like at() ...
\par 
\par \tab \hich\af4\dbch\af31505\loch\f4 // other member functions, like reserve()....
\par 
\par \hich\af4\dbch\af31505\loch\f4 private:
\par \hich\af4\dbch\af31505\loch\f4     std::vector<std::vector<T> > data_;
\par \hich\af4\dbch\af31505\loch\f4     
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par 
\par \hich\af4\dbch\af31505\loch\f4 int main()
\par \{
\par \hich\af4\dbch\af31505\loch\f4     dynamic_arr\hich\af4\dbch\af31505\loch\f4 ay<int> a(3, 3);
\par \hich\af4\dbch\af31505\loch\f4     a[1][1] = 2;
\par \hich\af4\dbch\af31505\loch\f4     int x = a[1][1];
\par \hich\af4\dbch\af31505\loch\f4     return 0;
\par \}
\par 
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q: What is the best way to remove all elements of a particular value from a container?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232
\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 A:}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 
\ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Use the so-called "remove/erase" idiom:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 // taken from Item 32 of Scott Myers' Effective STL
\par \hich\af4\dbch\af31505\loch\f4 vector v;
\par \hich\af4\dbch\af31505\loch\f4 v.erase(remove(v.begin(), v.end(), 99), v.end());
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
This is because of the simple fact that remove() is a generic}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 algorithm which takes iter\hich\af4\dbch\af31505\loch\f4 ators as its arguments. The iterators}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}
{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 know nothing of their container; the STL was designed so as to}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 
\loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 grant the smallest possible amount of coupling. Thus, the}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 iterators cannot call any container's "erase()" or similar function.}{
\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
remove() DOES return the co\hich\af4\dbch\af31505\loch\f4 ntainer's new end() [which just}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 
\f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 happens to be the first element that was removed] and this value}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{
\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 can be used in the container's erase() call.
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q: I get the following warning when compiling the STL with MSVC. The code works fine though. Should I be worried\hich\af4\dbch\af31505\loch\f4 ? Am I doing something wrong?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
warning C4786: 'Some STL template class' : identifier was truncated to '255' characters in the debug information}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f
\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 A: No, you are not doing anything wrong, nor should you be worried. MSVC is just telling you that the name of \hich\af4\dbch\af31505\loch\f4 
the STL template class is very long and that it has truncated the name in the debug information only. In theory, this might cause possible collisions when attempting to debug applications, but in pratice this very, very seldom happens if ever.}{
\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 You can dis
\hich\af4\dbch\af31505\loch\f4 able this warning by including the preprocessor directive:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par \hich\af4\dbch\af31505\loch\f4 #pragma warning(disable:4786)
\par 
\par 
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Advanced
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q: What is the meaning of the Alloc template parameter in std::vector ?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 
\af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Q: How do I define my own allocator for use in STL containers?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 
\loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 A: The who\hich\af4\dbch\af31505\loch\f4 
le concept is very well explained in  HYPERLINK "http://www.codeguru.com/cpp_mfc/allocator.html" \\t "_blank" Gabriel and Andreas' article about Allocators.}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 
\loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 The template parameter Alloc specifies the type of allocator that the container should use to manag
\hich\af4\dbch\af31505\loch\f4 
e its memory. Every time the container needs a bit of memory, it will ask the allocator to retrieve it for him. The allocator usually just calls new (and delete when it has to free memory), but there can be more sophisticated strategies for allocators.}{
\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Us
\hich\af4\dbch\af31505\loch\f4 
ually, you are fine with the standard allocator provided by your STL. However, at times you may need to specify the allocation strategy explicitly. In theory, writing a custom allocator is not very difficult, but the task is complicated by the fact that t
\hich\af4\dbch\af31505\loch\f4 h\hich\af4\dbch\af31505\loch\f4 e standard C++ design relies on template member functions which quite a few compilers don't support (e.g. Visual C++ 6).}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 
\fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
A simple example for an allocator which never frees memory is this code (note that you need a recent compiler to get this to work):
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 #include 
\par 
\par \hich\af4\dbch\af31505\loch\f4 const size_t TEST_SIZE = 10000;
\par \hich\af4\dbch\af31505\loch\f4 const double TIME_MULTIPLIER = 100.0;
\par 
\par \hich\af4\dbch\af31505\loch\f4 const size_t MAX_SIZE = (TEST_SI\hich\af4\dbch\af31505\loch\f4 ZE + 1) * 12;
\par 
\par \hich\af4\dbch\af31505\loch\f4 class MemoryPool
\par \{
\par \hich\af4\dbch\af31505\loch\f4   unsigned char  *m_data;
\par \hich\af4\dbch\af31505\loch\f4   size_t      m_top;
\par \hich\af4\dbch\af31505\loch\f4   int        m_refcount;
\par \hich\af4\dbch\af31505\loch\f4 public:
\par \hich\af4\dbch\af31505\loch\f4   MemoryPool()
\par \hich\af4\dbch\af31505\loch\f4   \{
\par \hich\af4\dbch\af31505\loch\f4     m_data = new unsigned char[MAX_SIZE];
\par \hich\af4\dbch\af31505\loch\f4     m_top = 0;
\par \hich\af4\dbch\af31505\loch\f4     m_refcount = 0;
\par \hich\af4\dbch\af31505\loch\f4   \}
\par \hich\af4\dbch\af31505\loch\f4   ~MemoryPool()
\par \hich\af4\dbch\af31505\loch\f4   \{
\par \hich\af4\dbch\af31505\loch\f4     delete [] m_data;
\par \hich\af4\dbch\af31505\loch\f4   \}
\par \hich\af4\dbch\af31505\loch\f4   void AddRef()
\par \hich\af4\dbch\af31505\loch\f4   \{
\par \hich\af4\dbch\af31505\loch\f4     ++m_refcount;
\par \hich\af4\dbch\af31505\loch\f4   \}
\par \hich\af4\dbch\af31505\loch\f4   void *alloc_mem(size_t n)
\par \hich\af4\dbch\af31505\loch\f4   \{
\par \hich\af4\dbch\af31505\loch\f4     if ((MAX_SIZE - m_top) >= n) \{
\par \hich\af4\dbch\af31505\loch\f4       size_t old_top = m_top;
\par \hich\af4\dbch\af31505\loch\f4       m_top += n;
\par \hich\af4\dbch\af31505\loch\f4       return m_data + old_top;
\par \hich\af4\dbch\af31505\loch\f4     \} else \{
\par \hich\af4\dbch\af31505\loch\f4       return 0;
\par \hich\af4\dbch\af31505\loch\f4     \}
\par \hich\af4\dbch\af31505\loch\f4   \}
\par \hich\af4\dbch\af31505\loch\f4   void Release()
\par \hich\af4\dbch\af31505\loch\f4   \{
\par \hich\af4\dbch\af31505\loch\f4     \hich\af4\dbch\af31505\loch\f4 if (--m_refcount == 0) \{
\par \hich\af4\dbch\af31505\loch\f4       delete this;
\par \hich\af4\dbch\af31505\loch\f4     \}
\par \hich\af4\dbch\af31505\loch\f4   \}
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par 
\par \hich\af4\dbch\af31505\loch\f4 template <class T>
\par \hich\af4\dbch\af31505\loch\f4 class MyAlloc \{
\par \hich\af4\dbch\af31505\loch\f4 public:
\par \hich\af4\dbch\af31505\loch\f4   // type definitions
\par \hich\af4\dbch\af31505\loch\f4   typedef T        value_type;
\par \hich\af4\dbch\af31505\loch\f4   typedef T*       pointer;
\par \hich\af4\dbch\af31505\loch\f4   typedef const T* const_pointer;
\par \hich\af4\dbch\af31505\loch\f4   typedef T&       reference;
\par \hich\af4\dbch\af31505\loch\f4   typedef \hich\af4\dbch\af31505\loch\f4 const T& const_reference;
\par \hich\af4\dbch\af31505\loch\f4   typedef std::size_t    size_type;
\par \hich\af4\dbch\af31505\loch\f4   typedef std::ptrdiff_t difference_type;
\par 
\par \hich\af4\dbch\af31505\loch\f4   // rebind allocator to type U
\par \hich\af4\dbch\af31505\loch\f4   template <class U >
\par \hich\af4\dbch\af31505\loch\f4   struct rebind \{
\par \hich\af4\dbch\af31505\loch\f4     typedef MyAlloc< U > other;
\par \hich\af4\dbch\af31505\loch\f4   \};
\par 
\par \hich\af4\dbch\af31505\loch\f4   // return address of values
\par \hich\af4\dbch\af31505\loch\f4   pointer a\hich\af4\dbch\af31505\loch\f4 ddress (reference value) const \{
\par \hich\af4\dbch\af31505\loch\f4     return &value;
\par \hich\af4\dbch\af31505\loch\f4   \}
\par \hich\af4\dbch\af31505\loch\f4   const_pointer address (const_reference value) const \{
\par \hich\af4\dbch\af31505\loch\f4     return &value;
\par \hich\af4\dbch\af31505\loch\f4   \}
\par 
\par \hich\af4\dbch\af31505\loch\f4   /* constructors and destructor
\par \hich\af4\dbch\af31505\loch\f4   * - nothing to do because the allocator has no state
\par \hich\af4\dbch\af31505\loch\f4   */
\par \hich\af4\dbch\af31505\loch\f4   MyAlloc() throw() \{
\par \hich\af4\dbch\af31505\loch\f4     m\hich\af4\dbch\af31505\loch\f4 _pPool = new MemoryPool;
\par \hich\af4\dbch\af31505\loch\f4     m_pPool->AddRef();
\par \hich\af4\dbch\af31505\loch\f4   \}
\par \hich\af4\dbch\af31505\loch\f4   MyAlloc(const MyAlloc& src) throw() \{
\par \hich\af4\dbch\af31505\loch\f4     m_pPool = src.m_pPool;
\par \hich\af4\dbch\af31505\loch\f4     m_pPool->AddRef();
\par \hich\af4\dbch\af31505\loch\f4   \}
\par \hich\af4\dbch\af31505\loch\f4   template <class U >
\par \hich\af4\dbch\af31505\loch\f4   MyAlloc (const MyAlloc< U > &src) throw() \{
\par \hich\af4\dbch\af31505\loch\f4     m_pPool = src.m_pPool;
\par \hich\af4\dbch\af31505\loch\f4     m_pPool->Ad\hich\af4\dbch\af31505\loch\f4 dRef();
\par \hich\af4\dbch\af31505\loch\f4   \}
\par \hich\af4\dbch\af31505\loch\f4   ~MyAlloc() throw() \{
\par \hich\af4\dbch\af31505\loch\f4     m_pPool->Release();
\par \hich\af4\dbch\af31505\loch\f4   \}
\par 
\par \hich\af4\dbch\af31505\loch\f4   // return maximum number of elements that can be allocated
\par \hich\af4\dbch\af31505\loch\f4   size_type max_size () const throw() \{
\par \hich\af4\dbch\af31505\loch\f4     return MAX_SIZE / sizeof(T);
\par \hich\af4\dbch\af31505\loch\f4   \}
\par 
\par \hich\af4\dbch\af31505\loch\f4   // allocate but don't initialize num elements of ty\hich\af4\dbch\af31505\loch\f4 pe T
\par \hich\af4\dbch\af31505\loch\f4   pointer allocate (size_type num, const void* = 0) \{
\par \hich\af4\dbch\af31505\loch\f4     // print message and allocate memory with global new
\par \hich\af4\dbch\af31505\loch\f4     pointer ret = (pointer) m_pPool->alloc_mem(num * sizeof(T));
\par \hich\af4\dbch\af31505\loch\f4     return ret;
\par \hich\af4\dbch\af31505\loch\f4   \}
\par 
\par \hich\af4\dbch\af31505\loch\f4   // initialize elements of allocated storage p with v\hich\af4\dbch\af31505\loch\f4 alue value
\par \hich\af4\dbch\af31505\loch\f4   void construct (pointer p, const T& value) \{
\par \hich\af4\dbch\af31505\loch\f4     // initialize memory with placement new
\par \hich\af4\dbch\af31505\loch\f4     new((void*)p)T(value);
\par \hich\af4\dbch\af31505\loch\f4   \}
\par 
\par \hich\af4\dbch\af31505\loch\f4   // destroy elements of initialized storage p
\par \hich\af4\dbch\af31505\loch\f4   void destroy (pointer p) \{
\par \hich\af4\dbch\af31505\loch\f4     // destroy objects by calling their destru\hich\af4\dbch\af31505\loch\f4 ctor
\par \hich\af4\dbch\af31505\loch\f4     p->~T();
\par \hich\af4\dbch\af31505\loch\f4   \}
\par 
\par \hich\af4\dbch\af31505\loch\f4   // deallocate storage p of deleted elements
\par \hich\af4\dbch\af31505\loch\f4   void deallocate (pointer p, size_type num) \{
\par \hich\af4\dbch\af31505\loch\f4     // do not deallocate memory
\par \hich\af4\dbch\af31505\loch\f4   \}
\par 
\par \hich\af4\dbch\af31505\loch\f4   MemoryPool  *m_pPool;
\par \}\hich\af4\dbch\af31505\loch\f4 ;
\par 
\par \hich\af4\dbch\af31505\loch\f4 // return that all specializations of this allocator are interchangeable
\par \hich\af4\dbch\af31505\loch\f4 te\hich\af4\dbch\af31505\loch\f4 mplate <class T1, class T2>
\par \hich\af4\dbch\af31505\loch\f4 bool operator== (const MyAlloc&, const MyAlloc&) throw() \{
\par \hich\af4\dbch\af31505\loch\f4   return true;
\par \}
\par \hich\af4\dbch\af31505\loch\f4 template <class T1, class T2>
\par \hich\af4\dbch\af31505\loch\f4 bool operator!= (const MyAlloc&, const MyAlloc&) throw() \{
\par \hich\af4\dbch\af31505\loch\f4   return false;
\par \}
\par 
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 STL&MFC:
\par 
\par \hich\af4\dbch\af31505\loch\f4 Q: How can I sort a CArray (or C\hich\af4\dbch\af31505\loch\f4 StringArray, CIntArray, etc.)?}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f
\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 A: If the CxxxArray's items can be compared, then use std::sort:}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 
\loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 Ascending:
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 #include <algorithm>
\par \hich\af4\dbch\af31505\loch\f4 //...
\par \hich\af4\dbch\af31505\loch\f4 CArray<int, int&> MyCArray;
\par \hich\af4\dbch\af31505\loch\f4 CStringArray MyStringArray;
\par \hich\af4\dbch\af31505\loch\f4 //...
\par \hich\af4\dbch\af31505\loch\f4 // Sort the CArray of ints
\par \hich\af4\dbch\af31505\loch\f4 std::sort( MyCArray.Get\hich\af4\dbch\af31505\loch\f4 Data(), 
\par \hich\af4\dbch\af31505\loch\f4            MyCArray.GetData() + MyCArray.GetSize());
\par 
\par \hich\af4\dbch\af31505\loch\f4 // Sort the CStringArray
\par \hich\af4\dbch\af31505\loch\f4 std::sort( MyStringArray.GetData(), 
\par \hich\af4\dbch\af31505\loch\f4            MyStringArray.GetData() + MyStringArray.GetSize());
\par 
\par }{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
Descending: You need to supply a comparison function.
\par \hich\af4\dbch\af31505\loch\f4 code:
\par 
\par \hich\af4\dbch\af31505\loch\f4 #incl\hich\af4\dbch\af31505\loch\f4 ude <algorithm>
\par \hich\af4\dbch\af31505\loch\f4 //...
\par \hich\af4\dbch\af31505\loch\f4 bool SortDescendingInt(const int& x, const int& y)
\par \{
\par \hich\af4\dbch\af31505\loch\f4    return x > y;
\par \}
\par 
\par \hich\af4\dbch\af31505\loch\f4 bool SortDescendingString( const CString& s1, 
\par \hich\af4\dbch\af31505\loch\f4                            const CString& s2)
\par \{
\par \hich\af4\dbch\af31505\loch\f4    return s1 > s2;
\par \}
\par 
\par \hich\af4\dbch\af31505\loch\f4 CArray<int, int> MyCArray;
\par \hich\af4\dbch\af31505\loch\f4 CStringArray MySt\hich\af4\dbch\af31505\loch\f4 ringArray;
\par \hich\af4\dbch\af31505\loch\f4 //...
\par \hich\af4\dbch\af31505\loch\f4 // Sort the CArray of ints
\par \hich\af4\dbch\af31505\loch\f4 std::sort( MyCArray.GetData(), 
\par \hich\af4\dbch\af31505\loch\f4            MyCArray.GetData() + MyCArray.GetSize(), 
\par \hich\af4\dbch\af31505\loch\f4            SortDescendingInt);
\par 
\par \hich\af4\dbch\af31505\loch\f4 // Sort the CStringArray
\par \hich\af4\dbch\af31505\loch\f4 std::sort( MyStringArray.GetData(), 
\par \hich\af4\dbch\af31505\loch\f4            MyStringArray.GetData(\hich\af4\dbch\af31505\loch\f4 ) + MyStringArray.GetSize(),
\par \hich\af4\dbch\af31505\loch\f4            SortDescendingString);
\par 
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Windows programming}{\rtlch\fcs1 \af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f\u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 
\hich\af4\dbch\af31505\loch\f4 General:
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 STL
\par \hich\af4\dbch\af31505\loch\f4 The Standard Template Libraries (STL's) are a set of C++ template classes to provide common programming data structures and functions such as doubly linke\hich\af4\dbch\af31505\loch\f4 
d lists (list), paired arrays (map), expandable arrays (vector), large string storage and manipulation (rope), etc. The STL library is available from the  HYPERLINK "http://www.sgi.com/tech/stl/" STL home page. This is also your best detailed reference fo
\hich\af4\dbch\af31505\loch\f4 r\hich\af4\dbch\af31505\loch\f4  all of the STL class functions available. 
\par \hich\af4\dbch\af31505\loch\f4 STL can be categorized into the following groupings: 
\par 
\par \hich\af4\dbch\af31505\loch\f4 STL can be categorized into the following groupings: 
\par \hich\af4\dbch\af31505\loch\f4 Container classes: 
\par \hich\af4\dbch\af31505\loch\f4 Sequences: 
\par \hich\af4\dbch\af31505\loch\f4  HYPERLINK "http://www.yolinux.com/TUTORIALS/LinuxTutorialC++STL.html" \\\hich\af4\dbch\af31505\loch\f4 l "VECTOR" vector: (this tutorial) Dynamic array of variables, struct or objects. Insert data at the end. }{\rtlch\fcs1 
\af15\afs18 \ltrch\fcs0 \fs18\loch\af15\hich\af15\dbch\af15\insrsid5453207 \loch\af15\hich\af15\dbch\f15 \u8232\'3f}{\rtlch\fcs1 \af4\afs18 \ltrch\fcs0 \f4\fs18\insrsid5453207 \hich\af4\dbch\af31505\loch\f4 
(also see the  HYPERLINK "http://www.yolinux.com/TUTORIALS/CppBoostStlPtrList.html" YoLinux.com tutorial on using and STL list and boost ptr_list to\hich\af4\dbch\af31505\loch\f4  manage pointers.) 
\par \hich\af4\dbch\af31505\loch\f4 deque: Array which supports insertion/removal of elements at beginning or end of array 
\par \hich\af4\dbch\af31505\loch\f4  HYPERLINK "http://www.yolinux.com/TUTORIALS/LinuxTutorialC++STL.html" \\l "LIST" list: (this tutorial) Linked list of variables, struct or objects. \hich\af4\dbch\af31505\loch\f4 Insert/remove anywhere. 
\par \hich\af4\dbch\af31505\loch\f4 Associative Containers: 
\par \hich\af4\dbch\af31505\loch\f4 set (duplicate data not allowed in set), multiset (duplication allowed): Collection of ordered data in a balanced binary tree structure. Fast search. 
\par \hich\af4\dbch\af31505\loch\f4  HYPERLINK "http://www.yolinux.com/TUTORIALS/CppStlMult\hich\af4\dbch\af31505\loch\f4 iMap.html" map (unique keys),  HYPERLINK "http://www.yolinux.com/TUTORIALS/CppStlMultiMap.html" \\
l "MULTIMAP" multimap (duplicate keys allowed): Associative key-value pair held in balanced binary tree structure. 
\par \hich\af4\dbch\af31505\loch\f4 Container adapters: 
\par \hich\af4\dbch\af31505\loch\f4 stack LIFO 
\par \hich\af4\dbch\af31505\loch\f4 queue FIFO\hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 priority_queue returns element with highest priority. 
\par \hich\af4\dbch\af31505\loch\f4 String: 
\par \hich\af4\dbch\af31505\loch\f4  HYPERLINK "http://www.yolinux.com/TUTORIALS/LinuxTutorialC++StringClass.html" string: Character strings and manipulation 
\par \hich\af4\dbch\af31505\loch\f4 rope: String storage and manipulation 
\par \hich\af4\dbch\af31505\loch\f4 bitset: Contains a more intu\hich\af4\dbch\af31505\loch\f4 itive method of storing and manipulating bits. 
\par \hich\af4\dbch\af31505\loch\f4 Operations/Utilities: 
\par \hich\af4\dbch\af31505\loch\f4 iterator: (examples in this tutorial) STL class to represent position in an STL container. An iterator is declared to be associated with a single container class type. 
\par \hich\af4\dbch\af31505\loch\f4 algorithm: Routi\hich\af4\dbch\af31505\loch\f4 nes to find, count, sort, search, ... elements in container classes 
\par \hich\af4\dbch\af31505\loch\f4 auto_ptr: Class to manage memory pointers and avoid memory leaks. 
\par 
\par 
\par }{\*\themedata 504b030414000600080000002100e9de0fbfff0000001c020000130000005b436f6e74656e745f54797065735d2e786d6cac91cb4ec3301045f748fc83e52d4a
9cb2400825e982c78ec7a27cc0c8992416c9d8b2a755fbf74cd25442a820166c2cd933f79e3be372bd1f07b5c3989ca74aaff2422b24eb1b475da5df374fd9ad
5689811a183c61a50f98f4babebc2837878049899a52a57be670674cb23d8e90721f90a4d2fa3802cb35762680fd800ecd7551dc18eb899138e3c943d7e503b6
b01d583deee5f99824e290b4ba3f364eac4a430883b3c092d4eca8f946c916422ecab927f52ea42b89a1cd59c254f919b0e85e6535d135a8de20f20b8c12c3b0
0c895fcf6720192de6bf3b9e89ecdbd6596cbcdd8eb28e7c365ecc4ec1ff1460f53fe813d3cc7f5b7f020000ffff0300504b030414000600080000002100a5d6
a7e7c0000000360100000b0000005f72656c732f2e72656c73848fcf6ac3300c87ef85bd83d17d51d2c31825762fa590432fa37d00e1287f68221bdb1bebdb4f
c7060abb0884a4eff7a93dfeae8bf9e194e720169aaa06c3e2433fcb68e1763dbf7f82c985a4a725085b787086a37bdbb55fbc50d1a33ccd311ba548b6309512
0f88d94fbc52ae4264d1c910d24a45db3462247fa791715fd71f989e19e0364cd3f51652d73760ae8fa8c9ffb3c330cc9e4fc17faf2ce545046e37944c69e462
a1a82fe353bd90a865aad41ed0b5b8f9d6fd010000ffff0300504b0304140006000800000021006b799616830000008a0000001c0000007468656d652f746865
6d652f7468656d654d616e616765722e786d6c0ccc4d0ac3201040e17da17790d93763bb284562b2cbaebbf600439c1a41c7a0d29fdbd7e5e38337cedf14d59b
4b0d592c9c070d8a65cd2e88b7f07c2ca71ba8da481cc52c6ce1c715e6e97818c9b48d13df49c873517d23d59085adb5dd20d6b52bd521ef2cdd5eb9246a3d8b
4757e8d3f729e245eb2b260a0238fd010000ffff0300504b03041400060008000000210030dd4329a8060000a41b0000160000007468656d652f7468656d652f
7468656d65312e786d6cec594f6fdb3614bf0fd87720746f6327761a07758ad8b19b2d4d1bc46e871e698996d850a240d2497d1bdae38001c3ba618715d86d87
615b8116d8a5fb34d93a6c1dd0afb0475292c5585e9236d88aad3e2412f9e3fbff1e1fa9abd7eec70c1d1221294fda5efd72cd4324f1794093b0eddd1ef62fad
79482a9c0498f184b4bd2991deb58df7dfbb8ad755446282607d22d771db8b944ad79796a40fc3585ee62949606ecc458c15bc8a702910f808e8c66c69b9565b
5d8a314d3c94e018c8de1a8fa94fd05093f43672e23d06af89927ac06762a049136785c10607758d9053d965021d62d6f6804fc08f86e4bef210c352c144dbab
999fb7b4717509af678b985ab0b6b4ae6f7ed9ba6c4170b06c788a705430adf71bad2b5b057d03606a1ed7ebf5babd7a41cf00b0ef83a6569632cd467faddec9
699640f6719e76b7d6ac355c7c89feca9cccad4ea7d36c65b258a206641f1b73f8b5da6a6373d9c11b90c537e7f08dce66b7bbeae00dc8e257e7f0fd2badd586
8b37a088d1e4600ead1ddaef67d40bc898b3ed4af81ac0d76a197c86826828a24bb318f3442d8ab518dfe3a20f000d6458d104a9694ac6d88728eee2782428d6
0cf03ac1a5193be4cbb921cd0b495fd054b5bd0f530c1931a3f7eaf9f7af9e3f45c70f9e1d3ff8e9f8e1c3e3073f5a42ceaa6d9c84e5552fbffdeccfc71fa33f
9e7ef3f2d117d57859c6fffac327bffcfc793510d26726ce8b2f9ffcf6ecc98baf3efdfdbb4715f04d814765f890c644a29be408edf3181433567125272371be
15c308d3f28acd249438c19a4b05fd9e8a1cf4cd296699771c393ac4b5e01d01e5a30a787d72cf1178108989a2159c77a2d801ee72ce3a5c545a6147f32a9979
3849c26ae66252c6ed637c58c5bb8b13c7bfbd490a75330f4b47f16e441c31f7184e140e494214d273fc80900aedee52ead87597fa824b3e56e82e451d4c2b4d
32a423279a668bb6690c7e9956e90cfe766cb37b077538abd27a8b1cba48c80acc2a841f12e698f13a9e281c57911ce298950d7e03aba84ac8c154f8655c4f2a
f074481847bd804859b5e696007d4b4edfc150b12addbecba6b18b148a1e54d1bc81392f23b7f84137c2715a851dd0242a633f900710a218ed715505dfe56e86
e877f0034e16bafb0e258ebb4faf06b769e888340b103d331115bebc4eb813bf83291b63624a0d1475a756c734f9bbc2cd28546ecbe1e20a3794ca175f3fae90
fb6d2dd99bb07b55e5ccf68942bd0877b23c77b908e8db5f9db7f024d9239010f35bd4bbe2fcae387bfff9e2bc289f2fbe24cfaa301468dd8bd846dbb4ddf1c2
ae7b4c191ba8292337a469bc25ec3d411f06f53a73e224c5292c8de0516732307070a1c0660d125c7d44553488700a4d7bddd3444299910e254ab984c3a219ae
a4adf1d0f82b7bd46cea4388ad1c12ab5d1ed8e1153d9c9f350a3246aad01c6873462b9ac05999ad5cc988826eafc3acae853a33b7ba11cd1445875ba1b236b1
399483c90bd560b0b0263435085a21b0f22a9cf9356b38ec6046026d77eba3dc2dc60b17e92219e180643ed27acffba86e9c94c7ca9c225a0f1b0cfae0788ad5
4adc5a9aec1b703b8b93caec1a0bd8e5de7b132fe5113cf312503b998e2c2927274bd051db6b35979b1ef271daf6c6704e86c73805af4bdd476216c26593af84
0dfb5393d964f9cc9bad5c313709ea70f561ed3ea7b053075221d51696910d0d339585004b34272bff7213cc7a510a5454a3b349b1b206c1f0af490176745d4b
c663e2abb2b34b23da76f6352ba57ca2881844c1111ab189d8c7e07e1daaa04f40255c77988aa05fe06e4e5bdb4cb9c5394bbaf28d98c1d971ccd20867e556a7
689ec9166e0a522183792b8907ba55ca6e943bbf2a26e52f48957218ffcf54d1fb09dc3eac04da033e5c0d0b8c74a6b43d2e54c4a10aa511f5fb021a07533b20
5ae07e17a621a8e082dafc17e450ffb739676998b48643a4daa7211214f623150942f6a02c99e83b85583ddbbb2c4996113211551257a656ec1139246ca86be0
aadedb3d1441a89b6a929501833b197fee7b9641a3503739e57c732a59b1f7da1cf8a73b1f9bcca0945b874d4393dbbf10b1680f66bbaa5d6f96e77b6f59113d
316bb31a795600b3d256d0cad2fe354538e7566b2bd69cc6cbcd5c38f0e2bcc63058344429dc2121fd07f63f2a7c66bf76e80d75c8f7a1b622f878a18941d840
545fb28d07d205d20e8ea071b283369834296bdaac75d256cb37eb0bee740bbe278cad253b8bbfcf69eca23973d939b97891c6ce2cecd8da8e2d343578f6648a
c2d0383fc818c798cf64e52f597c740f1cbd05df0c264c49134cf09d4a60e8a107260f20f92d47b374e32f000000ffff0300504b030414000600080000002100
0dd1909fb60000001b010000270000007468656d652f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73848f4d0ac2301484f7
8277086f6fd3ba109126dd88d0add40384e4350d363f2451eced0dae2c082e8761be9969bb979dc9136332de3168aa1a083ae995719ac16db8ec8e4052164e89
d93b64b060828e6f37ed1567914b284d262452282e3198720e274a939cd08a54f980ae38a38f56e422a3a641c8bbd048f7757da0f19b017cc524bd62107bd500
1996509affb3fd381a89672f1f165dfe514173d9850528a2c6cce0239baa4c04ca5bbabac4df000000ffff0300504b01022d0014000600080000002100e9de0f
bfff0000001c0200001300000000000000000000000000000000005b436f6e74656e745f54797065735d2e786d6c504b01022d0014000600080000002100a5d6
a7e7c0000000360100000b00000000000000000000000000300100005f72656c732f2e72656c73504b01022d00140006000800000021006b799616830000008a
0000001c00000000000000000000000000190200007468656d652f7468656d652f7468656d654d616e616765722e786d6c504b01022d00140006000800000021
0030dd4329a8060000a41b00001600000000000000000000000000d60200007468656d652f7468656d652f7468656d65312e786d6c504b01022d001400060008
00000021000dd1909fb60000001b0100002700000000000000000000000000b20900007468656d652f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73504b050600000000050005005d010000ad0a00000000}
{\*\colorschememapping 3c3f786d6c2076657273696f6e3d22312e302220656e636f64696e673d225554462d3822207374616e64616c6f6e653d22796573223f3e0d0a3c613a636c724d
617020786d6c6e733a613d22687474703a2f2f736368656d61732e6f70656e786d6c666f726d6174732e6f72672f64726177696e676d6c2f323030362f6d6169
6e22206267313d226c743122207478313d22646b3122206267323d226c743222207478323d22646b322220616363656e74313d22616363656e74312220616363
656e74323d22616363656e74322220616363656e74333d22616363656e74332220616363656e74343d22616363656e74342220616363656e74353d22616363656e74352220616363656e74363d22616363656e74362220686c696e6b3d22686c696e6b2220666f6c486c696e6b3d22666f6c486c696e6b222f3e}
{\*\latentstyles\lsdstimax267\lsdlockeddef0\lsdsemihiddendef1\lsdunhideuseddef1\lsdqformatdef0\lsdprioritydef99{\lsdlockedexcept \lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority0 \lsdlocked0 Normal;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 1;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 2;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 3;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 4;
\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 5;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 6;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 7;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 8;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 9;
\lsdpriority39 \lsdlocked0 toc 1;\lsdpriority39 \lsdlocked0 toc 2;\lsdpriority39 \lsdlocked0 toc 3;\lsdpriority39 \lsdlocked0 toc 4;\lsdpriority39 \lsdlocked0 toc 5;\lsdpriority39 \lsdlocked0 toc 6;\lsdpriority39 \lsdlocked0 toc 7;
\lsdpriority39 \lsdlocked0 toc 8;\lsdpriority39 \lsdlocked0 toc 9;\lsdqformat1 \lsdpriority35 \lsdlocked0 caption;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority10 \lsdlocked0 Title;\lsdpriority1 \lsdlocked0 Default Paragraph Font;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority11 \lsdlocked0 Subtitle;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority22 \lsdlocked0 Strong;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority20 \lsdlocked0 Emphasis;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority59 \lsdlocked0 Table Grid;\lsdunhideused0 \lsdlocked0 Placeholder Text;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority1 \lsdlocked0 No Spacing;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 1;\lsdunhideused0 \lsdlocked0 Revision;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority34 \lsdlocked0 List Paragraph;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority29 \lsdlocked0 Quote;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority30 \lsdlocked0 Intense Quote;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority19 \lsdlocked0 Subtle Emphasis;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority21 \lsdlocked0 Intense Emphasis;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority31 \lsdlocked0 Subtle Reference;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority32 \lsdlocked0 Intense Reference;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority33 \lsdlocked0 Book Title;\lsdpriority37 \lsdlocked0 Bibliography;\lsdqformat1 \lsdpriority39 \lsdlocked0 TOC Heading;}}{\*\datastore 010500000200000018000000
4d73786d6c322e534158584d4c5265616465722e362e3000000000000000000000060000
d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff090006000000000000000000000001000000010000000000000000100000feffffff00000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffdfffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff52006f006f007400200045006e00740072007900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000500ffffffffffffffffffffffff0c6ad98892f1d411a65f0040963251e5000000000000000000000000100d
111a6e8ccf01feffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000105000000000000}}